

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Thu Mar 17 04:00:43 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    69                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    70                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    71  0000                     
    72                           ; Version 2.35
    73                           ; Generated 05/05/2021 GMT
    74                           ; 
    75                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    76                           ; All rights reserved.
    77                           ; 
    78                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    79                           ; 
    80                           ; Redistribution and use in source and binary forms, with or without modification, are
    81                           ; permitted provided that the following conditions are met:
    82                           ; 
    83                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    84                           ;        conditions and the following disclaimer.
    85                           ; 
    86                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    87                           ;        of conditions and the following disclaimer in the documentation and/or other
    88                           ;        materials provided with the distribution. Publication is not required when
    89                           ;        this file is used in an embedded application.
    90                           ; 
    91                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    92                           ;        software without specific prior written permission.
    93                           ; 
    94                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    95                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    96                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    97                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    98                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    99                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   100                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   101                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   102                           ; 
   103                           ; 
   104                           ; Code-generator required, PIC18F67K40 Definitions
   105                           ; 
   106                           ; SFR Addresses
   107  0000                     _RC4STAbits	set	3815
   108  0000                     _SP4BRGH	set	3814
   109  0000                     _LATEbits	set	3965
   110  0000                     _TRISEbits	set	3973
   111  0000                     _LATFbits	set	3966
   112  0000                     _LATGbits	set	3967
   113  0000                     _TRISGbits	set	3975
   114  0000                     _TRISHbits	set	3976
   115  0000                     _LATHbits	set	3968
   116  0000                     _TRISDbits	set	3972
   117  0000                     _TRISFbits	set	3974
   118  0000                     _SSP2CON2bits	set	3802
   119  0000                     _LATG	set	3967
   120  0000                     _LATE	set	3965
   121  0000                     _RX4PPS	set	3605
   122  0000                     _SSP2CLKPPS	set	3612
   123  0000                     _SSP2DATPPS	set	3613
   124  0000                     _ANSELDbits	set	3751
   125  0000                     _ANSELFbits	set	3764
   126  0000                     _LATDbits	set	3964
   127  0000                     _PORTFbits	set	3982
   128  0000                     _T2PR	set	4028
   129  0000                     _T2CONbits	set	4029
   130  0000                     _PWM7DCH	set	4000
   131  0000                     _PWM6DCH	set	4003
   132  0000                     _SSP2BUF	set	3797
   133  0000                     _SSP2ADD	set	3798
   134  0000                     _SSP2CON1bits	set	3801
   135  0000                     _LATAbits	set	3961
   136  0000                     _TRISCbits	set	3971
   137  0000                     _TRISAbits	set	3969
   138  0000                     _LATCbits	set	3963
   139  0000                     _TX4REG	set	3812
   140  0000                     _SP4BRGL	set	3813
   141  0000                     _TX4STAbits	set	3816
   142  0000                     _BAUD4CONbits	set	3817
   143  0000                     _SSP2CON2	set	3802
   144  0000                     _SSP2STAT	set	3800
   145  0000                     _PIR4bits	set	3639
   146  0000                     _RC0PPS	set	3682
   147  0000                     _RC7PPS	set	3689
   148  0000                     _RD5PPS	set	3695
   149  0000                     _RE2PPS	set	3700
   150  0000                     _RD6PPS	set	3696
   151  0000                     _T2CLKCONbits	set	4031
   152  0000                     _T2HLTbits	set	4030
   153  0000                     _PWM6CONbits	set	4004
   154  0000                     _PWM7CONbits	set	4001
   155                           
   156                           ; #config settings
   157                           
   158                           	psect	cinit
   159  01BA70                     __pcinit:
   160                           	callstack 0
   161  01BA70                     start_initialization:
   162                           	callstack 0
   163  01BA70                     __initialization:
   164                           	callstack 0
   165                           
   166                           ; Clear objects allocated to BANK2 (60 bytes)
   167  01BA70  EE02  F08A         	lfsr	0,__pbssBANK2
   168  01BA74  0E3C               	movlw	60
   169  01BA76                     clear_0:
   170  01BA76  6AEE               	clrf	postinc0,c
   171  01BA78  06E8               	decf	wreg,f,c
   172  01BA7A  E1FD               	bnz	clear_0
   173                           
   174                           ; Clear objects allocated to BANK1 (20 bytes)
   175  01BA7C  EE01  F0BA         	lfsr	0,__pbssBANK1
   176  01BA80  0E14               	movlw	20
   177  01BA82                     clear_1:
   178  01BA82  6AEE               	clrf	postinc0,c
   179  01BA84  06E8               	decf	wreg,f,c
   180  01BA86  E1FD               	bnz	clear_1
   181                           
   182                           ; Clear objects allocated to BANK0 (8 bytes)
   183  01BA88  EE00  F0EB         	lfsr	0,__pbssBANK0
   184  01BA8C  0E08               	movlw	8
   185  01BA8E                     clear_2:
   186  01BA8E  6AEE               	clrf	postinc0,c
   187  01BA90  06E8               	decf	wreg,f,c
   188  01BA92  E1FD               	bnz	clear_2
   189  01BA94                     end_of_initialization:
   190                           	callstack 0
   191  01BA94                     __end_of__initialization:
   192                           	callstack 0
   193  01BA94  0100               	movlb	0
   194  01BA96  EFA8  F0EB         	goto	_main	;jump to C main() function
   195                           
   196                           	psect	bssBANK0
   197  0000EB                     __pbssBANK0:
   198                           	callstack 0
   199  0000EB                     fwdTimeArray@j:
   200                           	callstack 0
   201  0000EB                     	ds	1
   202  0000EC                     actionArray@i:
   203                           	callstack 0
   204  0000EC                     	ds	1
   205  0000ED                     	ds	1
   206  0000EE                     calibrateColor@i:
   207                           	callstack 0
   208  0000EE                     	ds	1
   209  0000EF                     _TxBufReadCnt:
   210                           	callstack 0
   211  0000EF                     	ds	1
   212  0000F0                     _TxBufWriteCnt:
   213                           	callstack 0
   214  0000F0                     	ds	1
   215  0000F1                     _RxBufReadCnt:
   216                           	callstack 0
   217  0000F1                     	ds	1
   218  0000F2                     _RxBufWriteCnt:
   219                           	callstack 0
   220  0000F2                     	ds	1
   221                           
   222                           	psect	bssBANK1
   223  0001BA                     __pbssBANK1:
   224                           	callstack 0
   225  0001BA                     _EUSART4RXbuf:
   226                           	callstack 0
   227  0001BA                     	ds	20
   228                           
   229                           	psect	bssBANK2
   230  00028A                     __pbssBANK2:
   231                           	callstack 0
   232  00028A                     _EUSART4TXbuf:
   233                           	callstack 0
   234  00028A                     	ds	60
   235                           
   236                           	psect	cstackBANK2
   237  000200                     __pcstackBANK2:
   238                           	callstack 0
   239  000200                     main@sc:
   240                           	callstack 0
   241                           
   242                           ; 120 bytes @ 0x0
   243  000200                     	ds	120
   244  000278                     main@motorR:
   245                           	callstack 0
   246                           
   247                           ; 9 bytes @ 0x78
   248  000278                     	ds	9
   249  000281                     main@motorL:
   250                           	callstack 0
   251                           
   252                           ; 9 bytes @ 0x81
   253  000281                     	ds	9
   254                           
   255                           	psect	cstackBANK1
   256  000100                     __pcstackBANK1:
   257                           	callstack 0
   258  000100                     main@fwdArr:
   259                           	callstack 0
   260                           
   261                           ; 50 bytes @ 0x0
   262  000100                     	ds	50
   263  000132                     main@clear:
   264                           	callstack 0
   265                           
   266                           ; 8 bytes @ 0x32
   267  000132                     	ds	8
   268  00013A                     main@sh:
   269                           	callstack 0
   270                           
   271                           ; 120 bytes @ 0x3A
   272  00013A                     	ds	120
   273  0001B2                     main@hr:
   274                           	callstack 0
   275                           
   276                           ; 8 bytes @ 0xB2
   277  0001B2                     	ds	8
   278                           
   279                           	psect	cstackBANK0
   280  000060                     __pcstackBANK0:
   281                           	callstack 0
   282  000060                     ??___fltol:
   283                           
   284                           ; 1 bytes @ 0x0
   285  000060                     	ds	4
   286  000064                     convertHSV@sc:
   287                           	callstack 0
   288  000064                     findHSV@cr:
   289                           	callstack 0
   290                           
   291                           ; 2 bytes @ 0x4
   292  000064                     	ds	2
   293  000066                     convertHSV@sh:
   294                           	callstack 0
   295  000066                     findHSV@hr:
   296                           	callstack 0
   297                           
   298                           ; 2 bytes @ 0x6
   299  000066                     	ds	2
   300  000068                     ??_convertHSV:
   301  000068                     ??_findHSV:
   302                           
   303                           ; 1 bytes @ 0x8
   304  000068                     	ds	4
   305  00006C                     findHSV@v:
   306                           	callstack 0
   307                           
   308                           ; 4 bytes @ 0xC
   309  00006C                     	ds	4
   310  000070                     findHSV@ss:
   311                           	callstack 0
   312  000070                     convertHSV@v:
   313                           	callstack 0
   314                           
   315                           ; 4 bytes @ 0x10
   316  000070                     	ds	2
   317  000072                     findHSV@s:
   318                           	callstack 0
   319                           
   320                           ; 4 bytes @ 0x12
   321  000072                     	ds	2
   322  000074                     convertHSV@ss:
   323                           	callstack 0
   324                           
   325                           ; 2 bytes @ 0x14
   326  000074                     	ds	2
   327  000076                     _findHSV$784:
   328                           	callstack 0
   329  000076                     convertHSV@s:
   330                           	callstack 0
   331                           
   332                           ; 4 bytes @ 0x16
   333  000076                     	ds	2
   334  000078                     _findHSV$785:
   335                           	callstack 0
   336                           
   337                           ; 2 bytes @ 0x18
   338  000078                     	ds	2
   339  00007A                     _convertHSV$761:
   340                           	callstack 0
   341  00007A                     _findHSV$786:
   342                           	callstack 0
   343                           
   344                           ; 2 bytes @ 0x1A
   345  00007A                     	ds	2
   346  00007C                     _convertHSV$763:
   347                           	callstack 0
   348  00007C                     _findHSV$2549:
   349                           	callstack 0
   350                           
   351                           ; 4 bytes @ 0x1C
   352  00007C                     	ds	2
   353  00007E                     _convertHSV$765:
   354                           	callstack 0
   355                           
   356                           ; 2 bytes @ 0x1E
   357  00007E                     	ds	2
   358  000080                     findHSV@maxIndex:
   359                           	callstack 0
   360  000080                     _convertHSV$2548:
   361                           	callstack 0
   362                           
   363                           ; 4 bytes @ 0x20
   364  000080                     	ds	1
   365  000081                     findHSV@h:
   366                           	callstack 0
   367                           
   368                           ; 4 bytes @ 0x21
   369  000081                     	ds	3
   370  000084                     convertHSV@maxIndex:
   371                           	callstack 0
   372                           
   373                           ; 1 bytes @ 0x24
   374  000084                     	ds	1
   375  000085                     convertHSV@h:
   376                           	callstack 0
   377  000085                     findHSV@minValue:
   378                           	callstack 0
   379                           
   380                           ; 4 bytes @ 0x25
   381  000085                     	ds	4
   382  000089                     convertHSV@minValue:
   383                           	callstack 0
   384  000089                     findHSV@maxValue:
   385                           	callstack 0
   386                           
   387                           ; 4 bytes @ 0x29
   388  000089                     	ds	4
   389  00008D                     ?_findcolor:
   390                           	callstack 0
   391  00008D                     findcolor@cr:
   392                           	callstack 0
   393  00008D                     convertHSV@maxValue:
   394                           	callstack 0
   395                           
   396                           ; 4 bytes @ 0x2D
   397  00008D                     	ds	2
   398  00008F                     findcolor@hr:
   399                           	callstack 0
   400                           
   401                           ; 2 bytes @ 0x2F
   402  00008F                     	ds	2
   403  000091                     convertHSV@i:
   404                           	callstack 0
   405  000091                     findcolor@sh:
   406                           	callstack 0
   407                           
   408                           ; 2 bytes @ 0x31
   409  000091                     	ds	2
   410  000093                     findcolor@lenRead:
   411                           	callstack 0
   412                           
   413                           ; 2 bytes @ 0x33
   414  000093                     	ds	2
   415  000095                     ??_findcolor:
   416                           
   417                           ; 1 bytes @ 0x35
   418  000095                     	ds	8
   419  00009D                     findcolor@tolH:
   420                           	callstack 0
   421                           
   422                           ; 2 bytes @ 0x3D
   423  00009D                     	ds	2
   424  00009F                     findcolor@tolV:
   425                           	callstack 0
   426                           
   427                           ; 2 bytes @ 0x3F
   428  00009F                     	ds	2
   429  0000A1                     findcolor@tolS:
   430                           	callstack 0
   431                           
   432                           ; 1 bytes @ 0x41
   433  0000A1                     	ds	1
   434  0000A2                     findcolor@c:
   435                           	callstack 0
   436                           
   437                           ; 1 bytes @ 0x42
   438  0000A2                     	ds	1
   439  0000A3                     findcolor@a:
   440                           	callstack 0
   441                           
   442                           ; 1 bytes @ 0x43
   443  0000A3                     	ds	1
   444  0000A4                     findcolor@b:
   445                           	callstack 0
   446                           
   447                           ; 1 bytes @ 0x44
   448  0000A4                     	ds	1
   449  0000A5                     findcolor@i:
   450                           	callstack 0
   451                           
   452                           ; 1 bytes @ 0x45
   453  0000A5                     	ds	1
   454  0000A6                     findcolor@j:
   455                           	callstack 0
   456                           
   457                           ; 1 bytes @ 0x46
   458  0000A6                     	ds	1
   459  0000A7                     findcolor@k:
   460                           	callstack 0
   461                           
   462                           ; 1 bytes @ 0x47
   463  0000A7                     	ds	1
   464  0000A8                     findcolor@col:
   465                           	callstack 0
   466                           
   467                           ; 1 bytes @ 0x48
   468  0000A8                     	ds	1
   469  0000A9                     ??_main:
   470                           
   471                           ; 1 bytes @ 0x49
   472  0000A9                     	ds	2
   473  0000AB                     main@actArr:
   474                           	callstack 0
   475                           
   476                           ; 50 bytes @ 0x4B
   477  0000AB                     	ds	50
   478  0000DD                     main@lenArr:
   479                           	callstack 0
   480                           
   481                           ; 1 bytes @ 0x7D
   482  0000DD                     	ds	1
   483  0000DE                     main@lenRead:
   484                           	callstack 0
   485                           
   486                           ; 1 bytes @ 0x7E
   487  0000DE                     	ds	1
   488  0000DF                     main@v:
   489                           	callstack 0
   490                           
   491                           ; 1 bytes @ 0x7F
   492  0000DF                     	ds	1
   493  0000E0                     main@mode:
   494                           	callstack 0
   495                           
   496                           ; 1 bytes @ 0x80
   497  0000E0                     	ds	1
   498  0000E1                     main@fwdTime:
   499                           	callstack 0
   500                           
   501                           ; 2 bytes @ 0x81
   502  0000E1                     	ds	2
   503  0000E3                     main@cr:
   504                           	callstack 0
   505                           
   506                           ; 8 bytes @ 0x83
   507  0000E3                     	ds	8
   508                           
   509                           	psect	cstackCOMRAM
   510  000001                     __pcstackCOMRAM:
   511                           	callstack 0
   512  000001                     ??_I2C_2_Master_Idle:
   513  000001                     ?___wmul:
   514                           	callstack 0
   515  000001                     ?___xxtofl:
   516                           	callstack 0
   517  000001                     turnonLED@RL:
   518                           	callstack 0
   519  000001                     initDCmotorsPWM@PWMperiod:
   520                           	callstack 0
   521  000001                     actionArray@actArr:
   522                           	callstack 0
   523  000001                     fwdTimeArray@fwdArr:
   524                           	callstack 0
   525  000001                     ___wmul@multiplier:
   526                           	callstack 0
   527  000001                     ___xxtofl@val:
   528                           	callstack 0
   529                           
   530                           ; 4 bytes @ 0x0
   531  000001                     	ds	1
   532  000002                     ??_I2C_2_Master_Read:
   533  000002                     I2C_2_Master_Write@data_byte:
   534                           	callstack 0
   535                           
   536                           ; 1 bytes @ 0x1
   537  000002                     	ds	1
   538  000003                     color_writetoaddr@value:
   539                           	callstack 0
   540  000003                     I2C_2_Master_Read@ack:
   541                           	callstack 0
   542  000003                     actionArray@colorScan:
   543                           	callstack 0
   544  000003                     turnonLED@GL:
   545                           	callstack 0
   546  000003                     initDCmotorsPWM@mL:
   547                           	callstack 0
   548  000003                     fwdTimeArray@fwdTime:
   549                           	callstack 0
   550  000003                     ___wmul@multiplicand:
   551                           	callstack 0
   552                           
   553                           ; 2 bytes @ 0x2
   554  000003                     	ds	1
   555  000004                     ??_actionArray:
   556  000004                     color_writetoaddr@address:
   557                           	callstack 0
   558  000004                     I2C_2_Master_Read@tmp:
   559                           	callstack 0
   560                           
   561                           ; 1 bytes @ 0x3
   562  000004                     	ds	1
   563  000005                     ??_color_click_init:
   564  000005                     ??_fwdTimeArray:
   565  000005                     ??___xxtofl:
   566  000005                     ?_color_read_Red:
   567                           	callstack 0
   568  000005                     ?_color_read_Green:
   569                           	callstack 0
   570  000005                     ?_color_read_Blue:
   571                           	callstack 0
   572  000005                     ?_color_read_Clear:
   573                           	callstack 0
   574  000005                     turnonLED@BL:
   575                           	callstack 0
   576  000005                     initDCmotorsPWM@mR:
   577                           	callstack 0
   578  000005                     ___wmul@product:
   579                           	callstack 0
   580                           
   581                           ; 2 bytes @ 0x4
   582  000005                     	ds	2
   583  000007                     ??_initDCmotorsPWM:
   584  000007                     ??_color_read_Red:
   585  000007                     ??_color_read_Green:
   586  000007                     ??_color_read_Blue:
   587  000007                     ??_color_read_Clear:
   588  000007                     ?___lwdiv:
   589                           	callstack 0
   590  000007                     fwdTimeArray@fwdSize:
   591                           	callstack 0
   592  000007                     ___lwdiv@dividend:
   593                           	callstack 0
   594                           
   595                           ; 2 bytes @ 0x6
   596  000007                     	ds	1
   597  000008                     actionArray@lenArr:
   598                           	callstack 0
   599                           
   600                           ; 1 bytes @ 0x7
   601  000008                     	ds	1
   602  000009                     ___xxtofl@sign:
   603                           	callstack 0
   604  000009                     ___lwdiv@divisor:
   605                           	callstack 0
   606                           
   607                           ; 2 bytes @ 0x8
   608  000009                     	ds	1
   609  00000A                     ___xxtofl@exp:
   610                           	callstack 0
   611  00000A                     color_read_Red@tmp:
   612                           	callstack 0
   613  00000A                     color_read_Green@tmp:
   614                           	callstack 0
   615  00000A                     color_read_Blue@tmp:
   616                           	callstack 0
   617  00000A                     color_read_Clear@tmp:
   618                           	callstack 0
   619                           
   620                           ; 2 bytes @ 0x9
   621  00000A                     	ds	1
   622  00000B                     ___lwdiv@quotient:
   623                           	callstack 0
   624  00000B                     ___xxtofl@arg:
   625                           	callstack 0
   626                           
   627                           ; 4 bytes @ 0xA
   628  00000B                     	ds	1
   629  00000C                     calibrateColor@sc:
   630                           	callstack 0
   631                           
   632                           ; 2 bytes @ 0xB
   633  00000C                     	ds	1
   634  00000D                     ___lwdiv@counter:
   635                           	callstack 0
   636                           
   637                           ; 1 bytes @ 0xC
   638  00000D                     	ds	1
   639  00000E                     ??_calibrateColor:
   640  00000E                     setMotorPWM@m:
   641                           	callstack 0
   642                           
   643                           ; 2 bytes @ 0xD
   644  00000E                     	ds	1
   645  00000F                     ?___fladd:
   646                           	callstack 0
   647  00000F                     ___fladd@b:
   648                           	callstack 0
   649                           
   650                           ; 4 bytes @ 0xE
   651  00000F                     	ds	1
   652  000010                     ??_setMotorPWM:
   653                           
   654                           ; 1 bytes @ 0xF
   655  000010                     	ds	3
   656  000013                     ___fladd@a:
   657                           	callstack 0
   658                           
   659                           ; 4 bytes @ 0x12
   660  000013                     	ds	4
   661  000017                     ??___fladd:
   662  000017                     setMotorPWM@PWMduty:
   663                           	callstack 0
   664                           
   665                           ; 2 bytes @ 0x16
   666  000017                     	ds	2
   667  000019                     stop@mL:
   668                           	callstack 0
   669                           
   670                           ; 2 bytes @ 0x18
   671  000019                     	ds	2
   672  00001B                     ___fladd@signs:
   673                           	callstack 0
   674  00001B                     stop@mR:
   675                           	callstack 0
   676                           
   677                           ; 2 bytes @ 0x1A
   678  00001B                     	ds	1
   679  00001C                     ___fladd@aexp:
   680                           	callstack 0
   681                           
   682                           ; 1 bytes @ 0x1B
   683  00001C                     	ds	1
   684  00001D                     ___fladd@bexp:
   685                           	callstack 0
   686  00001D                     turnCW45@mL:
   687                           	callstack 0
   688  00001D                     turnACW45@mL:
   689                           	callstack 0
   690  00001D                     turn180@mL:
   691                           	callstack 0
   692  00001D                     forward@mL:
   693                           	callstack 0
   694  00001D                     backward@mL:
   695                           	callstack 0
   696  00001D                     adjustbackward@mL:
   697                           	callstack 0
   698  00001D                     adjustforward@mL:
   699                           	callstack 0
   700  00001D                     nullAction@mL:
   701                           	callstack 0
   702                           
   703                           ; 2 bytes @ 0x1C
   704  00001D                     	ds	1
   705  00001E                     ___fladd@grs:
   706                           	callstack 0
   707                           
   708                           ; 1 bytes @ 0x1D
   709  00001E                     	ds	1
   710  00001F                     ?___flsub:
   711                           	callstack 0
   712  00001F                     turnCW45@mR:
   713                           	callstack 0
   714  00001F                     turnACW45@mR:
   715                           	callstack 0
   716  00001F                     turn180@mR:
   717                           	callstack 0
   718  00001F                     forward@mR:
   719                           	callstack 0
   720  00001F                     backward@mR:
   721                           	callstack 0
   722  00001F                     adjustbackward@mR:
   723                           	callstack 0
   724  00001F                     adjustforward@mR:
   725                           	callstack 0
   726  00001F                     nullAction@mR:
   727                           	callstack 0
   728  00001F                     ___flsub@b:
   729                           	callstack 0
   730                           
   731                           ; 4 bytes @ 0x1E
   732  00001F                     	ds	2
   733  000021                     ??_adjustforward:
   734  000021                     ??_forward:
   735  000021                     ??_turnCW45:
   736  000021                     ??_turnACW45:
   737  000021                     ??_turn180:
   738  000021                     ??_backward:
   739  000021                     ??_adjustbackward:
   740  000021                     
   741                           ; 1 bytes @ 0x20
   742  000021                     	ds	2
   743  000023                     scanColor@clear:
   744                           	callstack 0
   745  000023                     redAction@mL:
   746                           	callstack 0
   747  000023                     greenAction@mL:
   748                           	callstack 0
   749  000023                     blueAction@mL:
   750                           	callstack 0
   751  000023                     yellowAction@mL:
   752                           	callstack 0
   753  000023                     pinkAction@mL:
   754                           	callstack 0
   755  000023                     orangeAction@mL:
   756                           	callstack 0
   757  000023                     lightBlueAction@mL:
   758                           	callstack 0
   759  000023                     whiteAction@mL:
   760                           	callstack 0
   761  000023                     blackAction@mL:
   762                           	callstack 0
   763  000023                     ___flsub@a:
   764                           	callstack 0
   765                           
   766                           ; 4 bytes @ 0x22
   767  000023                     	ds	2
   768  000025                     scanColor@sc:
   769                           	callstack 0
   770  000025                     redAction@mR:
   771                           	callstack 0
   772  000025                     greenAction@mR:
   773                           	callstack 0
   774  000025                     blueAction@mR:
   775                           	callstack 0
   776  000025                     yellowAction@mR:
   777                           	callstack 0
   778  000025                     pinkAction@mR:
   779                           	callstack 0
   780  000025                     orangeAction@mR:
   781                           	callstack 0
   782  000025                     lightBlueAction@mR:
   783                           	callstack 0
   784  000025                     whiteAction@mR:
   785                           	callstack 0
   786  000025                     blackAction@mR:
   787                           	callstack 0
   788                           
   789                           ; 2 bytes @ 0x24
   790  000025                     	ds	2
   791  000027                     ??_redAction:
   792  000027                     ??_greenAction:
   793  000027                     ??_blueAction:
   794  000027                     ??_yellowAction:
   795  000027                     ??_pinkAction:
   796  000027                     ??_orangeAction:
   797  000027                     ??_lightBlueAction:
   798  000027                     ??_whiteAction:
   799  000027                     ??_blackAction:
   800  000027                     ?___fldiv:
   801                           	callstack 0
   802  000027                     scanColor@mL:
   803                           	callstack 0
   804  000027                     ___fldiv@b:
   805                           	callstack 0
   806                           
   807                           ; 4 bytes @ 0x26
   808  000027                     	ds	2
   809  000029                     redAction@reverse:
   810                           	callstack 0
   811  000029                     greenAction@reverse:
   812                           	callstack 0
   813  000029                     yellowAction@reverse:
   814                           	callstack 0
   815  000029                     pinkAction@reverse:
   816                           	callstack 0
   817  000029                     orangeAction@reverse:
   818                           	callstack 0
   819  000029                     lightBlueAction@reverse:
   820                           	callstack 0
   821  000029                     whiteAction@reverse:
   822                           	callstack 0
   823  000029                     blackAction@reverse:
   824                           	callstack 0
   825  000029                     scanColor@mR:
   826                           	callstack 0
   827                           
   828                           ; 2 bytes @ 0x28
   829  000029                     	ds	1
   830  00002A                     colorCase@reverse:
   831                           	callstack 0
   832                           
   833                           ; 1 bytes @ 0x29
   834  00002A                     	ds	1
   835  00002B                     scanColor@fwdTime:
   836                           	callstack 0
   837  00002B                     colorCase@mL:
   838                           	callstack 0
   839  00002B                     ___fldiv@a:
   840                           	callstack 0
   841                           
   842                           ; 4 bytes @ 0x2A
   843  00002B                     	ds	2
   844  00002D                     ??_scanColor:
   845  00002D                     colorCase@mR:
   846                           	callstack 0
   847                           
   848                           ; 2 bytes @ 0x2C
   849  00002D                     	ds	2
   850  00002F                     ??_colorCase:
   851  00002F                     ??___fldiv:
   852                           
   853                           ; 1 bytes @ 0x2E
   854  00002F                     	ds	2
   855  000031                     colorCase@val:
   856                           	callstack 0
   857                           
   858                           ; 1 bytes @ 0x30
   859  000031                     	ds	1
   860  000032                     backToStart@lenRead:
   861                           	callstack 0
   862                           
   863                           ; 2 bytes @ 0x31
   864  000032                     	ds	1
   865  000033                     scanColor@C_max:
   866                           	callstack 0
   867  000033                     ___fldiv@rem:
   868                           	callstack 0
   869                           
   870                           ; 4 bytes @ 0x32
   871  000033                     	ds	1
   872  000034                     backToStart@actArr:
   873                           	callstack 0
   874                           
   875                           ; 2 bytes @ 0x33
   876  000034                     	ds	1
   877  000035                     scanColor@i_819:
   878                           	callstack 0
   879                           
   880                           ; 2 bytes @ 0x34
   881  000035                     	ds	1
   882  000036                     backToStart@fwdTime:
   883                           	callstack 0
   884                           
   885                           ; 2 bytes @ 0x35
   886  000036                     	ds	1
   887  000037                     ___fldiv@sign:
   888                           	callstack 0
   889                           
   890                           ; 1 bytes @ 0x36
   891  000037                     	ds	1
   892  000038                     backToStart@fwdArr:
   893                           	callstack 0
   894  000038                     ___fldiv@new_exp:
   895                           	callstack 0
   896                           
   897                           ; 2 bytes @ 0x37
   898  000038                     	ds	2
   899  00003A                     backToStart@reverse:
   900                           	callstack 0
   901  00003A                     ___fldiv@grs:
   902                           	callstack 0
   903                           
   904                           ; 4 bytes @ 0x39
   905  00003A                     	ds	1
   906  00003B                     backToStart@mL:
   907                           	callstack 0
   908                           
   909                           ; 2 bytes @ 0x3A
   910  00003B                     	ds	2
   911  00003D                     backToStart@mR:
   912                           	callstack 0
   913                           
   914                           ; 2 bytes @ 0x3C
   915  00003D                     	ds	1
   916  00003E                     ___fldiv@bexp:
   917                           	callstack 0
   918                           
   919                           ; 1 bytes @ 0x3D
   920  00003E                     	ds	1
   921  00003F                     ??_backToStart:
   922  00003F                     ___fldiv@aexp:
   923                           	callstack 0
   924                           
   925                           ; 1 bytes @ 0x3E
   926  00003F                     	ds	1
   927  000040                     ?___flmul:
   928                           	callstack 0
   929  000040                     ___flmul@b:
   930                           	callstack 0
   931                           
   932                           ; 4 bytes @ 0x3F
   933  000040                     	ds	4
   934  000044                     ___flmul@a:
   935                           	callstack 0
   936                           
   937                           ; 4 bytes @ 0x43
   938  000044                     	ds	1
   939  000045                     backToStart@val:
   940                           	callstack 0
   941                           
   942                           ; 1 bytes @ 0x44
   943  000045                     	ds	1
   944  000046                     backToStart@k:
   945                           	callstack 0
   946                           
   947                           ; 1 bytes @ 0x45
   948  000046                     	ds	2
   949  000048                     ??___flmul:
   950                           
   951                           ; 1 bytes @ 0x47
   952  000048                     	ds	4
   953  00004C                     ___flmul@sign:
   954                           	callstack 0
   955                           
   956                           ; 1 bytes @ 0x4B
   957  00004C                     	ds	1
   958  00004D                     ___flmul@grs:
   959                           	callstack 0
   960                           
   961                           ; 4 bytes @ 0x4C
   962  00004D                     	ds	4
   963  000051                     ___flmul@aexp:
   964                           	callstack 0
   965                           
   966                           ; 1 bytes @ 0x50
   967  000051                     	ds	1
   968  000052                     ___flmul@bexp:
   969                           	callstack 0
   970                           
   971                           ; 1 bytes @ 0x51
   972  000052                     	ds	1
   973  000053                     ___flmul@prod:
   974                           	callstack 0
   975                           
   976                           ; 4 bytes @ 0x52
   977  000053                     	ds	4
   978  000057                     ___flmul@temp:
   979                           	callstack 0
   980                           
   981                           ; 2 bytes @ 0x56
   982  000057                     	ds	2
   983  000059                     ?___fltol:
   984                           	callstack 0
   985  000059                     ___fltol@f1:
   986                           	callstack 0
   987                           
   988                           ; 4 bytes @ 0x58
   989  000059                     	ds	4
   990  00005D                     ___fltol@sign1:
   991                           	callstack 0
   992                           
   993                           ; 1 bytes @ 0x5C
   994  00005D                     	ds	1
   995  00005E                     ___fltol@exp1:
   996                           	callstack 0
   997                           
   998                           ; 1 bytes @ 0x5D
   999  00005E                     	ds	1
  1000  00005F                     main@reverse:
  1001                           	callstack 0
  1002                           
  1003                           ; 1 bytes @ 0x5E
  1004  00005F                     	ds	1
  1005                           
  1006 ;;
  1007 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1008 ;;
  1009 ;; *************** function _main *****************
  1010 ;; Defined at:
  1011 ;;		line 23 in file "main.c"
  1012 ;; Parameters:    Size  Location     Type
  1013 ;;		None
  1014 ;; Auto vars:     Size  Location     Type
  1015 ;;  v               1  127[BANK0 ] unsigned char 
  1016 ;;  sc            120    0[BANK2 ] struct storecolor
  1017 ;;  sh            120   58[BANK1 ] struct storecolor
  1018 ;;  str            80    0        unsigned char [80]
  1019 ;;  fwdArr         50    0[BANK1 ] unsigned int [25]
  1020 ;;  actArr         50   75[BANK0 ] unsigned int [25]
  1021 ;;  motorL          9  129[BANK2 ] struct motor
  1022 ;;  motorR          9  120[BANK2 ] struct motor
  1023 ;;  cr              8  131[BANK0 ] struct getcolor
  1024 ;;  hr              8  178[BANK1 ] struct getcolor
  1025 ;;  clear           8   50[BANK1 ] struct getcolor
  1026 ;;  hh              8    0        struct getcolor
  1027 ;;  fwdTime         2  129[BANK0 ] unsigned int 
  1028 ;;  PWMperiod       2    0        unsigned int 
  1029 ;;  mode            1  128[BANK0 ] unsigned char 
  1030 ;;  lenRead         1  126[BANK0 ] unsigned char 
  1031 ;;  lenArr          1  125[BANK0 ] unsigned char 
  1032 ;;  reverse         1   94[COMRAM] unsigned char 
  1033 ;; Return value:  Size  Location     Type
  1034 ;;                  1    wreg      void 
  1035 ;; Registers used:
  1036 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1037 ;; Tracked objects:
  1038 ;;		On entry : 0/0
  1039 ;;		On exit  : 0/0
  1040 ;;		Unchanged: 0/0
  1041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1043 ;;      Locals:         1      64     186     138       0       0       0       0       0       0       0       0       
      +0       0       0
  1044 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1045 ;;      Totals:         1      66     186     138       0       0       0       0       0       0       0       0       
      +0       0       0
  1046 ;;Total ram usage:      391 bytes
  1047 ;; Hardware stack levels required when called: 7
  1048 ;; This function calls:
  1049 ;;		_I2C_2_Master_Init
  1050 ;;		_actionArray
  1051 ;;		_backToStart
  1052 ;;		_calibrateColor
  1053 ;;		_colorCase
  1054 ;;		_color_click_init
  1055 ;;		_convertHSV
  1056 ;;		_findcolor
  1057 ;;		_fwdTimeArray
  1058 ;;		_initButton
  1059 ;;		_initDCmotorsPWM
  1060 ;;		_initUSART4
  1061 ;;		_scanColor
  1062 ;; This function is called by:
  1063 ;;		Startup code after reset
  1064 ;; This function uses a non-reentrant model
  1065 ;;
  1066                           
  1067                           	psect	text0
  1068  01D750                     __ptext0:
  1069                           	callstack 0
  1070  01D750                     _main:
  1071                           	callstack 24
  1072  01D750                     
  1073                           ;main.c: 25:     struct motor motorR;;main.c: 26:     struct motor motorL;;main.c: 27:  
      +                             struct storecolor sc;;main.c: 28:     struct getcolor cr;;main.c: 29:     struct getc
      +                          olor clear;;main.c: 31:     struct storecolor sh;;main.c: 32:     struct getcolor hr;;ma
      +                          in.c: 33:     struct getcolor hh;;main.c: 35:     unsigned int actArr[25];;main.c: 36:  
      +                             unsigned int fwdArr[25];;main.c: 38:     char str[80];;main.c: 39:     unsigned char 
      +                          lenArr = 25;
  1074  01D750  0E19               	movlw	25
  1075  01D752  0100               	movlb	0	; () banked
  1076  01D754  6FDD               	movwf	main@lenArr& (0+255),b
  1077                           
  1078                           ;main.c: 40:     unsigned char lenRead = 0;
  1079  01D756  0E00               	movlw	0
  1080  01D758  6FDE               	movwf	main@lenRead& (0+255),b
  1081                           
  1082                           ;main.c: 41:     unsigned int fwdTime=0;
  1083  01D75A  0E00               	movlw	0
  1084  01D75C  6FE2               	movwf	(main@fwdTime+1)& (0+255),b
  1085  01D75E  0E00               	movlw	0
  1086  01D760  6FE1               	movwf	main@fwdTime& (0+255),b
  1087  01D762                     
  1088                           ; BSR set to: 0
  1089                           ;main.c: 45:     initUSART4();
  1090  01D762  ECEB  F0DC         	call	_initUSART4	;wreg free
  1091  01D766                     
  1092                           ;main.c: 46:     I2C_2_Master_Init();
  1093  01D766  EC23  F0DD         	call	_I2C_2_Master_Init	;wreg free
  1094  01D76A                     
  1095                           ;main.c: 47:     color_click_init();
  1096  01D76A  EC4D  F0DD         	call	_color_click_init	;wreg free
  1097  01D76E                     
  1098                           ;main.c: 48:     initButton ();
  1099  01D76E  ECCF  F0DC         	call	_initButton	;wreg free
  1100  01D772                     
  1101                           ;main.c: 49:     initDCmotorsPWM(PWMperiod,&motorL,&motorR);
  1102  01D772  0E00               	movlw	0
  1103  01D774  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
  1104  01D776  0E63               	movlw	99
  1105  01D778  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
  1106  01D77A  0E81               	movlw	low main@motorL
  1107  01D77C  6E03               	movwf	initDCmotorsPWM@mL^0,c
  1108  01D77E  0E02               	movlw	high main@motorL
  1109  01D780  6E04               	movwf	(initDCmotorsPWM@mL+1)^0,c
  1110  01D782  0E78               	movlw	low main@motorR
  1111  01D784  6E05               	movwf	initDCmotorsPWM@mR^0,c
  1112  01D786  0E02               	movlw	high main@motorR
  1113  01D788  6E06               	movwf	(initDCmotorsPWM@mR+1)^0,c
  1114  01D78A  EC01  F0E3         	call	_initDCmotorsPWM	;wreg free
  1115  01D78E                     
  1116                           ;main.c: 53:     char mode = 1;
  1117  01D78E  0E01               	movlw	1
  1118  01D790  0100               	movlb	0	; () banked
  1119  01D792  6FE0               	movwf	main@mode& (0+255),b
  1120  01D794                     
  1121                           ; BSR set to: 0
  1122                           ;main.c: 54:     char reverse = 0;
  1123  01D794  0E00               	movlw	0
  1124  01D796  6E5F               	movwf	main@reverse^0,c
  1125                           
  1126                           ;main.c: 57:     while (mode == 1){
  1127  01D798  EFF7  F0EB         	goto	l4556
  1128  01D79C                     l4546:
  1129                           
  1130                           ;main.c: 59:             calibrateColor(&sc);
  1131  01D79C  0E00               	movlw	low main@sc
  1132  01D79E  6E0C               	movwf	calibrateColor@sc^0,c
  1133  01D7A0  0E02               	movlw	high main@sc
  1134  01D7A2  6E0D               	movwf	(calibrateColor@sc+1)^0,c
  1135  01D7A4  EC68  F0E6         	call	_calibrateColor	;wreg free
  1136  01D7A8                     
  1137                           ;main.c: 60:             convertHSV(&sc,&sh);
  1138  01D7A8  0E00               	movlw	low main@sc
  1139  01D7AA  0100               	movlb	0	; () banked
  1140  01D7AC  6F64               	movwf	convertHSV@sc& (0+255),b
  1141  01D7AE  0E02               	movlw	high main@sc
  1142  01D7B0  6F65               	movwf	(convertHSV@sc+1)& (0+255),b
  1143  01D7B2  0E3A               	movlw	low main@sh
  1144  01D7B4  6F66               	movwf	convertHSV@sh& (0+255),b
  1145  01D7B6  0E01               	movlw	high main@sh
  1146  01D7B8  6F67               	movwf	(convertHSV@sh+1)& (0+255),b
  1147  01D7BA  EC93  F0FA         	call	_convertHSV	;wreg free
  1148  01D7BE                     l4550:
  1149                           
  1150                           ;main.c: 58:         while(!PORTFbits.RF2){
  1151  01D7BE  A48E               	btfss	142,2,c	;volatile
  1152  01D7C0  EFE4  F0EB         	goto	u3941
  1153  01D7C4  EFE6  F0EB         	goto	u3940
  1154  01D7C8                     u3941:
  1155  01D7C8  EFCE  F0EB         	goto	l4546
  1156  01D7CC                     u3940:
  1157  01D7CC                     
  1158                           ;main.c: 71:         if (LATDbits.LATD7 == 1 && !PORTFbits.RF3){
  1159  01D7CC  AE7C               	btfss	124,7,c	;volatile
  1160  01D7CE  EFEB  F0EB         	goto	u3951
  1161  01D7D2  EFED  F0EB         	goto	u3950
  1162  01D7D6                     u3951:
  1163  01D7D6  EFF7  F0EB         	goto	l4556
  1164  01D7DA                     u3950:
  1165  01D7DA  B68E               	btfsc	142,3,c	;volatile
  1166  01D7DC  EFF2  F0EB         	goto	u3961
  1167  01D7E0  EFF4  F0EB         	goto	u3960
  1168  01D7E4                     u3961:
  1169  01D7E4  EFF7  F0EB         	goto	l4556
  1170  01D7E8                     u3960:
  1171  01D7E8                     
  1172                           ;main.c: 72:             mode = 2;
  1173  01D7E8  0E02               	movlw	2
  1174  01D7EA  0100               	movlb	0	; () banked
  1175  01D7EC  6FE0               	movwf	main@mode& (0+255),b
  1176  01D7EE                     l4556:
  1177                           
  1178                           ;main.c: 57:     while (mode == 1){
  1179  01D7EE  0100               	movlb	0	; () banked
  1180  01D7F0  05E0               	decf	main@mode& (0+255),w,b
  1181  01D7F2  B4D8               	btfsc	status,2,c
  1182  01D7F4  EFFE  F0EB         	goto	u3971
  1183  01D7F8  EF00  F0EC         	goto	u3970
  1184  01D7FC                     u3971:
  1185  01D7FC  EFDF  F0EB         	goto	l4550
  1186  01D800                     u3970:
  1187  01D800  EF72  F0EC         	goto	l4576
  1188  01D804                     l4558:
  1189                           
  1190                           ; BSR set to: 0
  1191                           ;main.c: 79:             scanColor (&clear,&sc,&motorL,&motorR,&fwdTime);
  1192  01D804  0E32               	movlw	low main@clear
  1193  01D806  6E23               	movwf	scanColor@clear^0,c
  1194  01D808  0E01               	movlw	high main@clear
  1195  01D80A  6E24               	movwf	(scanColor@clear+1)^0,c
  1196  01D80C  0E00               	movlw	low main@sc
  1197  01D80E  6E25               	movwf	scanColor@sc^0,c
  1198  01D810  0E02               	movlw	high main@sc
  1199  01D812  6E26               	movwf	(scanColor@sc+1)^0,c
  1200  01D814  0E81               	movlw	low main@motorL
  1201  01D816  6E27               	movwf	scanColor@mL^0,c
  1202  01D818  0E02               	movlw	high main@motorL
  1203  01D81A  6E28               	movwf	(scanColor@mL+1)^0,c
  1204  01D81C  0E78               	movlw	low main@motorR
  1205  01D81E  6E29               	movwf	scanColor@mR^0,c
  1206  01D820  0E02               	movlw	high main@motorR
  1207  01D822  6E2A               	movwf	(scanColor@mR+1)^0,c
  1208  01D824  0EE1               	movlw	low main@fwdTime
  1209  01D826  6E2B               	movwf	scanColor@fwdTime^0,c
  1210  01D828  0E00               	movlw	high main@fwdTime
  1211  01D82A  6E2C               	movwf	(scanColor@fwdTime+1)^0,c
  1212  01D82C  EC19  F0E9         	call	_scanColor	;wreg free
  1213  01D830                     
  1214                           ;main.c: 80:             fwdTimeArray(lenArr,&fwdArr,&fwdTime);
  1215  01D830  0E00               	movlw	low main@fwdArr
  1216  01D832  6E01               	movwf	fwdTimeArray@fwdArr^0,c
  1217  01D834  0E01               	movlw	high main@fwdArr
  1218  01D836  6E02               	movwf	(fwdTimeArray@fwdArr+1)^0,c
  1219  01D838  0EE1               	movlw	low main@fwdTime
  1220  01D83A  6E03               	movwf	fwdTimeArray@fwdTime^0,c
  1221  01D83C  0E00               	movlw	high main@fwdTime
  1222  01D83E  6E04               	movwf	(fwdTimeArray@fwdTime+1)^0,c
  1223  01D840  0100               	movlb	0	; () banked
  1224  01D842  51DD               	movf	main@lenArr& (0+255),w,b
  1225  01D844  EC6B  F0DE         	call	_fwdTimeArray
  1226  01D848                     
  1227                           ;main.c: 82:             unsigned char v = findcolor(&cr,&hr,&sh,&lenRead);
  1228  01D848  0EE3               	movlw	low main@cr
  1229  01D84A  0100               	movlb	0	; () banked
  1230  01D84C  6F8D               	movwf	findcolor@cr& (0+255),b
  1231  01D84E  0E00               	movlw	high main@cr
  1232  01D850  6F8E               	movwf	(findcolor@cr+1)& (0+255),b
  1233  01D852  0EB2               	movlw	low main@hr
  1234  01D854  6F8F               	movwf	findcolor@hr& (0+255),b
  1235  01D856  0E01               	movlw	high main@hr
  1236  01D858  6F90               	movwf	(findcolor@hr+1)& (0+255),b
  1237  01D85A  0E3A               	movlw	low main@sh
  1238  01D85C  6F91               	movwf	findcolor@sh& (0+255),b
  1239  01D85E  0E01               	movlw	high main@sh
  1240  01D860  6F92               	movwf	(findcolor@sh+1)& (0+255),b
  1241  01D862  0EDE               	movlw	low main@lenRead
  1242  01D864  6F93               	movwf	findcolor@lenRead& (0+255),b
  1243  01D866  0E00               	movlw	high main@lenRead
  1244  01D868  6F94               	movwf	(findcolor@lenRead+1)& (0+255),b
  1245  01D86A  ECF3  F0F2         	call	_findcolor	;wreg free
  1246  01D86E  0100               	movlb	0	; () banked
  1247  01D870  518D               	movf	?_findcolor& (0+255),w,b
  1248  01D872  6FDF               	movwf	main@v& (0+255),b
  1249  01D874                     
  1250                           ; BSR set to: 0
  1251                           ;main.c: 83:             colorCase(v,0,&motorL,&motorR);
  1252  01D874  0E00               	movlw	0
  1253  01D876  6E2A               	movwf	colorCase@reverse^0,c
  1254  01D878  0E81               	movlw	low main@motorL
  1255  01D87A  6E2B               	movwf	colorCase@mL^0,c
  1256  01D87C  0E02               	movlw	high main@motorL
  1257  01D87E  6E2C               	movwf	(colorCase@mL+1)^0,c
  1258  01D880  0E78               	movlw	low main@motorR
  1259  01D882  6E2D               	movwf	colorCase@mR^0,c
  1260  01D884  0E02               	movlw	high main@motorR
  1261  01D886  6E2E               	movwf	(colorCase@mR+1)^0,c
  1262  01D888  51DF               	movf	main@v& (0+255),w,b
  1263  01D88A  ECA3  F0E7         	call	_colorCase
  1264  01D88E                     
  1265                           ;main.c: 84:             actionArray(lenArr,&actArr,v);
  1266  01D88E  0EAB               	movlw	low main@actArr
  1267  01D890  6E01               	movwf	actionArray@actArr^0,c
  1268  01D892  0E00               	movlw	high main@actArr
  1269  01D894  6E02               	movwf	(actionArray@actArr+1)^0,c
  1270  01D896  C0DF  F003         	movff	main@v,actionArray@colorScan
  1271  01D89A  0100               	movlb	0	; () banked
  1272  01D89C  51DD               	movf	main@lenArr& (0+255),w,b
  1273  01D89E  EC67  F0DD         	call	_actionArray
  1274  01D8A2                     
  1275                           ;main.c: 86:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1276  01D8A2  0E11               	movlw	17
  1277  01D8A4  0100               	movlb	0	; () banked
  1278  01D8A6  6FAA               	movwf	(??_main+1)& (0+255),b
  1279  01D8A8  0E3C               	movlw	60
  1280  01D8AA  6FA9               	movwf	??_main& (0+255),b
  1281  01D8AC  0ECB               	movlw	203
  1282  01D8AE                     u4037:
  1283  01D8AE  2EE8               	decfsz	wreg,f,c
  1284  01D8B0  D7FE               	bra	u4037
  1285  01D8B2  2FA9               	decfsz	??_main& (0+255),f,b
  1286  01D8B4  D7FC               	bra	u4037
  1287  01D8B6  2FAA               	decfsz	(??_main+1)& (0+255),f,b
  1288  01D8B8  D7FA               	bra	u4037
  1289  01D8BA                     
  1290                           ;main.c: 94:             if (v==8||v==9){
  1291  01D8BA  0E08               	movlw	8
  1292  01D8BC  0100               	movlb	0	; () banked
  1293  01D8BE  19DF               	xorwf	main@v& (0+255),w,b
  1294  01D8C0  B4D8               	btfsc	status,2,c
  1295  01D8C2  EF65  F0EC         	goto	u3981
  1296  01D8C6  EF67  F0EC         	goto	u3980
  1297  01D8CA                     u3981:
  1298  01D8CA  EF70  F0EC         	goto	l4574
  1299  01D8CE                     u3980:
  1300  01D8CE                     
  1301                           ; BSR set to: 0
  1302  01D8CE  0E09               	movlw	9
  1303  01D8D0  19DF               	xorwf	main@v& (0+255),w,b
  1304  01D8D2  A4D8               	btfss	status,2,c
  1305  01D8D4  EF6E  F0EC         	goto	u3991
  1306  01D8D8  EF70  F0EC         	goto	u3990
  1307  01D8DC                     u3991:
  1308  01D8DC  EF72  F0EC         	goto	l4576
  1309  01D8E0                     u3990:
  1310  01D8E0                     l4574:
  1311                           
  1312                           ; BSR set to: 0
  1313                           ;main.c: 95:                 mode = 3;
  1314  01D8E0  0E03               	movlw	3
  1315  01D8E2  6FE0               	movwf	main@mode& (0+255),b
  1316  01D8E4                     l4576:
  1317                           
  1318                           ; BSR set to: 0
  1319                           ;main.c: 76:     while (mode==2){
  1320  01D8E4  0E02               	movlw	2
  1321  01D8E6  19E0               	xorwf	main@mode& (0+255),w,b
  1322  01D8E8  B4D8               	btfsc	status,2,c
  1323  01D8EA  EF79  F0EC         	goto	u4001
  1324  01D8EE  EF7B  F0EC         	goto	u4000
  1325  01D8F2                     u4001:
  1326  01D8F2  EF02  F0EC         	goto	l4558
  1327  01D8F6                     u4000:
  1328  01D8F6                     
  1329                           ; BSR set to: 0
  1330                           ;main.c: 111:     if (mode==3){
  1331  01D8F6  0E03               	movlw	3
  1332  01D8F8  19E0               	xorwf	main@mode& (0+255),w,b
  1333  01D8FA  A4D8               	btfss	status,2,c
  1334  01D8FC  EF82  F0EC         	goto	u4011
  1335  01D900  EF84  F0EC         	goto	u4010
  1336  01D904                     u4011:
  1337  01D904  EFA6  F0EC         	goto	l4584
  1338  01D908                     u4010:
  1339  01D908                     
  1340                           ; BSR set to: 0
  1341                           ;main.c: 112:         reverse = 1;
  1342  01D908  0E01               	movlw	1
  1343  01D90A  6E5F               	movwf	main@reverse^0,c
  1344  01D90C  EFA6  F0EC         	goto	l4584
  1345  01D910                     l4582:
  1346                           
  1347                           ; BSR set to: 0
  1348                           ;main.c: 117:         backToStart(&lenRead, &actArr, &fwdTime, &fwdArr, reverse, &motorL
      +                          , &motorR);
  1349  01D910  0EDE               	movlw	low main@lenRead
  1350  01D912  6E32               	movwf	backToStart@lenRead^0,c
  1351  01D914  0E00               	movlw	high main@lenRead
  1352  01D916  6E33               	movwf	(backToStart@lenRead+1)^0,c
  1353  01D918  0EAB               	movlw	low main@actArr
  1354  01D91A  6E34               	movwf	backToStart@actArr^0,c
  1355  01D91C  0E00               	movlw	high main@actArr
  1356  01D91E  6E35               	movwf	(backToStart@actArr+1)^0,c
  1357  01D920  0EE1               	movlw	low main@fwdTime
  1358  01D922  6E36               	movwf	backToStart@fwdTime^0,c
  1359  01D924  0E00               	movlw	high main@fwdTime
  1360  01D926  6E37               	movwf	(backToStart@fwdTime+1)^0,c
  1361  01D928  0E00               	movlw	low main@fwdArr
  1362  01D92A  6E38               	movwf	backToStart@fwdArr^0,c
  1363  01D92C  0E01               	movlw	high main@fwdArr
  1364  01D92E  6E39               	movwf	(backToStart@fwdArr+1)^0,c
  1365  01D930  C05F  F03A         	movff	main@reverse,backToStart@reverse
  1366  01D934  0E81               	movlw	low main@motorL
  1367  01D936  6E3B               	movwf	backToStart@mL^0,c
  1368  01D938  0E02               	movlw	high main@motorL
  1369  01D93A  6E3C               	movwf	(backToStart@mL+1)^0,c
  1370  01D93C  0E78               	movlw	low main@motorR
  1371  01D93E  6E3D               	movwf	backToStart@mR^0,c
  1372  01D940  0E02               	movlw	high main@motorR
  1373  01D942  6E3E               	movwf	(backToStart@mR+1)^0,c
  1374  01D944  EC66  F0E4         	call	_backToStart	;wreg free
  1375  01D948                     l65:
  1376  01D948  EFA4  F0EC         	goto	l65
  1377  01D94C                     l4584:
  1378                           
  1379                           ; BSR set to: 0
  1380                           ;main.c: 116:     while (mode==3) {
  1381  01D94C  0E03               	movlw	3
  1382  01D94E  19E0               	xorwf	main@mode& (0+255),w,b
  1383  01D950  B4D8               	btfsc	status,2,c
  1384  01D952  EFAD  F0EC         	goto	u4021
  1385  01D956  EFAF  F0EC         	goto	u4020
  1386  01D95A                     u4021:
  1387  01D95A  EF88  F0EC         	goto	l4582
  1388  01D95E                     u4020:
  1389  01D95E                     
  1390                           ; BSR set to: 0
  1391  01D95E  EF00  F000         	goto	start
  1392  01D962                     __end_of_main:
  1393                           	callstack 0
  1394                           
  1395 ;; *************** function _scanColor *****************
  1396 ;; Defined at:
  1397 ;;		line 322 in file "color.c"
  1398 ;; Parameters:    Size  Location     Type
  1399 ;;  clear           2   34[COMRAM] PTR struct getcolor
  1400 ;;		 -> main@clear(8), 
  1401 ;;  sc              2   36[COMRAM] PTR struct storecolor
  1402 ;;		 -> main@sc(120), 
  1403 ;;  mL              2   38[COMRAM] PTR struct motor
  1404 ;;		 -> main@motorL(9), 
  1405 ;;  mR              2   40[COMRAM] PTR struct motor
  1406 ;;		 -> main@motorR(9), 
  1407 ;;  fwdTime         2   42[COMRAM] PTR unsigned int 
  1408 ;;		 -> main@fwdTime(2), 
  1409 ;; Auto vars:     Size  Location     Type
  1410 ;;  i               2   52[COMRAM] int 
  1411 ;;  C_max           2   50[COMRAM] unsigned int 
  1412 ;; Return value:  Size  Location     Type
  1413 ;;                  1    wreg      void 
  1414 ;; Registers used:
  1415 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1416 ;; Tracked objects:
  1417 ;;		On entry : 0/0
  1418 ;;		On exit  : 0/0
  1419 ;;		Unchanged: 0/0
  1420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1421 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1422 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1423 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1424 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1425 ;;Total ram usage:       20 bytes
  1426 ;; Hardware stack levels used: 1
  1427 ;; Hardware stack levels required when called: 4
  1428 ;; This function calls:
  1429 ;;		_adjustforward
  1430 ;;		_color_read_Clear
  1431 ;;		_forward
  1432 ;;		_stop
  1433 ;;		_turnonLED
  1434 ;; This function is called by:
  1435 ;;		_main
  1436 ;; This function uses a non-reentrant model
  1437 ;;
  1438                           
  1439                           	psect	text1
  1440  01D232                     __ptext1:
  1441                           	callstack 0
  1442  01D232                     _scanColor:
  1443                           	callstack 26
  1444  01D232                     
  1445                           ;color.c: 324:     while(LATHbits.LATH3 == 0){
  1446  01D232  EFDC  F0E9         	goto	l4324
  1447  01D236                     l4290:
  1448                           
  1449                           ;color.c: 325:         turnonLED (1,1,1);
  1450  01D236  0E00               	movlw	0
  1451  01D238  6E02               	movwf	(turnonLED@RL+1)^0,c
  1452  01D23A  0E01               	movlw	1
  1453  01D23C  6E01               	movwf	turnonLED@RL^0,c
  1454  01D23E  0E00               	movlw	0
  1455  01D240  6E04               	movwf	(turnonLED@GL+1)^0,c
  1456  01D242  0E01               	movlw	1
  1457  01D244  6E03               	movwf	turnonLED@GL^0,c
  1458  01D246  0E00               	movlw	0
  1459  01D248  6E06               	movwf	(turnonLED@BL+1)^0,c
  1460  01D24A  0E01               	movlw	1
  1461  01D24C  6E05               	movwf	turnonLED@BL^0,c
  1462  01D24E  EC94  F0DE         	call	_turnonLED	;wreg free
  1463  01D252                     
  1464                           ;color.c: 327:         clear->CC = (color_read_Clear() * 2);
  1465  01D252  ECF3  F0DD         	call	_color_read_Clear	;wreg free
  1466  01D256  90D8               	bcf	status,0,c
  1467  01D258  3605               	rlcf	?_color_read_Clear^0,f,c
  1468  01D25A  3606               	rlcf	(?_color_read_Clear+1)^0,f,c
  1469  01D25C  EE20 F006          	lfsr	2,6
  1470  01D260  5023               	movf	scanColor@clear^0,w,c
  1471  01D262  26D9               	addwf	fsr2l,f,c
  1472  01D264  5024               	movf	(scanColor@clear+1)^0,w,c
  1473  01D266  22DA               	addwfc	fsr2h,f,c
  1474  01D268  C005  FFDE         	movff	?_color_read_Clear,postinc2
  1475  01D26C  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  1476  01D270                     
  1477                           ;color.c: 330:         unsigned int C_max = 0;
  1478  01D270  0E00               	movlw	0
  1479  01D272  6E34               	movwf	(scanColor@C_max+1)^0,c
  1480  01D274  0E00               	movlw	0
  1481  01D276  6E33               	movwf	scanColor@C_max^0,c
  1482  01D278                     
  1483                           ;color.c: 331:         static char i;;color.c: 333:         for(int i = 9; i < 15; i++){
  1484  01D278  0E00               	movlw	0
  1485  01D27A  6E36               	movwf	(scanColor@i_819+1)^0,c
  1486  01D27C  0E09               	movlw	9
  1487  01D27E  6E35               	movwf	scanColor@i_819^0,c
  1488  01D280                     l4302:
  1489                           
  1490                           ;color.c: 336:             if(C_max < sc->C[i])
  1491  01D280  C035  F02D         	movff	scanColor@i_819,??_scanColor
  1492  01D284  C036  F02E         	movff	scanColor@i_819+1,??_scanColor+1
  1493  01D288  90D8               	bcf	status,0,c
  1494  01D28A  362D               	rlcf	??_scanColor^0,f,c
  1495  01D28C  362E               	rlcf	(??_scanColor+1)^0,f,c
  1496  01D28E  C025  F02F         	movff	scanColor@sc,??_scanColor+2
  1497  01D292  C026  F030         	movff	scanColor@sc+1,??_scanColor+3
  1498  01D296  502D               	movf	??_scanColor^0,w,c
  1499  01D298  262F               	addwf	(??_scanColor+2)^0,f,c
  1500  01D29A  502E               	movf	(??_scanColor+1)^0,w,c
  1501  01D29C  2230               	addwfc	(??_scanColor+3)^0,f,c
  1502  01D29E  0E5A               	movlw	90
  1503  01D2A0  242F               	addwf	(??_scanColor+2)^0,w,c
  1504  01D2A2  6ED9               	movwf	fsr2l,c
  1505  01D2A4  0E00               	movlw	0
  1506  01D2A6  2030               	addwfc	(??_scanColor+3)^0,w,c
  1507  01D2A8  6EDA               	movwf	fsr2h,c
  1508  01D2AA  50DE               	movf	postinc2,w,c
  1509  01D2AC  5C33               	subwf	scanColor@C_max^0,w,c
  1510  01D2AE  50DE               	movf	postinc2,w,c
  1511  01D2B0  5834               	subwfb	(scanColor@C_max+1)^0,w,c
  1512  01D2B2  B0D8               	btfsc	status,0,c
  1513  01D2B4  EF5E  F0E9         	goto	u3631
  1514  01D2B8  EF60  F0E9         	goto	u3630
  1515  01D2BC                     u3631:
  1516  01D2BC  EF79  F0E9         	goto	l4306
  1517  01D2C0                     u3630:
  1518  01D2C0                     
  1519                           ;color.c: 337:                 C_max = sc->C[i];
  1520  01D2C0  C035  F02D         	movff	scanColor@i_819,??_scanColor
  1521  01D2C4  C036  F02E         	movff	scanColor@i_819+1,??_scanColor+1
  1522  01D2C8  90D8               	bcf	status,0,c
  1523  01D2CA  362D               	rlcf	??_scanColor^0,f,c
  1524  01D2CC  362E               	rlcf	(??_scanColor+1)^0,f,c
  1525  01D2CE  C025  F02F         	movff	scanColor@sc,??_scanColor+2
  1526  01D2D2  C026  F030         	movff	scanColor@sc+1,??_scanColor+3
  1527  01D2D6  502D               	movf	??_scanColor^0,w,c
  1528  01D2D8  262F               	addwf	(??_scanColor+2)^0,f,c
  1529  01D2DA  502E               	movf	(??_scanColor+1)^0,w,c
  1530  01D2DC  2230               	addwfc	(??_scanColor+3)^0,f,c
  1531  01D2DE  0E5A               	movlw	90
  1532  01D2E0  242F               	addwf	(??_scanColor+2)^0,w,c
  1533  01D2E2  6ED9               	movwf	fsr2l,c
  1534  01D2E4  0E00               	movlw	0
  1535  01D2E6  2030               	addwfc	(??_scanColor+3)^0,w,c
  1536  01D2E8  6EDA               	movwf	fsr2h,c
  1537  01D2EA  CFDE F033          	movff	postinc2,scanColor@C_max
  1538  01D2EE  CFDD F034          	movff	postdec2,scanColor@C_max+1
  1539  01D2F2                     l4306:
  1540                           
  1541                           ;color.c: 338:         }
  1542  01D2F2  4A35               	infsnz	scanColor@i_819^0,f,c
  1543  01D2F4  2A36               	incf	(scanColor@i_819+1)^0,f,c
  1544  01D2F6  BE36               	btfsc	(scanColor@i_819+1)^0,7,c
  1545  01D2F8  EF87  F0E9         	goto	u3641
  1546  01D2FC  5036               	movf	(scanColor@i_819+1)^0,w,c
  1547  01D2FE  E109               	bnz	u3640
  1548  01D300  0E0F               	movlw	15
  1549  01D302  5C35               	subwf	scanColor@i_819^0,w,c
  1550  01D304  A0D8               	btfss	status,0,c
  1551  01D306  EF87  F0E9         	goto	u3641
  1552  01D30A  EF89  F0E9         	goto	u3640
  1553  01D30E                     u3641:
  1554  01D30E  EF40  F0E9         	goto	l4302
  1555  01D312                     u3640:
  1556  01D312                     
  1557                           ;color.c: 341:         if(clear->CC >= C_max){
  1558  01D312  EE20 F006          	lfsr	2,6
  1559  01D316  5023               	movf	scanColor@clear^0,w,c
  1560  01D318  26D9               	addwf	fsr2l,f,c
  1561  01D31A  5024               	movf	(scanColor@clear+1)^0,w,c
  1562  01D31C  22DA               	addwfc	fsr2h,f,c
  1563  01D31E  5033               	movf	scanColor@C_max^0,w,c
  1564  01D320  5CDE               	subwf	postinc2,w,c
  1565  01D322  5034               	movf	(scanColor@C_max+1)^0,w,c
  1566  01D324  58DE               	subwfb	postinc2,w,c
  1567  01D326  A0D8               	btfss	status,0,c
  1568  01D328  EF98  F0E9         	goto	u3651
  1569  01D32C  EF9A  F0E9         	goto	u3650
  1570  01D330                     u3651:
  1571  01D330  EFBD  F0E9         	goto	l237
  1572  01D334                     u3650:
  1573  01D334                     
  1574                           ;color.c: 342:             stop(mL,mR);
  1575  01D334  C027  F019         	movff	scanColor@mL,stop@mL
  1576  01D338  C028  F01A         	movff	scanColor@mL+1,stop@mL+1
  1577  01D33C  C029  F01B         	movff	scanColor@mR,stop@mR
  1578  01D340  C02A  F01C         	movff	scanColor@mR+1,stop@mR+1
  1579  01D344  EC8C  F0E2         	call	_stop	;wreg free
  1580  01D348                     
  1581                           ;color.c: 343:             _delay((unsigned long)((500)*(64000000/4000.0)));
  1582  01D348  0E29               	movlw	41
  1583  01D34A  6E2E               	movwf	(??_scanColor+1)^0,c
  1584  01D34C  0E96               	movlw	150
  1585  01D34E  6E2D               	movwf	??_scanColor^0,c
  1586  01D350  0E7F               	movlw	127
  1587  01D352                     u4047:
  1588  01D352  2EE8               	decfsz	wreg,f,c
  1589  01D354  D7FE               	bra	u4047
  1590  01D356  2E2D               	decfsz	??_scanColor^0,f,c
  1591  01D358  D7FC               	bra	u4047
  1592  01D35A  2E2E               	decfsz	(??_scanColor+1)^0,f,c
  1593  01D35C  D7FA               	bra	u4047
  1594  01D35E  F000               	nop	
  1595  01D360                     
  1596                           ;color.c: 344:             LATHbits.LATH3 = 1;
  1597  01D360  8680               	bsf	128,3,c	;volatile
  1598  01D362                     
  1599                           ;color.c: 345:             adjustforward(mL,mR);
  1600  01D362  C027  F01D         	movff	scanColor@mL,adjustforward@mL
  1601  01D366  C028  F01E         	movff	scanColor@mL+1,adjustforward@mL+1
  1602  01D36A  C029  F01F         	movff	scanColor@mR,adjustforward@mR
  1603  01D36E  C02A  F020         	movff	scanColor@mR+1,adjustforward@mR+1
  1604  01D372  EC1D  F0E2         	call	_adjustforward	;wreg free
  1605                           
  1606                           ;color.c: 346:         }
  1607  01D376  EFDC  F0E9         	goto	l4324
  1608  01D37A                     l237:
  1609                           
  1610                           ;color.c: 350:             LATHbits.LATH3 = 0;
  1611  01D37A  9680               	bcf	128,3,c	;volatile
  1612  01D37C                     
  1613                           ;color.c: 351:             forward(mL,mR);
  1614  01D37C  C027  F01D         	movff	scanColor@mL,forward@mL
  1615  01D380  C028  F01E         	movff	scanColor@mL+1,forward@mL+1
  1616  01D384  C029  F01F         	movff	scanColor@mR,forward@mR
  1617  01D388  C02A  F020         	movff	scanColor@mR+1,forward@mR+1
  1618  01D38C  EC05  F0E0         	call	_forward	;wreg free
  1619  01D390                     
  1620                           ;color.c: 352:             *fwdTime = *fwdTime +1 ;
  1621  01D390  C02B  FFD9         	movff	scanColor@fwdTime,fsr2l
  1622  01D394  C02C  FFDA         	movff	scanColor@fwdTime+1,fsr2h
  1623  01D398  CFDE F02D          	movff	postinc2,??_scanColor
  1624  01D39C  CFDD F02E          	movff	postdec2,??_scanColor+1
  1625  01D3A0  0E01               	movlw	1
  1626  01D3A2  262D               	addwf	??_scanColor^0,f,c
  1627  01D3A4  0E00               	movlw	0
  1628  01D3A6  222E               	addwfc	(??_scanColor+1)^0,f,c
  1629  01D3A8  C02B  FFD9         	movff	scanColor@fwdTime,fsr2l
  1630  01D3AC  C02C  FFDA         	movff	scanColor@fwdTime+1,fsr2h
  1631  01D3B0  C02D  FFDE         	movff	??_scanColor,postinc2
  1632  01D3B4  C02E  FFDD         	movff	??_scanColor+1,postdec2
  1633  01D3B8                     l4324:
  1634                           
  1635                           ;color.c: 324:     while(LATHbits.LATH3 == 0){
  1636  01D3B8  A680               	btfss	128,3,c	;volatile
  1637  01D3BA  EFE1  F0E9         	goto	u3661
  1638  01D3BE  EFE3  F0E9         	goto	u3660
  1639  01D3C2                     u3661:
  1640  01D3C2  EF1B  F0E9         	goto	l4290
  1641  01D3C6                     u3660:
  1642  01D3C6  0012               	return		;funcret
  1643  01D3C8                     __end_of_scanColor:
  1644                           	callstack 0
  1645                           
  1646 ;; *************** function _adjustforward *****************
  1647 ;; Defined at:
  1648 ;;		line 198 in file "motor.c"
  1649 ;; Parameters:    Size  Location     Type
  1650 ;;  mL              2   28[COMRAM] PTR struct motor
  1651 ;;		 -> main@motorL(9), 
  1652 ;;  mR              2   30[COMRAM] PTR struct motor
  1653 ;;		 -> main@motorR(9), 
  1654 ;; Auto vars:     Size  Location     Type
  1655 ;;		None
  1656 ;; Return value:  Size  Location     Type
  1657 ;;                  1    wreg      void 
  1658 ;; Registers used:
  1659 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1660 ;; Tracked objects:
  1661 ;;		On entry : 0/0
  1662 ;;		On exit  : 0/0
  1663 ;;		Unchanged: 0/0
  1664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1665 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1667 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1668 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1669 ;;Total ram usage:        6 bytes
  1670 ;; Hardware stack levels used: 1
  1671 ;; Hardware stack levels required when called: 3
  1672 ;; This function calls:
  1673 ;;		_setMotorPWM
  1674 ;;		_stop
  1675 ;; This function is called by:
  1676 ;;		_scanColor
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679                           
  1680                           	psect	text2
  1681  01C43A                     __ptext2:
  1682                           	callstack 0
  1683  01C43A                     _adjustforward:
  1684                           	callstack 26
  1685  01C43A                     
  1686                           ;motor.c: 199:     mL->power = 80;
  1687  01C43A  C01D  FFD9         	movff	adjustforward@mL,fsr2l
  1688  01C43E  C01E  FFDA         	movff	adjustforward@mL+1,fsr2h
  1689  01C442  0E50               	movlw	80
  1690  01C444  6EDF               	movwf	indf2,c
  1691                           
  1692                           ;motor.c: 200:     mR->power = 80;
  1693  01C446  C01F  FFD9         	movff	adjustforward@mR,fsr2l
  1694  01C44A  C020  FFDA         	movff	adjustforward@mR+1,fsr2h
  1695  01C44E  0E50               	movlw	80
  1696  01C450  6EDF               	movwf	indf2,c
  1697  01C452                     
  1698                           ;motor.c: 201:     mL->direction = 1;
  1699  01C452  EE20 F001          	lfsr	2,1
  1700  01C456  501D               	movf	adjustforward@mL^0,w,c
  1701  01C458  26D9               	addwf	fsr2l,f,c
  1702  01C45A  501E               	movf	(adjustforward@mL+1)^0,w,c
  1703  01C45C  22DA               	addwfc	fsr2h,f,c
  1704  01C45E  0E01               	movlw	1
  1705  01C460  6EDF               	movwf	indf2,c
  1706  01C462                     
  1707                           ;motor.c: 202:     mR->direction = 1;
  1708  01C462  EE20 F001          	lfsr	2,1
  1709  01C466  501F               	movf	adjustforward@mR^0,w,c
  1710  01C468  26D9               	addwf	fsr2l,f,c
  1711  01C46A  5020               	movf	(adjustforward@mR+1)^0,w,c
  1712  01C46C  22DA               	addwfc	fsr2h,f,c
  1713  01C46E  0E01               	movlw	1
  1714  01C470  6EDF               	movwf	indf2,c
  1715                           
  1716                           ;motor.c: 205:    while (mL->power<100 && mR->power<100){
  1717  01C472  EF69  F0E2         	goto	l4088
  1718  01C476                     l4080:
  1719                           
  1720                           ;motor.c: 206:         mL->power = mL-> power +10 ;
  1721  01C476  C01D  FFD9         	movff	adjustforward@mL,fsr2l
  1722  01C47A  C01E  FFDA         	movff	adjustforward@mL+1,fsr2h
  1723  01C47E  50DF               	movf	indf2,w,c
  1724  01C480  0F0A               	addlw	10
  1725  01C482  C01D  FFD9         	movff	adjustforward@mL,fsr2l
  1726  01C486  C01E  FFDA         	movff	adjustforward@mL+1,fsr2h
  1727  01C48A  6EDF               	movwf	indf2,c
  1728                           
  1729                           ;motor.c: 207:         mR->power = mR-> power +10;
  1730  01C48C  C01F  FFD9         	movff	adjustforward@mR,fsr2l
  1731  01C490  C020  FFDA         	movff	adjustforward@mR+1,fsr2h
  1732  01C494  50DF               	movf	indf2,w,c
  1733  01C496  0F0A               	addlw	10
  1734  01C498  C01F  FFD9         	movff	adjustforward@mR,fsr2l
  1735  01C49C  C020  FFDA         	movff	adjustforward@mR+1,fsr2h
  1736  01C4A0  6EDF               	movwf	indf2,c
  1737  01C4A2                     
  1738                           ;motor.c: 208:         setMotorPWM(mL);
  1739  01C4A2  C01D  F00E         	movff	adjustforward@mL,setMotorPWM@m
  1740  01C4A6  C01E  F00F         	movff	adjustforward@mL+1,setMotorPWM@m+1
  1741  01C4AA  ECBE  F0EA         	call	_setMotorPWM	;wreg free
  1742  01C4AE                     
  1743                           ;motor.c: 209:         setMotorPWM(mR);
  1744  01C4AE  C01F  F00E         	movff	adjustforward@mR,setMotorPWM@m
  1745  01C4B2  C020  F00F         	movff	adjustforward@mR+1,setMotorPWM@m+1
  1746  01C4B6  ECBE  F0EA         	call	_setMotorPWM	;wreg free
  1747  01C4BA                     
  1748                           ;motor.c: 210:         _delay((unsigned long)((100)*(64000000/4000.0)));
  1749  01C4BA  0E09               	movlw	9
  1750  01C4BC  6E22               	movwf	(??_adjustforward+1)^0,c
  1751  01C4BE  0E1E               	movlw	30
  1752  01C4C0  6E21               	movwf	??_adjustforward^0,c
  1753  01C4C2  0EE4               	movlw	228
  1754  01C4C4                     u4057:
  1755  01C4C4  2EE8               	decfsz	wreg,f,c
  1756  01C4C6  D7FE               	bra	u4057
  1757  01C4C8  2E21               	decfsz	??_adjustforward^0,f,c
  1758  01C4CA  D7FC               	bra	u4057
  1759  01C4CC  2E22               	decfsz	(??_adjustforward+1)^0,f,c
  1760  01C4CE  D7FA               	bra	u4057
  1761  01C4D0  D000               	nop2	
  1762  01C4D2                     l4088:
  1763                           
  1764                           ;motor.c: 205:    while (mL->power<100 && mR->power<100){
  1765  01C4D2  C01D  FFD9         	movff	adjustforward@mL,fsr2l
  1766  01C4D6  C01E  FFDA         	movff	adjustforward@mL+1,fsr2h
  1767  01C4DA  0E64               	movlw	100
  1768  01C4DC  60DF               	cpfslt	indf2,c
  1769  01C4DE  EF73  F0E2         	goto	u3461
  1770  01C4E2  EF75  F0E2         	goto	u3460
  1771  01C4E6                     u3461:
  1772  01C4E6  EF81  F0E2         	goto	l4092
  1773  01C4EA                     u3460:
  1774  01C4EA  C01F  FFD9         	movff	adjustforward@mR,fsr2l
  1775  01C4EE  C020  FFDA         	movff	adjustforward@mR+1,fsr2h
  1776  01C4F2  0E63               	movlw	99
  1777  01C4F4  64DF               	cpfsgt	indf2,c
  1778  01C4F6  EF7F  F0E2         	goto	u3471
  1779  01C4FA  EF81  F0E2         	goto	u3470
  1780  01C4FE                     u3471:
  1781  01C4FE  EF3B  F0E2         	goto	l4080
  1782  01C502                     u3470:
  1783  01C502                     l4092:
  1784                           
  1785                           ;motor.c: 212:     stop(mL,mR);
  1786  01C502  C01D  F019         	movff	adjustforward@mL,stop@mL
  1787  01C506  C01E  F01A         	movff	adjustforward@mL+1,stop@mL+1
  1788  01C50A  C01F  F01B         	movff	adjustforward@mR,stop@mR
  1789  01C50E  C020  F01C         	movff	adjustforward@mR+1,stop@mR+1
  1790  01C512  EC8C  F0E2         	call	_stop	;wreg free
  1791  01C516  0012               	return		;funcret
  1792  01C518                     __end_of_adjustforward:
  1793                           	callstack 0
  1794                           
  1795 ;; *************** function _initUSART4 *****************
  1796 ;; Defined at:
  1797 ;;		line 8 in file "serial.c"
  1798 ;; Parameters:    Size  Location     Type
  1799 ;;		None
  1800 ;; Auto vars:     Size  Location     Type
  1801 ;;		None
  1802 ;; Return value:  Size  Location     Type
  1803 ;;                  1    wreg      void 
  1804 ;; Registers used:
  1805 ;;		wreg, status,2
  1806 ;; Tracked objects:
  1807 ;;		On entry : 0/0
  1808 ;;		On exit  : 0/0
  1809 ;;		Unchanged: 0/0
  1810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1815 ;;Total ram usage:        0 bytes
  1816 ;; Hardware stack levels used: 1
  1817 ;; This function calls:
  1818 ;;		Nothing
  1819 ;; This function is called by:
  1820 ;;		_main
  1821 ;; This function uses a non-reentrant model
  1822 ;;
  1823                           
  1824                           	psect	text3
  1825  01B9D6                     __ptext3:
  1826                           	callstack 0
  1827  01B9D6                     _initUSART4:
  1828                           	callstack 30
  1829  01B9D6                     
  1830                           ;serial.c: 9:     TRISCbits.TRISC1=1;
  1831  01B9D6  8283               	bsf	131,1,c	;volatile
  1832                           
  1833                           ;serial.c: 10:     TRISCbits.TRISC0=1;
  1834  01B9D8  8083               	bsf	131,0,c	;volatile
  1835  01B9DA                     
  1836                           ;serial.c: 11:     RC0PPS = 0x12;
  1837  01B9DA  0E12               	movlw	18
  1838  01B9DC  010E               	movlb	14	; () banked
  1839  01B9DE  6F62               	movwf	98,b	;volatile
  1840                           
  1841                           ;serial.c: 12:     RX4PPS = 0x11;
  1842  01B9E0  0E11               	movlw	17
  1843  01B9E2  6F15               	movwf	21,b	;volatile
  1844  01B9E4                     
  1845                           ; BSR set to: 14
  1846                           ;serial.c: 14:     BAUD4CONbits.BRG16 = 0;
  1847  01B9E4  97E9               	bcf	233,3,b	;volatile
  1848  01B9E6                     
  1849                           ; BSR set to: 14
  1850                           ;serial.c: 15:     TX4STAbits.BRGH = 0;
  1851  01B9E6  95E8               	bcf	232,2,b	;volatile
  1852                           
  1853                           ;serial.c: 19:     SP4BRGL = 51;
  1854  01B9E8  0E33               	movlw	51
  1855  01B9EA  6FE5               	movwf	229,b	;volatile
  1856                           
  1857                           ;serial.c: 20:     SP4BRGH = 0;
  1858  01B9EC  0E00               	movlw	0
  1859  01B9EE  6FE6               	movwf	230,b	;volatile
  1860  01B9F0                     
  1861                           ; BSR set to: 14
  1862                           ;serial.c: 22:     RC4STAbits.CREN = 1;
  1863  01B9F0  89E7               	bsf	231,4,b	;volatile
  1864  01B9F2                     
  1865                           ; BSR set to: 14
  1866                           ;serial.c: 23:     TX4STAbits.TXEN = 1;
  1867  01B9F2  8BE8               	bsf	232,5,b	;volatile
  1868  01B9F4                     
  1869                           ; BSR set to: 14
  1870                           ;serial.c: 24:     RC4STAbits.SPEN = 1;
  1871  01B9F4  8FE7               	bsf	231,7,b	;volatile
  1872  01B9F6                     
  1873                           ; BSR set to: 14
  1874  01B9F6  0012               	return		;funcret
  1875  01B9F8                     __end_of_initUSART4:
  1876                           	callstack 0
  1877                           
  1878 ;; *************** function _initDCmotorsPWM *****************
  1879 ;; Defined at:
  1880 ;;		line 7 in file "motor.c"
  1881 ;; Parameters:    Size  Location     Type
  1882 ;;  PWMperiod       2    0[COMRAM] int 
  1883 ;;  mL              2    2[COMRAM] PTR struct motor
  1884 ;;		 -> main@motorL(9), 
  1885 ;;  mR              2    4[COMRAM] PTR struct motor
  1886 ;;		 -> main@motorR(9), 
  1887 ;; Auto vars:     Size  Location     Type
  1888 ;;		None
  1889 ;; Return value:  Size  Location     Type
  1890 ;;                  1    wreg      void 
  1891 ;; Registers used:
  1892 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1893 ;; Tracked objects:
  1894 ;;		On entry : 0/0
  1895 ;;		On exit  : 0/0
  1896 ;;		Unchanged: 0/0
  1897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1898 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1900 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1901 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1902 ;;Total ram usage:        8 bytes
  1903 ;; Hardware stack levels used: 1
  1904 ;; This function calls:
  1905 ;;		Nothing
  1906 ;; This function is called by:
  1907 ;;		_main
  1908 ;; This function uses a non-reentrant model
  1909 ;;
  1910                           
  1911                           	psect	text4
  1912  01C602                     __ptext4:
  1913                           	callstack 0
  1914  01C602                     _initDCmotorsPWM:
  1915                           	callstack 30
  1916  01C602                     
  1917                           ;motor.c: 9:     TRISEbits.TRISE2 = 0;
  1918  01C602  9485               	bcf	133,2,c	;volatile
  1919                           
  1920                           ;motor.c: 10:     TRISEbits.TRISE4 = 0;
  1921  01C604  9885               	bcf	133,4,c	;volatile
  1922                           
  1923                           ;motor.c: 11:     TRISCbits.TRISC7 = 0;
  1924  01C606  9E83               	bcf	131,7,c	;volatile
  1925                           
  1926                           ;motor.c: 12:     TRISGbits.TRISG6 = 0;
  1927  01C608  9C87               	bcf	135,6,c	;volatile
  1928                           
  1929                           ;motor.c: 13:     LATEbits.LATE2 = 0;
  1930  01C60A  947D               	bcf	125,2,c	;volatile
  1931                           
  1932                           ;motor.c: 14:     LATEbits.LATE4 = 0;
  1933  01C60C  987D               	bcf	125,4,c	;volatile
  1934                           
  1935                           ;motor.c: 15:     LATCbits.LATC7 = 0;
  1936  01C60E  9E7B               	bcf	123,7,c	;volatile
  1937                           
  1938                           ;motor.c: 16:     LATGbits.LATG6 = 0;
  1939  01C610  9C7F               	bcf	127,6,c	;volatile
  1940                           
  1941                           ;motor.c: 19:     TRISFbits.TRISF2=1;
  1942  01C612  8486               	bsf	134,2,c	;volatile
  1943                           
  1944                           ;motor.c: 20:     ANSELFbits.ANSELF2=0;
  1945  01C614  010E               	movlb	14	; () banked
  1946  01C616  95B4               	bcf	180,2,b	;volatile
  1947  01C618                     
  1948                           ; BSR set to: 14
  1949                           ;motor.c: 23:     T2CONbits.CKPS=0b100;
  1950  01C618  50BD               	movf	189,w,c	;volatile
  1951  01C61A  0B8F               	andlw	-113
  1952  01C61C  0940               	iorlw	64
  1953  01C61E  6EBD               	movwf	189,c	;volatile
  1954                           
  1955                           ;motor.c: 24:     T2HLTbits.MODE=0b00000;
  1956  01C620  0EE0               	movlw	-32
  1957  01C622  16BE               	andwf	190,f,c	;volatile
  1958                           
  1959                           ;motor.c: 25:     T2CLKCONbits.CS=0b0001;
  1960  01C624  50BF               	movf	191,w,c	;volatile
  1961  01C626  0BF0               	andlw	-16
  1962  01C628  0901               	iorlw	1
  1963  01C62A  6EBF               	movwf	191,c	;volatile
  1964  01C62C                     
  1965                           ; BSR set to: 14
  1966                           ;motor.c: 28:     T2PR=PWMperiod;
  1967  01C62C  C001  FFBC         	movff	initDCmotorsPWM@PWMperiod,4028	;volatile
  1968  01C630                     
  1969                           ; BSR set to: 14
  1970                           ;motor.c: 30:     T2CONbits.ON=1;
  1971  01C630  8EBD               	bsf	189,7,c	;volatile
  1972                           
  1973                           ;motor.c: 32:     RE2PPS=0x0A;
  1974  01C632  0E0A               	movlw	10
  1975  01C634  6F74               	movwf	116,b	;volatile
  1976                           
  1977                           ;motor.c: 33:     RC7PPS=0x0B;
  1978  01C636  0E0B               	movlw	11
  1979  01C638  6F69               	movwf	105,b	;volatile
  1980                           
  1981                           ;motor.c: 35:     PWM6DCH=0;
  1982  01C63A  0E00               	movlw	0
  1983  01C63C  6EA3               	movwf	163,c	;volatile
  1984                           
  1985                           ;motor.c: 36:     PWM7DCH=0;
  1986  01C63E  0E00               	movlw	0
  1987  01C640  6EA0               	movwf	160,c	;volatile
  1988  01C642                     
  1989                           ; BSR set to: 14
  1990                           ;motor.c: 38:     PWM6CONbits.EN = 1;
  1991  01C642  8EA4               	bsf	164,7,c	;volatile
  1992  01C644                     
  1993                           ; BSR set to: 14
  1994                           ;motor.c: 39:     PWM7CONbits.EN = 1;
  1995  01C644  8EA1               	bsf	161,7,c	;volatile
  1996  01C646                     
  1997                           ; BSR set to: 14
  1998                           ;motor.c: 41:     mL->dir_LAT = (unsigned char*)(&LATE);
  1999  01C646  EE20 F004          	lfsr	2,4
  2000  01C64A  5003               	movf	initDCmotorsPWM@mL^0,w,c
  2001  01C64C  26D9               	addwf	fsr2l,f,c
  2002  01C64E  5004               	movf	(initDCmotorsPWM@mL+1)^0,w,c
  2003  01C650  22DA               	addwfc	fsr2h,f,c
  2004  01C652  0E7D               	movlw	125
  2005  01C654  6EDE               	movwf	postinc2,c
  2006  01C656  0E0F               	movlw	15
  2007  01C658  6EDD               	movwf	postdec2,c
  2008  01C65A                     
  2009                           ; BSR set to: 14
  2010                           ;motor.c: 42:     mL->dir_pin = 4;
  2011  01C65A  EE20 F006          	lfsr	2,6
  2012  01C65E  5003               	movf	initDCmotorsPWM@mL^0,w,c
  2013  01C660  26D9               	addwf	fsr2l,f,c
  2014  01C662  5004               	movf	(initDCmotorsPWM@mL+1)^0,w,c
  2015  01C664  22DA               	addwfc	fsr2h,f,c
  2016  01C666  0E04               	movlw	4
  2017  01C668  6EDF               	movwf	indf2,c
  2018  01C66A                     
  2019                           ; BSR set to: 14
  2020                           ;motor.c: 43:     mR->dir_LAT = (unsigned char*)(&LATG);
  2021  01C66A  EE20 F004          	lfsr	2,4
  2022  01C66E  5005               	movf	initDCmotorsPWM@mR^0,w,c
  2023  01C670  26D9               	addwf	fsr2l,f,c
  2024  01C672  5006               	movf	(initDCmotorsPWM@mR+1)^0,w,c
  2025  01C674  22DA               	addwfc	fsr2h,f,c
  2026  01C676  0E7F               	movlw	127
  2027  01C678  6EDE               	movwf	postinc2,c
  2028  01C67A  0E0F               	movlw	15
  2029  01C67C  6EDD               	movwf	postdec2,c
  2030  01C67E                     
  2031                           ; BSR set to: 14
  2032                           ;motor.c: 44:     mR->dir_pin = 6;
  2033  01C67E  EE20 F006          	lfsr	2,6
  2034  01C682  5005               	movf	initDCmotorsPWM@mR^0,w,c
  2035  01C684  26D9               	addwf	fsr2l,f,c
  2036  01C686  5006               	movf	(initDCmotorsPWM@mR+1)^0,w,c
  2037  01C688  22DA               	addwfc	fsr2h,f,c
  2038  01C68A  0E06               	movlw	6
  2039  01C68C  6EDF               	movwf	indf2,c
  2040  01C68E                     
  2041                           ; BSR set to: 14
  2042                           ;motor.c: 45:     mL->dutyHighByte = (unsigned char*)(&PWM6DCH);
  2043  01C68E  EE20 F002          	lfsr	2,2
  2044  01C692  5003               	movf	initDCmotorsPWM@mL^0,w,c
  2045  01C694  26D9               	addwf	fsr2l,f,c
  2046  01C696  5004               	movf	(initDCmotorsPWM@mL+1)^0,w,c
  2047  01C698  22DA               	addwfc	fsr2h,f,c
  2048  01C69A  0EA3               	movlw	163
  2049  01C69C  6EDE               	movwf	postinc2,c
  2050  01C69E  0E0F               	movlw	15
  2051  01C6A0  6EDD               	movwf	postdec2,c
  2052  01C6A2                     
  2053                           ; BSR set to: 14
  2054                           ;motor.c: 46:     mR->dutyHighByte = (unsigned char*)(&PWM7DCH);
  2055  01C6A2  EE20 F002          	lfsr	2,2
  2056  01C6A6  5005               	movf	initDCmotorsPWM@mR^0,w,c
  2057  01C6A8  26D9               	addwf	fsr2l,f,c
  2058  01C6AA  5006               	movf	(initDCmotorsPWM@mR+1)^0,w,c
  2059  01C6AC  22DA               	addwfc	fsr2h,f,c
  2060  01C6AE  0EA0               	movlw	160
  2061  01C6B0  6EDE               	movwf	postinc2,c
  2062  01C6B2  0E0F               	movlw	15
  2063  01C6B4  6EDD               	movwf	postdec2,c
  2064  01C6B6                     
  2065                           ; BSR set to: 14
  2066                           ;motor.c: 47:     mL->PWMperiod=T2PR;
  2067  01C6B6  50BC               	movf	188,w,c	;volatile
  2068  01C6B8  6E07               	movwf	??_initDCmotorsPWM^0,c
  2069  01C6BA  6A08               	clrf	(??_initDCmotorsPWM+1)^0,c
  2070  01C6BC  EE20 F007          	lfsr	2,7
  2071  01C6C0  5003               	movf	initDCmotorsPWM@mL^0,w,c
  2072  01C6C2  26D9               	addwf	fsr2l,f,c
  2073  01C6C4  5004               	movf	(initDCmotorsPWM@mL+1)^0,w,c
  2074  01C6C6  22DA               	addwfc	fsr2h,f,c
  2075  01C6C8  C007  FFDE         	movff	??_initDCmotorsPWM,postinc2
  2076  01C6CC  C008  FFDD         	movff	??_initDCmotorsPWM+1,postdec2
  2077  01C6D0                     
  2078                           ; BSR set to: 14
  2079                           ;motor.c: 48:     mR->PWMperiod=T2PR;
  2080  01C6D0  50BC               	movf	188,w,c	;volatile
  2081  01C6D2  6E07               	movwf	??_initDCmotorsPWM^0,c
  2082  01C6D4  6A08               	clrf	(??_initDCmotorsPWM+1)^0,c
  2083  01C6D6  EE20 F007          	lfsr	2,7
  2084  01C6DA  5005               	movf	initDCmotorsPWM@mR^0,w,c
  2085  01C6DC  26D9               	addwf	fsr2l,f,c
  2086  01C6DE  5006               	movf	(initDCmotorsPWM@mR+1)^0,w,c
  2087  01C6E0  22DA               	addwfc	fsr2h,f,c
  2088  01C6E2  C007  FFDE         	movff	??_initDCmotorsPWM,postinc2
  2089  01C6E6  C008  FFDD         	movff	??_initDCmotorsPWM+1,postdec2
  2090  01C6EA                     
  2091                           ; BSR set to: 14
  2092  01C6EA  0012               	return		;funcret
  2093  01C6EC                     __end_of_initDCmotorsPWM:
  2094                           	callstack 0
  2095                           
  2096 ;; *************** function _initButton *****************
  2097 ;; Defined at:
  2098 ;;		line 15 in file "color.c"
  2099 ;; Parameters:    Size  Location     Type
  2100 ;;		None
  2101 ;; Auto vars:     Size  Location     Type
  2102 ;;		None
  2103 ;; Return value:  Size  Location     Type
  2104 ;;                  1    wreg      void 
  2105 ;; Registers used:
  2106 ;;		None
  2107 ;; Tracked objects:
  2108 ;;		On entry : 0/0
  2109 ;;		On exit  : 0/0
  2110 ;;		Unchanged: 0/0
  2111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2116 ;;Total ram usage:        0 bytes
  2117 ;; Hardware stack levels used: 1
  2118 ;; This function calls:
  2119 ;;		Nothing
  2120 ;; This function is called by:
  2121 ;;		_main
  2122 ;; This function uses a non-reentrant model
  2123 ;;
  2124                           
  2125                           	psect	text5
  2126  01B99E                     __ptext5:
  2127                           	callstack 0
  2128  01B99E                     _initButton:
  2129                           	callstack 30
  2130  01B99E                     
  2131                           ;color.c: 17:     TRISFbits.TRISF2=1;
  2132  01B99E  8486               	bsf	134,2,c	;volatile
  2133                           
  2134                           ;color.c: 18:     TRISFbits.TRISF3=1;
  2135  01B9A0  8686               	bsf	134,3,c	;volatile
  2136                           
  2137                           ;color.c: 19:     ANSELFbits.ANSELF2=0;
  2138  01B9A2  010E               	movlb	14	; () banked
  2139  01B9A4  95B4               	bcf	180,2,b	;volatile
  2140                           
  2141                           ;color.c: 20:     ANSELFbits.ANSELF3=0;
  2142  01B9A6  97B4               	bcf	180,3,b	;volatile
  2143                           
  2144                           ;color.c: 23:     LATDbits.LATD7=0;
  2145  01B9A8  9E7C               	bcf	124,7,c	;volatile
  2146                           
  2147                           ;color.c: 24:     TRISDbits.TRISD7=0;
  2148  01B9AA  9E84               	bcf	132,7,c	;volatile
  2149                           
  2150                           ;color.c: 25:     LATHbits.LATH3=0;
  2151  01B9AC  9680               	bcf	128,3,c	;volatile
  2152                           
  2153                           ;color.c: 26:     TRISHbits.TRISH3=0;
  2154  01B9AE  9688               	bcf	136,3,c	;volatile
  2155                           
  2156                           ;color.c: 27:     LATDbits.LATD4=0;
  2157  01B9B0  987C               	bcf	124,4,c	;volatile
  2158                           
  2159                           ;color.c: 28:     TRISDbits.TRISD4=0;
  2160  01B9B2  9884               	bcf	132,4,c	;volatile
  2161  01B9B4                     
  2162                           ; BSR set to: 14
  2163  01B9B4  0012               	return		;funcret
  2164  01B9B6                     __end_of_initButton:
  2165                           	callstack 0
  2166                           
  2167 ;; *************** function _fwdTimeArray *****************
  2168 ;; Defined at:
  2169 ;;		line 23 in file "scan.c"
  2170 ;; Parameters:    Size  Location     Type
  2171 ;;  fwdSize         1    wreg     unsigned char 
  2172 ;;  fwdArr          2    0[COMRAM] PTR int 
  2173 ;;		 -> main@fwdArr(50), 
  2174 ;;  fwdTime         2    2[COMRAM] PTR int 
  2175 ;;		 -> main@fwdTime(2), 
  2176 ;; Auto vars:     Size  Location     Type
  2177 ;;  fwdSize         1    6[COMRAM] unsigned char 
  2178 ;; Return value:  Size  Location     Type
  2179 ;;                  1    wreg      void 
  2180 ;; Registers used:
  2181 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2182 ;; Tracked objects:
  2183 ;;		On entry : 0/0
  2184 ;;		On exit  : 0/0
  2185 ;;		Unchanged: 0/0
  2186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2187 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2188 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2189 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2190 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2191 ;;Total ram usage:        7 bytes
  2192 ;; Hardware stack levels used: 1
  2193 ;; This function calls:
  2194 ;;		Nothing
  2195 ;; This function is called by:
  2196 ;;		_main
  2197 ;; This function uses a non-reentrant model
  2198 ;;
  2199                           
  2200                           	psect	text6
  2201  01BCD6                     __ptext6:
  2202                           	callstack 0
  2203  01BCD6                     _fwdTimeArray:
  2204                           	callstack 30
  2205                           
  2206                           ; BSR set to: 14
  2207                           ;incstack = 0
  2208                           ;fwdTimeArray@fwdSize stored from wreg
  2209  01BCD6  6E07               	movwf	fwdTimeArray@fwdSize^0,c
  2210  01BCD8                     
  2211                           ;scan.c: 24:         static char j = 0;;scan.c: 25:         if (j<fwdSize){
  2212  01BCD8  5007               	movf	fwdTimeArray@fwdSize^0,w,c
  2213  01BCDA  0100               	movlb	0	; () banked
  2214  01BCDC  5DEB               	subwf	fwdTimeArray@j& (0+255),w,b
  2215  01BCDE  B0D8               	btfsc	status,0,c
  2216  01BCE0  EF74  F0DE         	goto	u3671
  2217  01BCE4  EF76  F0DE         	goto	u3670
  2218  01BCE8                     u3671:
  2219  01BCE8  EF93  F0DE         	goto	l508
  2220  01BCEC                     u3670:
  2221  01BCEC                     
  2222                           ; BSR set to: 0
  2223                           ;scan.c: 26:             *(fwdArr+j) = *fwdTime;
  2224  01BCEC  C003  FFD9         	movff	fwdTimeArray@fwdTime,fsr2l
  2225  01BCF0  C004  FFDA         	movff	fwdTimeArray@fwdTime+1,fsr2h
  2226  01BCF4  51EB               	movf	fwdTimeArray@j& (0+255),w,b
  2227  01BCF6  6E05               	movwf	??_fwdTimeArray^0,c
  2228  01BCF8  6A06               	clrf	(??_fwdTimeArray+1)^0,c
  2229  01BCFA  90D8               	bcf	status,0,c
  2230  01BCFC  3605               	rlcf	??_fwdTimeArray^0,f,c
  2231  01BCFE  3606               	rlcf	(??_fwdTimeArray+1)^0,f,c
  2232  01BD00  5005               	movf	??_fwdTimeArray^0,w,c
  2233  01BD02  2401               	addwf	fwdTimeArray@fwdArr^0,w,c
  2234  01BD04  6EE1               	movwf	fsr1l,c
  2235  01BD06  5006               	movf	(??_fwdTimeArray+1)^0,w,c
  2236  01BD08  2002               	addwfc	(fwdTimeArray@fwdArr+1)^0,w,c
  2237  01BD0A  6EE2               	movwf	fsr1h,c
  2238  01BD0C  CFDE FFE6          	movff	postinc2,postinc1
  2239  01BD10  CFDD FFE5          	movff	postdec2,postdec1
  2240  01BD14                     
  2241                           ; BSR set to: 0
  2242                           ;scan.c: 27:             *fwdTime = 0;
  2243  01BD14  C003  FFD9         	movff	fwdTimeArray@fwdTime,fsr2l
  2244  01BD18  C004  FFDA         	movff	fwdTimeArray@fwdTime+1,fsr2h
  2245  01BD1C  0E00               	movlw	0
  2246  01BD1E  6EDE               	movwf	postinc2,c
  2247  01BD20  0E00               	movlw	0
  2248  01BD22  6EDD               	movwf	postdec2,c
  2249  01BD24                     
  2250                           ; BSR set to: 0
  2251                           ;scan.c: 28:             j ++;
  2252  01BD24  2BEB               	incf	fwdTimeArray@j& (0+255),f,b
  2253  01BD26                     l508:
  2254                           
  2255                           ; BSR set to: 0
  2256  01BD26  0012               	return		;funcret
  2257  01BD28                     __end_of_fwdTimeArray:
  2258                           	callstack 0
  2259                           
  2260 ;; *************** function _findcolor *****************
  2261 ;; Defined at:
  2262 ;;		line 361 in file "color.c"
  2263 ;; Parameters:    Size  Location     Type
  2264 ;;  cr              2   45[BANK0 ] PTR struct getcolor
  2265 ;;		 -> main@cr(8), 
  2266 ;;  hr              2   47[BANK0 ] PTR struct getcolor
  2267 ;;		 -> main@hr(8), 
  2268 ;;  sh              2   49[BANK0 ] PTR struct storecolor
  2269 ;;		 -> main@sh(120), 
  2270 ;;  lenRead         2   51[BANK0 ] PTR unsigned char 
  2271 ;;		 -> main@lenRead(1), 
  2272 ;; Auto vars:     Size  Location     Type
  2273 ;;  k               1   71[BANK0 ] unsigned char 
  2274 ;;  j               1   70[BANK0 ] unsigned char 
  2275 ;;  i               1   69[BANK0 ] unsigned char 
  2276 ;;  tolV            2   63[BANK0 ] unsigned int 
  2277 ;;  tolH            2   61[BANK0 ] unsigned int 
  2278 ;;  col             1   72[BANK0 ] unsigned char 
  2279 ;;  b               1   68[BANK0 ] unsigned char 
  2280 ;;  a               1   67[BANK0 ] unsigned char 
  2281 ;;  c               1   66[BANK0 ] unsigned char 
  2282 ;;  tolS            1   65[BANK0 ] unsigned char 
  2283 ;; Return value:  Size  Location     Type
  2284 ;;                  2   45[BANK0 ] unsigned int 
  2285 ;; Registers used:
  2286 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2287 ;; Tracked objects:
  2288 ;;		On entry : 0/0
  2289 ;;		On exit  : 0/0
  2290 ;;		Unchanged: 0/0
  2291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2292 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2293 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2294 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2295 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2296 ;;Total ram usage:       28 bytes
  2297 ;; Hardware stack levels used: 1
  2298 ;; Hardware stack levels required when called: 3
  2299 ;; This function calls:
  2300 ;;		_color_read_Blue
  2301 ;;		_color_read_Green
  2302 ;;		_color_read_Red
  2303 ;;		_findHSV
  2304 ;;		_turnonLED
  2305 ;; This function is called by:
  2306 ;;		_main
  2307 ;; This function uses a non-reentrant model
  2308 ;;
  2309                           
  2310                           	psect	text7
  2311  01E5E6                     __ptext7:
  2312                           	callstack 0
  2313  01E5E6                     _findcolor:
  2314                           	callstack 27
  2315  01E5E6                     
  2316                           ;color.c: 363:     turnonLED (1,1,1);
  2317  01E5E6  0E00               	movlw	0
  2318  01E5E8  6E02               	movwf	(turnonLED@RL+1)^0,c
  2319  01E5EA  0E01               	movlw	1
  2320  01E5EC  6E01               	movwf	turnonLED@RL^0,c
  2321  01E5EE  0E00               	movlw	0
  2322  01E5F0  6E04               	movwf	(turnonLED@GL+1)^0,c
  2323  01E5F2  0E01               	movlw	1
  2324  01E5F4  6E03               	movwf	turnonLED@GL^0,c
  2325  01E5F6  0E00               	movlw	0
  2326  01E5F8  6E06               	movwf	(turnonLED@BL+1)^0,c
  2327  01E5FA  0E01               	movlw	1
  2328  01E5FC  6E05               	movwf	turnonLED@BL^0,c
  2329  01E5FE  EC94  F0DE         	call	_turnonLED	;wreg free
  2330  01E602                     
  2331                           ;color.c: 364:     _delay((unsigned long)((200)*(64000000/4000.0)));
  2332  01E602  0E11               	movlw	17
  2333  01E604  0100               	movlb	0	; () banked
  2334  01E606  6F96               	movwf	(??_findcolor+1)& (0+255),b
  2335  01E608  0E3C               	movlw	60
  2336  01E60A  6F95               	movwf	??_findcolor& (0+255),b
  2337  01E60C  0ECB               	movlw	203
  2338  01E60E                     u4067:
  2339  01E60E  2EE8               	decfsz	wreg,f,c
  2340  01E610  D7FE               	bra	u4067
  2341  01E612  2F95               	decfsz	??_findcolor& (0+255),f,b
  2342  01E614  D7FC               	bra	u4067
  2343  01E616  2F96               	decfsz	(??_findcolor+1)& (0+255),f,b
  2344  01E618  D7FA               	bra	u4067
  2345  01E61A                     
  2346                           ;color.c: 365:     cr->RR = color_read_Red();
  2347  01E61A  EC43  F0DE         	call	_color_read_Red	;wreg free
  2348  01E61E  C08D  FFD9         	movff	findcolor@cr,fsr2l
  2349  01E622  C08E  FFDA         	movff	findcolor@cr+1,fsr2h
  2350  01E626  C005  FFDE         	movff	?_color_read_Red,postinc2
  2351  01E62A  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  2352  01E62E                     
  2353                           ;color.c: 366:      _delay((unsigned long)((200)*(64000000/4000.0)));
  2354  01E62E  0E11               	movlw	17
  2355  01E630  0100               	movlb	0	; () banked
  2356  01E632  6F96               	movwf	(??_findcolor+1)& (0+255),b
  2357  01E634  0E3C               	movlw	60
  2358  01E636  6F95               	movwf	??_findcolor& (0+255),b
  2359  01E638  0ECB               	movlw	203
  2360  01E63A                     u4077:
  2361  01E63A  2EE8               	decfsz	wreg,f,c
  2362  01E63C  D7FE               	bra	u4077
  2363  01E63E  2F95               	decfsz	??_findcolor& (0+255),f,b
  2364  01E640  D7FC               	bra	u4077
  2365  01E642  2F96               	decfsz	(??_findcolor+1)& (0+255),f,b
  2366  01E644  D7FA               	bra	u4077
  2367  01E646                     
  2368                           ;color.c: 367:     cr->GG = color_read_Green();
  2369  01E646  EC1B  F0DE         	call	_color_read_Green	;wreg free
  2370  01E64A  0100               	movlb	0	; () banked
  2371  01E64C  EE20 F002          	lfsr	2,2
  2372  01E650  518D               	movf	findcolor@cr& (0+255),w,b
  2373  01E652  26D9               	addwf	fsr2l,f,c
  2374  01E654  518E               	movf	(findcolor@cr+1)& (0+255),w,b
  2375  01E656  22DA               	addwfc	fsr2h,f,c
  2376  01E658  C005  FFDE         	movff	?_color_read_Green,postinc2
  2377  01E65C  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  2378  01E660                     
  2379                           ; BSR set to: 0
  2380                           ;color.c: 368:     _delay((unsigned long)((200)*(64000000/4000.0)));
  2381  01E660  0E11               	movlw	17
  2382  01E662  0100               	movlb	0	; () banked
  2383  01E664  6F96               	movwf	(??_findcolor+1)& (0+255),b
  2384  01E666  0E3C               	movlw	60
  2385  01E668  6F95               	movwf	??_findcolor& (0+255),b
  2386  01E66A  0ECB               	movlw	203
  2387  01E66C                     u4087:
  2388  01E66C  2EE8               	decfsz	wreg,f,c
  2389  01E66E  D7FE               	bra	u4087
  2390  01E670  2F95               	decfsz	??_findcolor& (0+255),f,b
  2391  01E672  D7FC               	bra	u4087
  2392  01E674  2F96               	decfsz	(??_findcolor+1)& (0+255),f,b
  2393  01E676  D7FA               	bra	u4087
  2394  01E678                     
  2395                           ;color.c: 369:     cr->BB = color_read_Blue();
  2396  01E678  ECCB  F0DD         	call	_color_read_Blue	;wreg free
  2397  01E67C  0100               	movlb	0	; () banked
  2398  01E67E  EE20 F004          	lfsr	2,4
  2399  01E682  518D               	movf	findcolor@cr& (0+255),w,b
  2400  01E684  26D9               	addwf	fsr2l,f,c
  2401  01E686  518E               	movf	(findcolor@cr+1)& (0+255),w,b
  2402  01E688  22DA               	addwfc	fsr2h,f,c
  2403  01E68A  C005  FFDE         	movff	?_color_read_Blue,postinc2
  2404  01E68E  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  2405  01E692                     
  2406                           ; BSR set to: 0
  2407                           ;color.c: 370:      _delay((unsigned long)((200)*(64000000/4000.0)));
  2408  01E692  0E11               	movlw	17
  2409  01E694  0100               	movlb	0	; () banked
  2410  01E696  6F96               	movwf	(??_findcolor+1)& (0+255),b
  2411  01E698  0E3C               	movlw	60
  2412  01E69A  6F95               	movwf	??_findcolor& (0+255),b
  2413  01E69C  0ECB               	movlw	203
  2414  01E69E                     u4097:
  2415  01E69E  2EE8               	decfsz	wreg,f,c
  2416  01E6A0  D7FE               	bra	u4097
  2417  01E6A2  2F95               	decfsz	??_findcolor& (0+255),f,b
  2418  01E6A4  D7FC               	bra	u4097
  2419  01E6A6  2F96               	decfsz	(??_findcolor+1)& (0+255),f,b
  2420  01E6A8  D7FA               	bra	u4097
  2421  01E6AA                     
  2422                           ;color.c: 371:      turnonLED(0,0,0);
  2423  01E6AA  0E00               	movlw	0
  2424  01E6AC  6E02               	movwf	(turnonLED@RL+1)^0,c
  2425  01E6AE  0E00               	movlw	0
  2426  01E6B0  6E01               	movwf	turnonLED@RL^0,c
  2427  01E6B2  0E00               	movlw	0
  2428  01E6B4  6E04               	movwf	(turnonLED@GL+1)^0,c
  2429  01E6B6  0E00               	movlw	0
  2430  01E6B8  6E03               	movwf	turnonLED@GL^0,c
  2431  01E6BA  0E00               	movlw	0
  2432  01E6BC  6E06               	movwf	(turnonLED@BL+1)^0,c
  2433  01E6BE  0E00               	movlw	0
  2434  01E6C0  6E05               	movwf	turnonLED@BL^0,c
  2435  01E6C2  EC94  F0DE         	call	_turnonLED	;wreg free
  2436  01E6C6                     
  2437                           ;color.c: 373:     findHSV(cr,hr);
  2438  01E6C6  C08D  F064         	movff	findcolor@cr,findHSV@cr
  2439  01E6CA  C08E  F065         	movff	findcolor@cr+1,findHSV@cr+1
  2440  01E6CE  C08F  F066         	movff	findcolor@hr,findHSV@hr
  2441  01E6D2  C090  F067         	movff	findcolor@hr+1,findHSV@hr+1
  2442  01E6D6  EC90  F0F6         	call	_findHSV	;wreg free
  2443  01E6DA                     
  2444                           ;color.c: 376:     unsigned int tolH = 1;
  2445  01E6DA  0E00               	movlw	0
  2446  01E6DC  0100               	movlb	0	; () banked
  2447  01E6DE  6F9E               	movwf	(findcolor@tolH+1)& (0+255),b
  2448  01E6E0  0E01               	movlw	1
  2449  01E6E2  6F9D               	movwf	findcolor@tolH& (0+255),b
  2450  01E6E4                     
  2451                           ; BSR set to: 0
  2452                           ;color.c: 377:     unsigned char tolS = 1;
  2453  01E6E4  0E01               	movlw	1
  2454  01E6E6  6FA1               	movwf	findcolor@tolS& (0+255),b
  2455  01E6E8                     
  2456                           ; BSR set to: 0
  2457                           ;color.c: 378:     unsigned int tolV = 1;
  2458  01E6E8  0E00               	movlw	0
  2459  01E6EA  6FA0               	movwf	(findcolor@tolV+1)& (0+255),b
  2460  01E6EC  0E01               	movlw	1
  2461  01E6EE  6F9F               	movwf	findcolor@tolV& (0+255),b
  2462  01E6F0                     
  2463                           ; BSR set to: 0
  2464                           ;color.c: 379:     char col = 0;
  2465  01E6F0  0E00               	movlw	0
  2466  01E6F2  6FA8               	movwf	findcolor@col& (0+255),b
  2467  01E6F4                     
  2468                           ; BSR set to: 0
  2469                           ;color.c: 380:     char a = 0;
  2470  01E6F4  0E00               	movlw	0
  2471  01E6F6  6FA3               	movwf	findcolor@a& (0+255),b
  2472  01E6F8                     
  2473                           ; BSR set to: 0
  2474                           ;color.c: 381:     char b = 0;
  2475  01E6F8  0E00               	movlw	0
  2476  01E6FA  6FA4               	movwf	findcolor@b& (0+255),b
  2477  01E6FC                     
  2478                           ; BSR set to: 0
  2479                           ;color.c: 382:     char c= 0;
  2480  01E6FC  0E00               	movlw	0
  2481  01E6FE  6FA2               	movwf	findcolor@c& (0+255),b
  2482                           
  2483                           ;color.c: 384:     while (col == 0){
  2484  01E700  EF6A  F0F6         	goto	l243
  2485  01E704                     l4368:
  2486                           
  2487                           ; BSR set to: 0
  2488                           ;color.c: 385:         char i=0;
  2489  01E704  0E00               	movlw	0
  2490  01E706  6FA5               	movwf	findcolor@i& (0+255),b
  2491                           
  2492                           ;color.c: 386:         for (i=0;i<9;i++){
  2493  01E708  0E00               	movlw	0
  2494  01E70A  6FA5               	movwf	findcolor@i& (0+255),b
  2495  01E70C                     l4374:
  2496                           
  2497                           ; BSR set to: 0
  2498                           ;color.c: 388:             if (hr->RR>(sh->R[i]-tolH)&&hr->RR<(sh->R[i]+tolH)){
  2499  01E70C  C08F  FFD9         	movff	findcolor@hr,fsr2l
  2500  01E710  C090  FFDA         	movff	findcolor@hr+1,fsr2h
  2501  01E714  51A5               	movf	findcolor@i& (0+255),w,b
  2502  01E716  0D02               	mullw	2
  2503  01E718  CFF3 F097          	movff	prodl,??_findcolor+2
  2504  01E71C  CFF4 F098          	movff	prodh,??_findcolor+3
  2505  01E720  5197               	movf	(??_findcolor+2)& (0+255),w,b
  2506  01E722  2591               	addwf	findcolor@sh& (0+255),w,b
  2507  01E724  6EE1               	movwf	fsr1l,c
  2508  01E726  5198               	movf	(??_findcolor+3)& (0+255),w,b
  2509  01E728  2192               	addwfc	(findcolor@sh+1)& (0+255),w,b
  2510  01E72A  6EE2               	movwf	fsr1h,c
  2511  01E72C  CFE6 F099          	movff	postinc1,??_findcolor+4
  2512  01E730  CFE5 F09A          	movff	postdec1,??_findcolor+5
  2513  01E734  519D               	movf	findcolor@tolH& (0+255),w,b
  2514  01E736  5F99               	subwf	(??_findcolor+4)& (0+255),f,b
  2515  01E738  519E               	movf	(findcolor@tolH+1)& (0+255),w,b
  2516  01E73A  5B9A               	subwfb	(??_findcolor+5)& (0+255),f,b
  2517  01E73C  50DE               	movf	postinc2,w,c
  2518  01E73E  5D99               	subwf	(??_findcolor+4)& (0+255),w,b
  2519  01E740  50DE               	movf	postinc2,w,c
  2520  01E742  599A               	subwfb	(??_findcolor+5)& (0+255),w,b
  2521  01E744  B0D8               	btfsc	status,0,c
  2522  01E746  EFA7  F0F3         	goto	u3681
  2523  01E74A  EFA9  F0F3         	goto	u3680
  2524  01E74E                     u3681:
  2525  01E74E  EFB0  F0F4         	goto	l4412
  2526  01E752                     u3680:
  2527  01E752                     
  2528                           ; BSR set to: 0
  2529  01E752  51A5               	movf	findcolor@i& (0+255),w,b
  2530  01E754  0D02               	mullw	2
  2531  01E756  CFF3 F095          	movff	prodl,??_findcolor
  2532  01E75A  CFF4 F096          	movff	prodh,??_findcolor+1
  2533  01E75E  5195               	movf	??_findcolor& (0+255),w,b
  2534  01E760  2591               	addwf	findcolor@sh& (0+255),w,b
  2535  01E762  6ED9               	movwf	fsr2l,c
  2536  01E764  5196               	movf	(??_findcolor+1)& (0+255),w,b
  2537  01E766  2192               	addwfc	(findcolor@sh+1)& (0+255),w,b
  2538  01E768  6EDA               	movwf	fsr2h,c
  2539  01E76A  CFDE F097          	movff	postinc2,??_findcolor+2
  2540  01E76E  CFDD F098          	movff	postdec2,??_findcolor+3
  2541  01E772  519D               	movf	findcolor@tolH& (0+255),w,b
  2542  01E774  2797               	addwf	(??_findcolor+2)& (0+255),f,b
  2543  01E776  519E               	movf	(findcolor@tolH+1)& (0+255),w,b
  2544  01E778  2398               	addwfc	(??_findcolor+3)& (0+255),f,b
  2545  01E77A  C08F  FFD9         	movff	findcolor@hr,fsr2l
  2546  01E77E  C090  FFDA         	movff	findcolor@hr+1,fsr2h
  2547  01E782  5197               	movf	(??_findcolor+2)& (0+255),w,b
  2548  01E784  5CDE               	subwf	postinc2,w,c
  2549  01E786  5198               	movf	(??_findcolor+3)& (0+255),w,b
  2550  01E788  58DE               	subwfb	postinc2,w,c
  2551  01E78A  B0D8               	btfsc	status,0,c
  2552  01E78C  EFCA  F0F3         	goto	u3691
  2553  01E790  EFCC  F0F3         	goto	u3690
  2554  01E794                     u3691:
  2555  01E794  EFB0  F0F4         	goto	l4412
  2556  01E798                     u3690:
  2557  01E798                     
  2558                           ; BSR set to: 0
  2559                           ;color.c: 389:                 a = i+1;
  2560  01E798  29A5               	incf	findcolor@i& (0+255),w,b
  2561  01E79A  6FA3               	movwf	findcolor@a& (0+255),b
  2562  01E79C                     
  2563                           ; BSR set to: 0
  2564                           ;color.c: 390:                 char j = 0;
  2565  01E79C  0E00               	movlw	0
  2566  01E79E  6FA6               	movwf	findcolor@j& (0+255),b
  2567  01E7A0                     
  2568                           ; BSR set to: 0
  2569                           ;color.c: 392:                 for (j=0;j<9;j++){
  2570  01E7A0  0E00               	movlw	0
  2571  01E7A2  6FA6               	movwf	findcolor@j& (0+255),b
  2572  01E7A4  0E08               	movlw	8
  2573  01E7A6  65A6               	cpfsgt	findcolor@j& (0+255),b
  2574  01E7A8  EFD8  F0F3         	goto	u3701
  2575  01E7AC  EFDA  F0F3         	goto	u3700
  2576  01E7B0                     u3701:
  2577  01E7B0  EFDC  F0F3         	goto	l4386
  2578  01E7B4                     u3700:
  2579  01E7B4  EFB2  F0F4         	goto	l256
  2580  01E7B8                     l4386:
  2581                           
  2582                           ; BSR set to: 0
  2583                           ;color.c: 394:                     if (hr->GG>(sh->G[j]-tolS)&&hr->GG<(sh->G[j]+tolS)){
  2584  01E7B8  EE20 F002          	lfsr	2,2
  2585  01E7BC  518F               	movf	findcolor@hr& (0+255),w,b
  2586  01E7BE  26D9               	addwf	fsr2l,f,c
  2587  01E7C0  5190               	movf	(findcolor@hr+1)& (0+255),w,b
  2588  01E7C2  22DA               	addwfc	fsr2h,f,c
  2589  01E7C4  51A6               	movf	findcolor@j& (0+255),w,b
  2590  01E7C6  0D02               	mullw	2
  2591  01E7C8  C091  F097         	movff	findcolor@sh,??_findcolor+2
  2592  01E7CC  C092  F098         	movff	findcolor@sh+1,??_findcolor+3
  2593  01E7D0  50F3               	movf	243,w,c
  2594  01E7D2  2797               	addwf	(??_findcolor+2)& (0+255),f,b
  2595  01E7D4  50F4               	movf	244,w,c
  2596  01E7D6  2398               	addwfc	(??_findcolor+3)& (0+255),f,b
  2597  01E7D8  0E1E               	movlw	30
  2598  01E7DA  2597               	addwf	(??_findcolor+2)& (0+255),w,b
  2599  01E7DC  6EE1               	movwf	fsr1l,c
  2600  01E7DE  0E00               	movlw	0
  2601  01E7E0  2198               	addwfc	(??_findcolor+3)& (0+255),w,b
  2602  01E7E2  6EE2               	movwf	fsr1h,c
  2603  01E7E4  CFE6 F099          	movff	postinc1,??_findcolor+4
  2604  01E7E8  CFE5 F09A          	movff	postdec1,??_findcolor+5
  2605  01E7EC  51A1               	movf	findcolor@tolS& (0+255),w,b
  2606  01E7EE  5F99               	subwf	(??_findcolor+4)& (0+255),f,b
  2607  01E7F0  0E00               	movlw	0
  2608  01E7F2  5B9A               	subwfb	(??_findcolor+5)& (0+255),f,b
  2609  01E7F4  50DE               	movf	postinc2,w,c
  2610  01E7F6  5D99               	subwf	(??_findcolor+4)& (0+255),w,b
  2611  01E7F8  50DE               	movf	postinc2,w,c
  2612  01E7FA  599A               	subwfb	(??_findcolor+5)& (0+255),w,b
  2613  01E7FC  B0D8               	btfsc	status,0,c
  2614  01E7FE  EF03  F0F4         	goto	u3711
  2615  01E802  EF05  F0F4         	goto	u3710
  2616  01E806                     u3711:
  2617  01E806  EFA4  F0F4         	goto	l4408
  2618  01E80A                     u3710:
  2619  01E80A                     
  2620                           ; BSR set to: 0
  2621  01E80A  51A6               	movf	findcolor@j& (0+255),w,b
  2622  01E80C  0D02               	mullw	2
  2623  01E80E  C091  F095         	movff	findcolor@sh,??_findcolor
  2624  01E812  C092  F096         	movff	findcolor@sh+1,??_findcolor+1
  2625  01E816  50F3               	movf	243,w,c
  2626  01E818  2795               	addwf	??_findcolor& (0+255),f,b
  2627  01E81A  50F4               	movf	244,w,c
  2628  01E81C  2396               	addwfc	(??_findcolor+1)& (0+255),f,b
  2629  01E81E  0E1E               	movlw	30
  2630  01E820  2595               	addwf	??_findcolor& (0+255),w,b
  2631  01E822  6ED9               	movwf	fsr2l,c
  2632  01E824  0E00               	movlw	0
  2633  01E826  2196               	addwfc	(??_findcolor+1)& (0+255),w,b
  2634  01E828  6EDA               	movwf	fsr2h,c
  2635  01E82A  CFDE F097          	movff	postinc2,??_findcolor+2
  2636  01E82E  CFDD F098          	movff	postdec2,??_findcolor+3
  2637  01E832  51A1               	movf	findcolor@tolS& (0+255),w,b
  2638  01E834  6F99               	movwf	(??_findcolor+4)& (0+255),b
  2639  01E836  6B9A               	clrf	(??_findcolor+5)& (0+255),b
  2640  01E838  5197               	movf	(??_findcolor+2)& (0+255),w,b
  2641  01E83A  2799               	addwf	(??_findcolor+4)& (0+255),f,b
  2642  01E83C  5198               	movf	(??_findcolor+3)& (0+255),w,b
  2643  01E83E  239A               	addwfc	(??_findcolor+5)& (0+255),f,b
  2644  01E840  EE20 F002          	lfsr	2,2
  2645  01E844  518F               	movf	findcolor@hr& (0+255),w,b
  2646  01E846  26D9               	addwf	fsr2l,f,c
  2647  01E848  5190               	movf	(findcolor@hr+1)& (0+255),w,b
  2648  01E84A  22DA               	addwfc	fsr2h,f,c
  2649  01E84C  5199               	movf	(??_findcolor+4)& (0+255),w,b
  2650  01E84E  5CDE               	subwf	postinc2,w,c
  2651  01E850  519A               	movf	(??_findcolor+5)& (0+255),w,b
  2652  01E852  58DE               	subwfb	postinc2,w,c
  2653  01E854  B0D8               	btfsc	status,0,c
  2654  01E856  EF2F  F0F4         	goto	u3721
  2655  01E85A  EF31  F0F4         	goto	u3720
  2656  01E85E                     u3721:
  2657  01E85E  EFA4  F0F4         	goto	l4408
  2658  01E862                     u3720:
  2659  01E862                     
  2660                           ; BSR set to: 0
  2661                           ;color.c: 395:                         b = j+1;
  2662  01E862  29A6               	incf	findcolor@j& (0+255),w,b
  2663  01E864  6FA4               	movwf	findcolor@b& (0+255),b
  2664  01E866                     
  2665                           ; BSR set to: 0
  2666                           ;color.c: 396:                         char k =0;
  2667  01E866  0E00               	movlw	0
  2668  01E868  6FA7               	movwf	findcolor@k& (0+255),b
  2669  01E86A                     
  2670                           ; BSR set to: 0
  2671                           ;color.c: 398:                         for (k=0;k<9;k++){
  2672  01E86A  0E00               	movlw	0
  2673  01E86C  6FA7               	movwf	findcolor@k& (0+255),b
  2674  01E86E  0E08               	movlw	8
  2675  01E870  65A7               	cpfsgt	findcolor@k& (0+255),b
  2676  01E872  EF3D  F0F4         	goto	u3731
  2677  01E876  EF3F  F0F4         	goto	u3730
  2678  01E87A                     u3731:
  2679  01E87A  EF41  F0F4         	goto	l4398
  2680  01E87E                     u3730:
  2681  01E87E  EFA5  F0F4         	goto	l255
  2682  01E882                     l4398:
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;color.c: 400:                             if (hr->BB>(sh->B[k]-tolV)&&hr->BB<(sh->B[k]+
      +                          tolV)){
  2686  01E882  EE20 F004          	lfsr	2,4
  2687  01E886  518F               	movf	findcolor@hr& (0+255),w,b
  2688  01E888  26D9               	addwf	fsr2l,f,c
  2689  01E88A  5190               	movf	(findcolor@hr+1)& (0+255),w,b
  2690  01E88C  22DA               	addwfc	fsr2h,f,c
  2691  01E88E  51A7               	movf	findcolor@k& (0+255),w,b
  2692  01E890  0D02               	mullw	2
  2693  01E892  C091  F097         	movff	findcolor@sh,??_findcolor+2
  2694  01E896  C092  F098         	movff	findcolor@sh+1,??_findcolor+3
  2695  01E89A  50F3               	movf	243,w,c
  2696  01E89C  2797               	addwf	(??_findcolor+2)& (0+255),f,b
  2697  01E89E  50F4               	movf	244,w,c
  2698  01E8A0  2398               	addwfc	(??_findcolor+3)& (0+255),f,b
  2699  01E8A2  0E3C               	movlw	60
  2700  01E8A4  2597               	addwf	(??_findcolor+2)& (0+255),w,b
  2701  01E8A6  6EE1               	movwf	fsr1l,c
  2702  01E8A8  0E00               	movlw	0
  2703  01E8AA  2198               	addwfc	(??_findcolor+3)& (0+255),w,b
  2704  01E8AC  6EE2               	movwf	fsr1h,c
  2705  01E8AE  CFE6 F099          	movff	postinc1,??_findcolor+4
  2706  01E8B2  CFE5 F09A          	movff	postdec1,??_findcolor+5
  2707  01E8B6  519F               	movf	findcolor@tolV& (0+255),w,b
  2708  01E8B8  5F99               	subwf	(??_findcolor+4)& (0+255),f,b
  2709  01E8BA  51A0               	movf	(findcolor@tolV+1)& (0+255),w,b
  2710  01E8BC  5B9A               	subwfb	(??_findcolor+5)& (0+255),f,b
  2711  01E8BE  50DE               	movf	postinc2,w,c
  2712  01E8C0  5D99               	subwf	(??_findcolor+4)& (0+255),w,b
  2713  01E8C2  50DE               	movf	postinc2,w,c
  2714  01E8C4  599A               	subwfb	(??_findcolor+5)& (0+255),w,b
  2715  01E8C6  B0D8               	btfsc	status,0,c
  2716  01E8C8  EF68  F0F4         	goto	u3741
  2717  01E8CC  EF6A  F0F4         	goto	u3740
  2718  01E8D0                     u3741:
  2719  01E8D0  EF97  F0F4         	goto	l4404
  2720  01E8D4                     u3740:
  2721  01E8D4                     
  2722                           ; BSR set to: 0
  2723  01E8D4  51A7               	movf	findcolor@k& (0+255),w,b
  2724  01E8D6  0D02               	mullw	2
  2725  01E8D8  C091  F095         	movff	findcolor@sh,??_findcolor
  2726  01E8DC  C092  F096         	movff	findcolor@sh+1,??_findcolor+1
  2727  01E8E0  50F3               	movf	243,w,c
  2728  01E8E2  2795               	addwf	??_findcolor& (0+255),f,b
  2729  01E8E4  50F4               	movf	244,w,c
  2730  01E8E6  2396               	addwfc	(??_findcolor+1)& (0+255),f,b
  2731  01E8E8  0E3C               	movlw	60
  2732  01E8EA  2595               	addwf	??_findcolor& (0+255),w,b
  2733  01E8EC  6ED9               	movwf	fsr2l,c
  2734  01E8EE  0E00               	movlw	0
  2735  01E8F0  2196               	addwfc	(??_findcolor+1)& (0+255),w,b
  2736  01E8F2  6EDA               	movwf	fsr2h,c
  2737  01E8F4  CFDE F097          	movff	postinc2,??_findcolor+2
  2738  01E8F8  CFDD F098          	movff	postdec2,??_findcolor+3
  2739  01E8FC  519F               	movf	findcolor@tolV& (0+255),w,b
  2740  01E8FE  2797               	addwf	(??_findcolor+2)& (0+255),f,b
  2741  01E900  51A0               	movf	(findcolor@tolV+1)& (0+255),w,b
  2742  01E902  2398               	addwfc	(??_findcolor+3)& (0+255),f,b
  2743  01E904  EE20 F004          	lfsr	2,4
  2744  01E908  518F               	movf	findcolor@hr& (0+255),w,b
  2745  01E90A  26D9               	addwf	fsr2l,f,c
  2746  01E90C  5190               	movf	(findcolor@hr+1)& (0+255),w,b
  2747  01E90E  22DA               	addwfc	fsr2h,f,c
  2748  01E910  5197               	movf	(??_findcolor+2)& (0+255),w,b
  2749  01E912  5CDE               	subwf	postinc2,w,c
  2750  01E914  5198               	movf	(??_findcolor+3)& (0+255),w,b
  2751  01E916  58DE               	subwfb	postinc2,w,c
  2752  01E918  B0D8               	btfsc	status,0,c
  2753  01E91A  EF91  F0F4         	goto	u3751
  2754  01E91E  EF93  F0F4         	goto	u3750
  2755  01E922                     u3751:
  2756  01E922  EF97  F0F4         	goto	l4404
  2757  01E926                     u3750:
  2758  01E926                     
  2759                           ; BSR set to: 0
  2760                           ;color.c: 401:                                 c = k+1;
  2761  01E926  29A7               	incf	findcolor@k& (0+255),w,b
  2762  01E928  6FA2               	movwf	findcolor@c& (0+255),b
  2763                           
  2764                           ;color.c: 402:                             }
  2765  01E92A  EF99  F0F4         	goto	l254
  2766  01E92E                     l4404:
  2767                           
  2768                           ; BSR set to: 0
  2769                           ;color.c: 404:                                 tolV ++;
  2770  01E92E  4B9F               	infsnz	findcolor@tolV& (0+255),f,b
  2771  01E930  2BA0               	incf	(findcolor@tolV+1)& (0+255),f,b
  2772  01E932                     l254:
  2773                           
  2774                           ; BSR set to: 0
  2775                           ;color.c: 406:                         }
  2776  01E932  2BA7               	incf	findcolor@k& (0+255),f,b
  2777  01E934                     
  2778                           ; BSR set to: 0
  2779  01E934  0E08               	movlw	8
  2780  01E936  65A7               	cpfsgt	findcolor@k& (0+255),b
  2781  01E938  EFA0  F0F4         	goto	u3761
  2782  01E93C  EFA2  F0F4         	goto	u3760
  2783  01E940                     u3761:
  2784  01E940  EF41  F0F4         	goto	l4398
  2785  01E944                     u3760:
  2786  01E944  EFA5  F0F4         	goto	l255
  2787  01E948                     l4408:
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;color.c: 409:                         tolS ++;
  2791  01E948  2BA1               	incf	findcolor@tolS& (0+255),f,b
  2792  01E94A                     l255:
  2793                           
  2794                           ; BSR set to: 0
  2795                           ;color.c: 411:                 }
  2796  01E94A  2BA6               	incf	findcolor@j& (0+255),f,b
  2797  01E94C                     
  2798                           ; BSR set to: 0
  2799  01E94C  0E08               	movlw	8
  2800  01E94E  65A6               	cpfsgt	findcolor@j& (0+255),b
  2801  01E950  EFAC  F0F4         	goto	u3771
  2802  01E954  EFAE  F0F4         	goto	u3770
  2803  01E958                     u3771:
  2804  01E958  EFDC  F0F3         	goto	l4386
  2805  01E95C                     u3770:
  2806  01E95C  EFB2  F0F4         	goto	l256
  2807  01E960                     l4412:
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;color.c: 414:                 tolH ++;
  2811  01E960  4B9D               	infsnz	findcolor@tolH& (0+255),f,b
  2812  01E962  2B9E               	incf	(findcolor@tolH+1)& (0+255),f,b
  2813  01E964                     l256:
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;color.c: 416:         }
  2817  01E964  2BA5               	incf	findcolor@i& (0+255),f,b
  2818  01E966                     
  2819                           ; BSR set to: 0
  2820  01E966  0E08               	movlw	8
  2821  01E968  65A5               	cpfsgt	findcolor@i& (0+255),b
  2822  01E96A  EFB9  F0F4         	goto	u3781
  2823  01E96E  EFBB  F0F4         	goto	u3780
  2824  01E972                     u3781:
  2825  01E972  EF86  F0F3         	goto	l4374
  2826  01E976                     u3780:
  2827  01E976                     
  2828                           ; BSR set to: 0
  2829                           ;color.c: 420:         if (a==b && b==c){
  2830  01E976  51A4               	movf	findcolor@b& (0+255),w,b
  2831  01E978  19A3               	xorwf	findcolor@a& (0+255),w,b
  2832  01E97A  A4D8               	btfss	status,2,c
  2833  01E97C  EFC2  F0F4         	goto	u3791
  2834  01E980  EFC4  F0F4         	goto	u3790
  2835  01E984                     u3791:
  2836  01E984  EFD1  F0F4         	goto	l4422
  2837  01E988                     u3790:
  2838  01E988                     
  2839                           ; BSR set to: 0
  2840  01E988  51A2               	movf	findcolor@c& (0+255),w,b
  2841  01E98A  19A4               	xorwf	findcolor@b& (0+255),w,b
  2842  01E98C  A4D8               	btfss	status,2,c
  2843  01E98E  EFCB  F0F4         	goto	u3801
  2844  01E992  EFCD  F0F4         	goto	u3800
  2845  01E996                     u3801:
  2846  01E996  EFD1  F0F4         	goto	l4422
  2847  01E99A                     u3800:
  2848  01E99A                     l4420:
  2849                           
  2850                           ; BSR set to: 0
  2851                           ;color.c: 421:             col = a;
  2852  01E99A  C0A3  F0A8         	movff	findcolor@a,findcolor@col
  2853                           
  2854                           ;color.c: 422:         }
  2855  01E99E  EFE5  F0F4         	goto	l4428
  2856  01E9A2                     l4422:
  2857                           
  2858                           ; BSR set to: 0
  2859  01E9A2  51A2               	movf	findcolor@c& (0+255),w,b
  2860  01E9A4  19A4               	xorwf	findcolor@b& (0+255),w,b
  2861  01E9A6  A4D8               	btfss	status,2,c
  2862  01E9A8  EFD8  F0F4         	goto	u3811
  2863  01E9AC  EFDA  F0F4         	goto	u3810
  2864  01E9B0                     u3811:
  2865  01E9B0  EFCD  F0F4         	goto	l4420
  2866  01E9B4                     u3810:
  2867  01E9B4                     
  2868                           ; BSR set to: 0
  2869  01E9B4  51A4               	movf	findcolor@b& (0+255),w,b
  2870  01E9B6  19A3               	xorwf	findcolor@a& (0+255),w,b
  2871  01E9B8  B4D8               	btfsc	status,2,c
  2872  01E9BA  EFE1  F0F4         	goto	u3821
  2873  01E9BE  EFE3  F0F4         	goto	u3820
  2874  01E9C2                     u3821:
  2875  01E9C2  EFCD  F0F4         	goto	l4420
  2876  01E9C6                     u3820:
  2877  01E9C6                     
  2878                           ; BSR set to: 0
  2879                           ;color.c: 424:             col = b;
  2880  01E9C6  C0A4  F0A8         	movff	findcolor@b,findcolor@col
  2881  01E9CA                     l4428:
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;color.c: 431:         if (col ==1 || col ==6){
  2885  01E9CA  05A8               	decf	findcolor@col& (0+255),w,b
  2886  01E9CC  B4D8               	btfsc	status,2,c
  2887  01E9CE  EFEB  F0F4         	goto	u3831
  2888  01E9D2  EFED  F0F4         	goto	u3830
  2889  01E9D6                     u3831:
  2890  01E9D6  EFF6  F0F4         	goto	l4432
  2891  01E9DA                     u3830:
  2892  01E9DA                     
  2893                           ; BSR set to: 0
  2894  01E9DA  0E06               	movlw	6
  2895  01E9DC  19A8               	xorwf	findcolor@col& (0+255),w,b
  2896  01E9DE  A4D8               	btfss	status,2,c
  2897  01E9E0  EFF4  F0F4         	goto	u3841
  2898  01E9E4  EFF6  F0F4         	goto	u3840
  2899  01E9E8                     u3841:
  2900  01E9E8  EF95  F0F5         	goto	l4458
  2901  01E9EC                     u3840:
  2902  01E9EC                     l4432:
  2903                           
  2904                           ; BSR set to: 0
  2905                           ;color.c: 432:             turnonLED (1,0,0);
  2906  01E9EC  0E00               	movlw	0
  2907  01E9EE  6E02               	movwf	(turnonLED@RL+1)^0,c
  2908  01E9F0  0E01               	movlw	1
  2909  01E9F2  6E01               	movwf	turnonLED@RL^0,c
  2910  01E9F4  0E00               	movlw	0
  2911  01E9F6  6E04               	movwf	(turnonLED@GL+1)^0,c
  2912  01E9F8  0E00               	movlw	0
  2913  01E9FA  6E03               	movwf	turnonLED@GL^0,c
  2914  01E9FC  0E00               	movlw	0
  2915  01E9FE  6E06               	movwf	(turnonLED@BL+1)^0,c
  2916  01EA00  0E00               	movlw	0
  2917  01EA02  6E05               	movwf	turnonLED@BL^0,c
  2918  01EA04  EC94  F0DE         	call	_turnonLED	;wreg free
  2919  01EA08                     
  2920                           ;color.c: 433:             cr->RR = color_read_Red();
  2921  01EA08  EC43  F0DE         	call	_color_read_Red	;wreg free
  2922  01EA0C  C08D  FFD9         	movff	findcolor@cr,fsr2l
  2923  01EA10  C08E  FFDA         	movff	findcolor@cr+1,fsr2h
  2924  01EA14  C005  FFDE         	movff	?_color_read_Red,postinc2
  2925  01EA18  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  2926  01EA1C                     
  2927                           ;color.c: 434:             _delay((unsigned long)((200)*(64000000/4000.0)));
  2928  01EA1C  0E11               	movlw	17
  2929  01EA1E  0100               	movlb	0	; () banked
  2930  01EA20  6F96               	movwf	(??_findcolor+1)& (0+255),b
  2931  01EA22  0E3C               	movlw	60
  2932  01EA24  6F95               	movwf	??_findcolor& (0+255),b
  2933  01EA26  0ECB               	movlw	203
  2934  01EA28                     u4107:
  2935  01EA28  2EE8               	decfsz	wreg,f,c
  2936  01EA2A  D7FE               	bra	u4107
  2937  01EA2C  2F95               	decfsz	??_findcolor& (0+255),f,b
  2938  01EA2E  D7FC               	bra	u4107
  2939  01EA30  2F96               	decfsz	(??_findcolor+1)& (0+255),f,b
  2940  01EA32  D7FA               	bra	u4107
  2941  01EA34                     
  2942                           ;color.c: 435:             turnonLED (0,1,0);
  2943  01EA34  0E00               	movlw	0
  2944  01EA36  6E02               	movwf	(turnonLED@RL+1)^0,c
  2945  01EA38  0E00               	movlw	0
  2946  01EA3A  6E01               	movwf	turnonLED@RL^0,c
  2947  01EA3C  0E00               	movlw	0
  2948  01EA3E  6E04               	movwf	(turnonLED@GL+1)^0,c
  2949  01EA40  0E01               	movlw	1
  2950  01EA42  6E03               	movwf	turnonLED@GL^0,c
  2951  01EA44  0E00               	movlw	0
  2952  01EA46  6E06               	movwf	(turnonLED@BL+1)^0,c
  2953  01EA48  0E00               	movlw	0
  2954  01EA4A  6E05               	movwf	turnonLED@BL^0,c
  2955  01EA4C  EC94  F0DE         	call	_turnonLED	;wreg free
  2956  01EA50                     
  2957                           ;color.c: 436:             cr->GG = color_read_Green();
  2958  01EA50  EC1B  F0DE         	call	_color_read_Green	;wreg free
  2959  01EA54  0100               	movlb	0	; () banked
  2960  01EA56  EE20 F002          	lfsr	2,2
  2961  01EA5A  518D               	movf	findcolor@cr& (0+255),w,b
  2962  01EA5C  26D9               	addwf	fsr2l,f,c
  2963  01EA5E  518E               	movf	(findcolor@cr+1)& (0+255),w,b
  2964  01EA60  22DA               	addwfc	fsr2h,f,c
  2965  01EA62  C005  FFDE         	movff	?_color_read_Green,postinc2
  2966  01EA66  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  2967                           
  2968                           ;color.c: 437:             _delay((unsigned long)((200)*(64000000/4000.0)));
  2969  01EA6A  0E11               	movlw	17
  2970  01EA6C  0100               	movlb	0	; () banked
  2971  01EA6E  6F96               	movwf	(??_findcolor+1)& (0+255),b
  2972  01EA70  0E3C               	movlw	60
  2973  01EA72  6F95               	movwf	??_findcolor& (0+255),b
  2974  01EA74  0ECB               	movlw	203
  2975  01EA76                     u4117:
  2976  01EA76  2EE8               	decfsz	wreg,f,c
  2977  01EA78  D7FE               	bra	u4117
  2978  01EA7A  2F95               	decfsz	??_findcolor& (0+255),f,b
  2979  01EA7C  D7FC               	bra	u4117
  2980  01EA7E  2F96               	decfsz	(??_findcolor+1)& (0+255),f,b
  2981  01EA80  D7FA               	bra	u4117
  2982  01EA82                     
  2983                           ;color.c: 438:             turnonLED (0,0,1);
  2984  01EA82  0E00               	movlw	0
  2985  01EA84  6E02               	movwf	(turnonLED@RL+1)^0,c
  2986  01EA86  0E00               	movlw	0
  2987  01EA88  6E01               	movwf	turnonLED@RL^0,c
  2988  01EA8A  0E00               	movlw	0
  2989  01EA8C  6E04               	movwf	(turnonLED@GL+1)^0,c
  2990  01EA8E  0E00               	movlw	0
  2991  01EA90  6E03               	movwf	turnonLED@GL^0,c
  2992  01EA92  0E00               	movlw	0
  2993  01EA94  6E06               	movwf	(turnonLED@BL+1)^0,c
  2994  01EA96  0E01               	movlw	1
  2995  01EA98  6E05               	movwf	turnonLED@BL^0,c
  2996  01EA9A  EC94  F0DE         	call	_turnonLED	;wreg free
  2997  01EA9E                     
  2998                           ;color.c: 439:             cr->BB = color_read_Blue();
  2999  01EA9E  ECCB  F0DD         	call	_color_read_Blue	;wreg free
  3000  01EAA2  0100               	movlb	0	; () banked
  3001  01EAA4  EE20 F004          	lfsr	2,4
  3002  01EAA8  518D               	movf	findcolor@cr& (0+255),w,b
  3003  01EAAA  26D9               	addwf	fsr2l,f,c
  3004  01EAAC  518E               	movf	(findcolor@cr+1)& (0+255),w,b
  3005  01EAAE  22DA               	addwfc	fsr2h,f,c
  3006  01EAB0  C005  FFDE         	movff	?_color_read_Blue,postinc2
  3007  01EAB4  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  3008  01EAB8                     
  3009                           ; BSR set to: 0
  3010                           ;color.c: 440:             _delay((unsigned long)((200)*(64000000/4000.0)));
  3011  01EAB8  0E11               	movlw	17
  3012  01EABA  0100               	movlb	0	; () banked
  3013  01EABC  6F96               	movwf	(??_findcolor+1)& (0+255),b
  3014  01EABE  0E3C               	movlw	60
  3015  01EAC0  6F95               	movwf	??_findcolor& (0+255),b
  3016  01EAC2  0ECB               	movlw	203
  3017  01EAC4                     u4127:
  3018  01EAC4  2EE8               	decfsz	wreg,f,c
  3019  01EAC6  D7FE               	bra	u4127
  3020  01EAC8  2F95               	decfsz	??_findcolor& (0+255),f,b
  3021  01EACA  D7FC               	bra	u4127
  3022  01EACC  2F96               	decfsz	(??_findcolor+1)& (0+255),f,b
  3023  01EACE  D7FA               	bra	u4127
  3024  01EAD0                     
  3025                           ;color.c: 441:             turnonLED(0,0,0);
  3026  01EAD0  0E00               	movlw	0
  3027  01EAD2  6E02               	movwf	(turnonLED@RL+1)^0,c
  3028  01EAD4  0E00               	movlw	0
  3029  01EAD6  6E01               	movwf	turnonLED@RL^0,c
  3030  01EAD8  0E00               	movlw	0
  3031  01EADA  6E04               	movwf	(turnonLED@GL+1)^0,c
  3032  01EADC  0E00               	movlw	0
  3033  01EADE  6E03               	movwf	turnonLED@GL^0,c
  3034  01EAE0  0E00               	movlw	0
  3035  01EAE2  6E06               	movwf	(turnonLED@BL+1)^0,c
  3036  01EAE4  0E00               	movlw	0
  3037  01EAE6  6E05               	movwf	turnonLED@BL^0,c
  3038  01EAE8  EC94  F0DE         	call	_turnonLED	;wreg free
  3039  01EAEC                     
  3040                           ;color.c: 442:             findHSV(cr,hr);
  3041  01EAEC  C08D  F064         	movff	findcolor@cr,findHSV@cr
  3042  01EAF0  C08E  F065         	movff	findcolor@cr+1,findHSV@cr+1
  3043  01EAF4  C08F  F066         	movff	findcolor@hr,findHSV@hr
  3044  01EAF8  C090  F067         	movff	findcolor@hr+1,findHSV@hr+1
  3045  01EAFC  EC90  F0F6         	call	_findHSV	;wreg free
  3046  01EB00                     
  3047                           ;color.c: 444:             if (hr->RR==0){
  3048  01EB00  C08F  FFD9         	movff	findcolor@hr,fsr2l
  3049  01EB04  C090  FFDA         	movff	findcolor@hr+1,fsr2h
  3050  01EB08  50DE               	movf	postinc2,w,c
  3051  01EB0A  10DE               	iorwf	postinc2,w,c
  3052  01EB0C  A4D8               	btfss	status,2,c
  3053  01EB0E  EF8B  F0F5         	goto	u3851
  3054  01EB12  EF8D  F0F5         	goto	u3850
  3055  01EB16                     u3851:
  3056  01EB16  EF92  F0F5         	goto	l4456
  3057  01EB1A                     u3850:
  3058  01EB1A                     
  3059                           ;color.c: 445:             col = 6;
  3060  01EB1A  0E06               	movlw	6
  3061  01EB1C  0100               	movlb	0	; () banked
  3062  01EB1E  6FA8               	movwf	findcolor@col& (0+255),b
  3063                           
  3064                           ;color.c: 446:             }
  3065  01EB20  EF95  F0F5         	goto	l4458
  3066  01EB24                     l4456:
  3067                           
  3068                           ;color.c: 448:             col = 1;
  3069  01EB24  0E01               	movlw	1
  3070  01EB26  0100               	movlb	0	; () banked
  3071  01EB28  6FA8               	movwf	findcolor@col& (0+255),b
  3072  01EB2A                     l4458:
  3073                           
  3074                           ; BSR set to: 0
  3075                           ;color.c: 453:         if (col==9){
  3076  01EB2A  0E09               	movlw	9
  3077  01EB2C  19A8               	xorwf	findcolor@col& (0+255),w,b
  3078  01EB2E  A4D8               	btfss	status,2,c
  3079  01EB30  EF9C  F0F5         	goto	u3861
  3080  01EB34  EF9E  F0F5         	goto	u3860
  3081  01EB38                     u3861:
  3082  01EB38  EF6A  F0F6         	goto	l243
  3083  01EB3C                     u3860:
  3084  01EB3C                     
  3085                           ; BSR set to: 0
  3086                           ;color.c: 454:             turnonLED (1,1,1);
  3087  01EB3C  0E00               	movlw	0
  3088  01EB3E  6E02               	movwf	(turnonLED@RL+1)^0,c
  3089  01EB40  0E01               	movlw	1
  3090  01EB42  6E01               	movwf	turnonLED@RL^0,c
  3091  01EB44  0E00               	movlw	0
  3092  01EB46  6E04               	movwf	(turnonLED@GL+1)^0,c
  3093  01EB48  0E01               	movlw	1
  3094  01EB4A  6E03               	movwf	turnonLED@GL^0,c
  3095  01EB4C  0E00               	movlw	0
  3096  01EB4E  6E06               	movwf	(turnonLED@BL+1)^0,c
  3097  01EB50  0E01               	movlw	1
  3098  01EB52  6E05               	movwf	turnonLED@BL^0,c
  3099  01EB54  EC94  F0DE         	call	_turnonLED	;wreg free
  3100  01EB58                     
  3101                           ;color.c: 455:             _delay((unsigned long)((200)*(64000000/4000.0)));
  3102  01EB58  0E11               	movlw	17
  3103  01EB5A  0100               	movlb	0	; () banked
  3104  01EB5C  6F96               	movwf	(??_findcolor+1)& (0+255),b
  3105  01EB5E  0E3C               	movlw	60
  3106  01EB60  6F95               	movwf	??_findcolor& (0+255),b
  3107  01EB62  0ECB               	movlw	203
  3108  01EB64                     u4137:
  3109  01EB64  2EE8               	decfsz	wreg,f,c
  3110  01EB66  D7FE               	bra	u4137
  3111  01EB68  2F95               	decfsz	??_findcolor& (0+255),f,b
  3112  01EB6A  D7FC               	bra	u4137
  3113  01EB6C  2F96               	decfsz	(??_findcolor+1)& (0+255),f,b
  3114  01EB6E  D7FA               	bra	u4137
  3115  01EB70                     
  3116                           ;color.c: 456:             cr->RR = color_read_Red();
  3117  01EB70  EC43  F0DE         	call	_color_read_Red	;wreg free
  3118  01EB74  C08D  FFD9         	movff	findcolor@cr,fsr2l
  3119  01EB78  C08E  FFDA         	movff	findcolor@cr+1,fsr2h
  3120  01EB7C  C005  FFDE         	movff	?_color_read_Red,postinc2
  3121  01EB80  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  3122  01EB84                     
  3123                           ;color.c: 457:             _delay((unsigned long)((200)*(64000000/4000.0)));
  3124  01EB84  0E11               	movlw	17
  3125  01EB86  0100               	movlb	0	; () banked
  3126  01EB88  6F96               	movwf	(??_findcolor+1)& (0+255),b
  3127  01EB8A  0E3C               	movlw	60
  3128  01EB8C  6F95               	movwf	??_findcolor& (0+255),b
  3129  01EB8E  0ECB               	movlw	203
  3130  01EB90                     u4147:
  3131  01EB90  2EE8               	decfsz	wreg,f,c
  3132  01EB92  D7FE               	bra	u4147
  3133  01EB94  2F95               	decfsz	??_findcolor& (0+255),f,b
  3134  01EB96  D7FC               	bra	u4147
  3135  01EB98  2F96               	decfsz	(??_findcolor+1)& (0+255),f,b
  3136  01EB9A  D7FA               	bra	u4147
  3137  01EB9C                     
  3138                           ;color.c: 458:             cr->GG = color_read_Green();
  3139  01EB9C  EC1B  F0DE         	call	_color_read_Green	;wreg free
  3140  01EBA0  0100               	movlb	0	; () banked
  3141  01EBA2  EE20 F002          	lfsr	2,2
  3142  01EBA6  518D               	movf	findcolor@cr& (0+255),w,b
  3143  01EBA8  26D9               	addwf	fsr2l,f,c
  3144  01EBAA  518E               	movf	(findcolor@cr+1)& (0+255),w,b
  3145  01EBAC  22DA               	addwfc	fsr2h,f,c
  3146  01EBAE  C005  FFDE         	movff	?_color_read_Green,postinc2
  3147  01EBB2  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  3148  01EBB6                     
  3149                           ; BSR set to: 0
  3150                           ;color.c: 459:             _delay((unsigned long)((200)*(64000000/4000.0)));
  3151  01EBB6  0E11               	movlw	17
  3152  01EBB8  0100               	movlb	0	; () banked
  3153  01EBBA  6F96               	movwf	(??_findcolor+1)& (0+255),b
  3154  01EBBC  0E3C               	movlw	60
  3155  01EBBE  6F95               	movwf	??_findcolor& (0+255),b
  3156  01EBC0  0ECB               	movlw	203
  3157  01EBC2                     u4157:
  3158  01EBC2  2EE8               	decfsz	wreg,f,c
  3159  01EBC4  D7FE               	bra	u4157
  3160  01EBC6  2F95               	decfsz	??_findcolor& (0+255),f,b
  3161  01EBC8  D7FC               	bra	u4157
  3162  01EBCA  2F96               	decfsz	(??_findcolor+1)& (0+255),f,b
  3163  01EBCC  D7FA               	bra	u4157
  3164  01EBCE                     
  3165                           ;color.c: 460:             cr->BB = color_read_Blue();
  3166  01EBCE  ECCB  F0DD         	call	_color_read_Blue	;wreg free
  3167  01EBD2  0100               	movlb	0	; () banked
  3168  01EBD4  EE20 F004          	lfsr	2,4
  3169  01EBD8  518D               	movf	findcolor@cr& (0+255),w,b
  3170  01EBDA  26D9               	addwf	fsr2l,f,c
  3171  01EBDC  518E               	movf	(findcolor@cr+1)& (0+255),w,b
  3172  01EBDE  22DA               	addwfc	fsr2h,f,c
  3173  01EBE0  C005  FFDE         	movff	?_color_read_Blue,postinc2
  3174  01EBE4  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  3175  01EBE8                     
  3176                           ; BSR set to: 0
  3177                           ;color.c: 461:             _delay((unsigned long)((200)*(64000000/4000.0)));
  3178  01EBE8  0E11               	movlw	17
  3179  01EBEA  0100               	movlb	0	; () banked
  3180  01EBEC  6F96               	movwf	(??_findcolor+1)& (0+255),b
  3181  01EBEE  0E3C               	movlw	60
  3182  01EBF0  6F95               	movwf	??_findcolor& (0+255),b
  3183  01EBF2  0ECB               	movlw	203
  3184  01EBF4                     u4167:
  3185  01EBF4  2EE8               	decfsz	wreg,f,c
  3186  01EBF6  D7FE               	bra	u4167
  3187  01EBF8  2F95               	decfsz	??_findcolor& (0+255),f,b
  3188  01EBFA  D7FC               	bra	u4167
  3189  01EBFC  2F96               	decfsz	(??_findcolor+1)& (0+255),f,b
  3190  01EBFE  D7FA               	bra	u4167
  3191  01EC00                     
  3192                           ;color.c: 462:             turnonLED(0,0,0);
  3193  01EC00  0E00               	movlw	0
  3194  01EC02  6E02               	movwf	(turnonLED@RL+1)^0,c
  3195  01EC04  0E00               	movlw	0
  3196  01EC06  6E01               	movwf	turnonLED@RL^0,c
  3197  01EC08  0E00               	movlw	0
  3198  01EC0A  6E04               	movwf	(turnonLED@GL+1)^0,c
  3199  01EC0C  0E00               	movlw	0
  3200  01EC0E  6E03               	movwf	turnonLED@GL^0,c
  3201  01EC10  0E00               	movlw	0
  3202  01EC12  6E06               	movwf	(turnonLED@BL+1)^0,c
  3203  01EC14  0E00               	movlw	0
  3204  01EC16  6E05               	movwf	turnonLED@BL^0,c
  3205  01EC18  EC94  F0DE         	call	_turnonLED	;wreg free
  3206  01EC1C                     
  3207                           ;color.c: 463:             findHSV(cr,hr);
  3208  01EC1C  C08D  F064         	movff	findcolor@cr,findHSV@cr
  3209  01EC20  C08E  F065         	movff	findcolor@cr+1,findHSV@cr+1
  3210  01EC24  C08F  F066         	movff	findcolor@hr,findHSV@hr
  3211  01EC28  C090  F067         	movff	findcolor@hr+1,findHSV@hr+1
  3212  01EC2C  EC90  F0F6         	call	_findHSV	;wreg free
  3213  01EC30                     
  3214                           ;color.c: 464:             if (hr->RR<=20 && hr->RR>=13){
  3215  01EC30  C08F  FFD9         	movff	findcolor@hr,fsr2l
  3216  01EC34  C090  FFDA         	movff	findcolor@hr+1,fsr2h
  3217  01EC38  0E01               	movlw	1
  3218  01EC3A  50DB               	movf	plusw2,w,c
  3219  01EC3C  E107               	bnz	u3871
  3220  01EC3E  0E15               	movlw	21
  3221  01EC40  5CDE               	subwf	postinc2,w,c
  3222  01EC42  B0D8               	btfsc	status,0,c
  3223  01EC44  EF26  F0F6         	goto	u3871
  3224  01EC48  EF28  F0F6         	goto	u3870
  3225  01EC4C                     u3871:
  3226  01EC4C  EF52  F0F6         	goto	l4490
  3227  01EC50                     u3870:
  3228  01EC50  C08F  FFD9         	movff	findcolor@hr,fsr2l
  3229  01EC54  C090  FFDA         	movff	findcolor@hr+1,fsr2h
  3230  01EC58  0E01               	movlw	1
  3231  01EC5A  50DB               	movf	plusw2,w,c
  3232  01EC5C  E109               	bnz	u3880
  3233  01EC5E  0E0D               	movlw	13
  3234  01EC60  5CDE               	subwf	postinc2,w,c
  3235  01EC62  A0D8               	btfss	status,0,c
  3236  01EC64  EF36  F0F6         	goto	u3881
  3237  01EC68  EF38  F0F6         	goto	u3880
  3238  01EC6C                     u3881:
  3239  01EC6C  EF52  F0F6         	goto	l4490
  3240  01EC70                     u3880:
  3241  01EC70                     
  3242                           ;color.c: 466:                 if (hr->BB<1000){
  3243  01EC70  0100               	movlb	0	; () banked
  3244  01EC72  EE20 F004          	lfsr	2,4
  3245  01EC76  518F               	movf	findcolor@hr& (0+255),w,b
  3246  01EC78  26D9               	addwf	fsr2l,f,c
  3247  01EC7A  5190               	movf	(findcolor@hr+1)& (0+255),w,b
  3248  01EC7C  22DA               	addwfc	fsr2h,f,c
  3249  01EC7E  0EE8               	movlw	232
  3250  01EC80  5CDE               	subwf	postinc2,w,c
  3251  01EC82  0E03               	movlw	3
  3252  01EC84  58DE               	subwfb	postinc2,w,c
  3253  01EC86  B0D8               	btfsc	status,0,c
  3254  01EC88  EF48  F0F6         	goto	u3891
  3255  01EC8C  EF4A  F0F6         	goto	u3890
  3256  01EC90                     u3891:
  3257  01EC90  EF4E  F0F6         	goto	l4488
  3258  01EC94                     u3890:
  3259  01EC94                     
  3260                           ; BSR set to: 0
  3261                           ;color.c: 467:                 col = 9;
  3262  01EC94  0E09               	movlw	9
  3263  01EC96  6FA8               	movwf	findcolor@col& (0+255),b
  3264                           
  3265                           ;color.c: 468:                 }
  3266  01EC98  EF6A  F0F6         	goto	l243
  3267  01EC9C                     l4488:
  3268                           
  3269                           ; BSR set to: 0
  3270                           ;color.c: 471:                     col = 4;
  3271  01EC9C  0E04               	movlw	4
  3272  01EC9E  6FA8               	movwf	findcolor@col& (0+255),b
  3273  01ECA0  EF6A  F0F6         	goto	l243
  3274  01ECA4                     l4490:
  3275  01ECA4  C08F  FFD9         	movff	findcolor@hr,fsr2l
  3276  01ECA8  C090  FFDA         	movff	findcolor@hr+1,fsr2h
  3277  01ECAC  0E01               	movlw	1
  3278  01ECAE  50DB               	movf	plusw2,w,c
  3279  01ECB0  E107               	bnz	u3901
  3280  01ECB2  0E08               	movlw	8
  3281  01ECB4  5CDE               	subwf	postinc2,w,c
  3282  01ECB6  B0D8               	btfsc	status,0,c
  3283  01ECB8  EF60  F0F6         	goto	u3901
  3284  01ECBC  EF62  F0F6         	goto	u3900
  3285  01ECC0                     u3901:
  3286  01ECC0  EF67  F0F6         	goto	l4494
  3287  01ECC4                     u3900:
  3288  01ECC4                     
  3289                           ;color.c: 476:                 col = 5;
  3290  01ECC4  0E05               	movlw	5
  3291  01ECC6  0100               	movlb	0	; () banked
  3292  01ECC8  6FA8               	movwf	findcolor@col& (0+255),b
  3293                           
  3294                           ;color.c: 477:             }
  3295  01ECCA  EF6A  F0F6         	goto	l243
  3296  01ECCE                     l4494:
  3297                           
  3298                           ;color.c: 480:                 col = 8;
  3299  01ECCE  0E08               	movlw	8
  3300  01ECD0  0100               	movlb	0	; () banked
  3301  01ECD2  6FA8               	movwf	findcolor@col& (0+255),b
  3302  01ECD4                     l243:
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;color.c: 384:     while (col == 0){
  3306  01ECD4  51A8               	movf	findcolor@col& (0+255),w,b
  3307  01ECD6  B4D8               	btfsc	status,2,c
  3308  01ECD8  EF70  F0F6         	goto	u3911
  3309  01ECDC  EF72  F0F6         	goto	u3910
  3310  01ECE0                     u3911:
  3311  01ECE0  EF82  F0F3         	goto	l4368
  3312  01ECE4                     u3910:
  3313  01ECE4                     
  3314                           ; BSR set to: 0
  3315                           ;color.c: 484:     LATHbits.LATH3 = 0;
  3316  01ECE4  9680               	bcf	128,3,c	;volatile
  3317  01ECE6                     
  3318                           ; BSR set to: 0
  3319                           ;color.c: 485:     _delay((unsigned long)((200)*(64000000/4000.0)));
  3320  01ECE6  0E11               	movlw	17
  3321  01ECE8  0100               	movlb	0	; () banked
  3322  01ECEA  6F96               	movwf	(??_findcolor+1)& (0+255),b
  3323  01ECEC  0E3C               	movlw	60
  3324  01ECEE  6F95               	movwf	??_findcolor& (0+255),b
  3325  01ECF0  0ECB               	movlw	203
  3326  01ECF2                     u4177:
  3327  01ECF2  2EE8               	decfsz	wreg,f,c
  3328  01ECF4  D7FE               	bra	u4177
  3329  01ECF6  2F95               	decfsz	??_findcolor& (0+255),f,b
  3330  01ECF8  D7FC               	bra	u4177
  3331  01ECFA  2F96               	decfsz	(??_findcolor+1)& (0+255),f,b
  3332  01ECFC  D7FA               	bra	u4177
  3333  01ECFE                     
  3334                           ;color.c: 486:     *lenRead = *lenRead + 1 ;
  3335  01ECFE  C093  FFD9         	movff	findcolor@lenRead,fsr2l
  3336  01ED02  C094  FFDA         	movff	findcolor@lenRead+1,fsr2h
  3337  01ED06  50DF               	movf	indf2,w,c
  3338  01ED08  0100               	movlb	0	; () banked
  3339  01ED0A  6F95               	movwf	??_findcolor& (0+255),b
  3340  01ED0C  2995               	incf	??_findcolor& (0+255),w,b
  3341  01ED0E  C093  FFD9         	movff	findcolor@lenRead,fsr2l
  3342  01ED12  C094  FFDA         	movff	findcolor@lenRead+1,fsr2h
  3343  01ED16  6EDF               	movwf	indf2,c
  3344  01ED18                     
  3345                           ; BSR set to: 0
  3346                           ;color.c: 487:     return col;
  3347  01ED18  C0A8  F08D         	movff	findcolor@col,?_findcolor
  3348  01ED1C  6B8E               	clrf	(?_findcolor+1)& (0+255),b
  3349  01ED1E                     
  3350                           ; BSR set to: 0
  3351  01ED1E  0012               	return		;funcret
  3352  01ED20                     __end_of_findcolor:
  3353                           	callstack 0
  3354                           
  3355 ;; *************** function _findHSV *****************
  3356 ;; Defined at:
  3357 ;;		line 244 in file "color.c"
  3358 ;; Parameters:    Size  Location     Type
  3359 ;;  cr              2    4[BANK0 ] PTR struct getcolor
  3360 ;;		 -> main@cr(8), 
  3361 ;;  hr              2    6[BANK0 ] PTR struct getcolor
  3362 ;;		 -> main@hr(8), 
  3363 ;; Auto vars:     Size  Location     Type
  3364 ;;  maxValue        4   41[BANK0 ] PTR struct getcolor
  3365 ;;  minValue        4   37[BANK0 ] PTR struct getcolor
  3366 ;;  h               4   33[BANK0 ] PTR struct getcolor
  3367 ;;  s               4   18[BANK0 ] PTR struct getcolor
  3368 ;;  v               4   12[BANK0 ] PTR struct getcolor
  3369 ;;  ss              2   16[BANK0 ] unsigned int 
  3370 ;;  maxIndex        1   32[BANK0 ] unsigned char 
  3371 ;; Return value:  Size  Location     Type
  3372 ;;                  1    wreg      void 
  3373 ;; Registers used:
  3374 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3375 ;; Tracked objects:
  3376 ;;		On entry : 0/0
  3377 ;;		On exit  : 0/0
  3378 ;;		Unchanged: 0/0
  3379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3380 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3381 ;;      Locals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3382 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3383 ;;      Totals:         0      41       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3384 ;;Total ram usage:       41 bytes
  3385 ;; Hardware stack levels used: 1
  3386 ;; Hardware stack levels required when called: 2
  3387 ;; This function calls:
  3388 ;;		___fladd
  3389 ;;		___fldiv
  3390 ;;		___flmul
  3391 ;;		___flsub
  3392 ;;		___fltol
  3393 ;;		___xxtofl
  3394 ;; This function is called by:
  3395 ;;		_findcolor
  3396 ;; This function uses a non-reentrant model
  3397 ;;
  3398                           
  3399                           	psect	text8
  3400  01ED20                     __ptext8:
  3401                           	callstack 0
  3402  01ED20                     _findHSV:
  3403                           	callstack 27
  3404  01ED20                     
  3405                           ;color.c: 245:     double minValue, maxValue;;color.c: 246:     unsigned char maxIndex;;
      +                          color.c: 247:     if ((cr->RR==cr->GG)&&(cr->RR==cr->BB)){
  3406  01ED20  0100               	movlb	0	; () banked
  3407  01ED22  EE20 F002          	lfsr	2,2
  3408  01ED26  5164               	movf	findHSV@cr& (0+255),w,b
  3409  01ED28  26D9               	addwf	fsr2l,f,c
  3410  01ED2A  5165               	movf	(findHSV@cr+1)& (0+255),w,b
  3411  01ED2C  22DA               	addwfc	fsr2h,f,c
  3412  01ED2E  C064  FFE1         	movff	findHSV@cr,fsr1l
  3413  01ED32  C065  FFE2         	movff	findHSV@cr+1,fsr1h
  3414  01ED36  50DE               	movf	postinc2,w,c
  3415  01ED38  18E6               	xorwf	postinc1,w,c
  3416  01ED3A  E107               	bnz	u3351
  3417  01ED3C  50DE               	movf	postinc2,w,c
  3418  01ED3E  18E6               	xorwf	postinc1,w,c
  3419  01ED40  A4D8               	btfss	status,2,c
  3420  01ED42  EFA5  F0F6         	goto	u3351
  3421  01ED46  EFA7  F0F6         	goto	u3350
  3422  01ED4A                     u3351:
  3423  01ED4A  EFF3  F0F6         	goto	l3990
  3424  01ED4E                     u3350:
  3425  01ED4E                     
  3426                           ; BSR set to: 0
  3427  01ED4E  EE20 F004          	lfsr	2,4
  3428  01ED52  5164               	movf	findHSV@cr& (0+255),w,b
  3429  01ED54  26D9               	addwf	fsr2l,f,c
  3430  01ED56  5165               	movf	(findHSV@cr+1)& (0+255),w,b
  3431  01ED58  22DA               	addwfc	fsr2h,f,c
  3432  01ED5A  C064  FFE1         	movff	findHSV@cr,fsr1l
  3433  01ED5E  C065  FFE2         	movff	findHSV@cr+1,fsr1h
  3434  01ED62  50DE               	movf	postinc2,w,c
  3435  01ED64  18E6               	xorwf	postinc1,w,c
  3436  01ED66  E107               	bnz	u3361
  3437  01ED68  50DE               	movf	postinc2,w,c
  3438  01ED6A  18E6               	xorwf	postinc1,w,c
  3439  01ED6C  A4D8               	btfss	status,2,c
  3440  01ED6E  EFBB  F0F6         	goto	u3361
  3441  01ED72  EFBD  F0F6         	goto	u3360
  3442  01ED76                     u3361:
  3443  01ED76  EFF3  F0F6         	goto	l3990
  3444  01ED7A                     u3360:
  3445  01ED7A                     
  3446                           ; BSR set to: 0
  3447                           ;color.c: 248:         maxIndex = 0;
  3448  01ED7A  0E00               	movlw	0
  3449  01ED7C  6F80               	movwf	findHSV@maxIndex& (0+255),b
  3450  01ED7E                     
  3451                           ; BSR set to: 0
  3452                           ;color.c: 249:         maxValue = cr->RR;
  3453  01ED7E  C064  FFD9         	movff	findHSV@cr,fsr2l
  3454  01ED82  C065  FFDA         	movff	findHSV@cr+1,fsr2h
  3455  01ED86  CFDE F068          	movff	postinc2,??_findHSV
  3456  01ED8A  CFDD F069          	movff	postdec2,??_findHSV+1
  3457  01ED8E  C068  F001         	movff	??_findHSV,___xxtofl@val
  3458  01ED92  C069  F002         	movff	??_findHSV+1,___xxtofl@val+1
  3459  01ED96  6A03               	clrf	(___xxtofl@val+2)^0,c
  3460  01ED98  6A04               	clrf	(___xxtofl@val+3)^0,c
  3461  01ED9A  0E00               	movlw	0
  3462  01ED9C  ECE4  F0E9         	call	___xxtofl
  3463  01EDA0  C001  F089         	movff	?___xxtofl,findHSV@maxValue
  3464  01EDA4  C002  F08A         	movff	?___xxtofl+1,findHSV@maxValue+1
  3465  01EDA8  C003  F08B         	movff	?___xxtofl+2,findHSV@maxValue+2
  3466  01EDAC  C004  F08C         	movff	?___xxtofl+3,findHSV@maxValue+3
  3467  01EDB0                     
  3468                           ;color.c: 250:         minValue = cr->RR;
  3469  01EDB0  C064  FFD9         	movff	findHSV@cr,fsr2l
  3470  01EDB4  C065  FFDA         	movff	findHSV@cr+1,fsr2h
  3471  01EDB8  CFDE F068          	movff	postinc2,??_findHSV
  3472  01EDBC  CFDD F069          	movff	postdec2,??_findHSV+1
  3473  01EDC0  C068  F001         	movff	??_findHSV,___xxtofl@val
  3474  01EDC4  C069  F002         	movff	??_findHSV+1,___xxtofl@val+1
  3475  01EDC8  6A03               	clrf	(___xxtofl@val+2)^0,c
  3476  01EDCA  6A04               	clrf	(___xxtofl@val+3)^0,c
  3477  01EDCC  0E00               	movlw	0
  3478  01EDCE  ECE4  F0E9         	call	___xxtofl
  3479  01EDD2  C001  F085         	movff	?___xxtofl,findHSV@minValue
  3480  01EDD6  C002  F086         	movff	?___xxtofl+1,findHSV@minValue+1
  3481  01EDDA  C003  F087         	movff	?___xxtofl+2,findHSV@minValue+2
  3482  01EDDE  C004  F088         	movff	?___xxtofl+3,findHSV@minValue+3
  3483                           
  3484                           ;color.c: 251:     }
  3485  01EDE2  EFB9  F0F9         	goto	l4048
  3486  01EDE6                     l3990:
  3487                           
  3488                           ; BSR set to: 0
  3489  01EDE6  EE20 F002          	lfsr	2,2
  3490  01EDEA  5164               	movf	findHSV@cr& (0+255),w,b
  3491  01EDEC  26D9               	addwf	fsr2l,f,c
  3492  01EDEE  5165               	movf	(findHSV@cr+1)& (0+255),w,b
  3493  01EDF0  22DA               	addwfc	fsr2h,f,c
  3494  01EDF2  C064  FFE1         	movff	findHSV@cr,fsr1l
  3495  01EDF6  C065  FFE2         	movff	findHSV@cr+1,fsr1h
  3496  01EDFA  50DE               	movf	postinc2,w,c
  3497  01EDFC  5CE6               	subwf	postinc1,w,c
  3498  01EDFE  50DE               	movf	postinc2,w,c
  3499  01EE00  58E6               	subwfb	postinc1,w,c
  3500  01EE02  A0D8               	btfss	status,0,c
  3501  01EE04  EF06  F0F7         	goto	u3371
  3502  01EE08  EF08  F0F7         	goto	u3370
  3503  01EE0C                     u3371:
  3504  01EE0C  EF79  F0F7         	goto	l4006
  3505  01EE10                     u3370:
  3506  01EE10                     
  3507                           ; BSR set to: 0
  3508  01EE10  EE20 F004          	lfsr	2,4
  3509  01EE14  5164               	movf	findHSV@cr& (0+255),w,b
  3510  01EE16  26D9               	addwf	fsr2l,f,c
  3511  01EE18  5165               	movf	(findHSV@cr+1)& (0+255),w,b
  3512  01EE1A  22DA               	addwfc	fsr2h,f,c
  3513  01EE1C  C064  FFE1         	movff	findHSV@cr,fsr1l
  3514  01EE20  C065  FFE2         	movff	findHSV@cr+1,fsr1h
  3515  01EE24  50DE               	movf	postinc2,w,c
  3516  01EE26  5CE6               	subwf	postinc1,w,c
  3517  01EE28  50DE               	movf	postinc2,w,c
  3518  01EE2A  58E6               	subwfb	postinc1,w,c
  3519  01EE2C  A0D8               	btfss	status,0,c
  3520  01EE2E  EF1B  F0F7         	goto	u3381
  3521  01EE32  EF1D  F0F7         	goto	u3380
  3522  01EE36                     u3381:
  3523  01EE36  EF79  F0F7         	goto	l4006
  3524  01EE3A                     u3380:
  3525  01EE3A                     
  3526                           ; BSR set to: 0
  3527                           ;color.c: 253:         maxIndex = 1;
  3528  01EE3A  0E01               	movlw	1
  3529  01EE3C  6F80               	movwf	findHSV@maxIndex& (0+255),b
  3530  01EE3E                     
  3531                           ; BSR set to: 0
  3532                           ;color.c: 254:         maxValue = cr->RR;
  3533  01EE3E  C064  FFD9         	movff	findHSV@cr,fsr2l
  3534  01EE42  C065  FFDA         	movff	findHSV@cr+1,fsr2h
  3535  01EE46  CFDE F068          	movff	postinc2,??_findHSV
  3536  01EE4A  CFDD F069          	movff	postdec2,??_findHSV+1
  3537  01EE4E  C068  F001         	movff	??_findHSV,___xxtofl@val
  3538  01EE52  C069  F002         	movff	??_findHSV+1,___xxtofl@val+1
  3539  01EE56  6A03               	clrf	(___xxtofl@val+2)^0,c
  3540  01EE58  6A04               	clrf	(___xxtofl@val+3)^0,c
  3541  01EE5A  0E00               	movlw	0
  3542  01EE5C  ECE4  F0E9         	call	___xxtofl
  3543  01EE60  C001  F089         	movff	?___xxtofl,findHSV@maxValue
  3544  01EE64  C002  F08A         	movff	?___xxtofl+1,findHSV@maxValue+1
  3545  01EE68  C003  F08B         	movff	?___xxtofl+2,findHSV@maxValue+2
  3546  01EE6C  C004  F08C         	movff	?___xxtofl+3,findHSV@maxValue+3
  3547  01EE70                     
  3548                           ;color.c: 255:         minValue = (cr->GG<cr->BB)?cr->GG : cr->BB;
  3549  01EE70  0100               	movlb	0	; () banked
  3550  01EE72  EE20 F004          	lfsr	2,4
  3551  01EE76  5164               	movf	findHSV@cr& (0+255),w,b
  3552  01EE78  26D9               	addwf	fsr2l,f,c
  3553  01EE7A  5165               	movf	(findHSV@cr+1)& (0+255),w,b
  3554  01EE7C  22DA               	addwfc	fsr2h,f,c
  3555  01EE7E  EE10 F002          	lfsr	1,2
  3556  01EE82  5164               	movf	findHSV@cr& (0+255),w,b
  3557  01EE84  26E1               	addwf	fsr1l,f,c
  3558  01EE86  5165               	movf	(findHSV@cr+1)& (0+255),w,b
  3559  01EE88  22E2               	addwfc	fsr1h,f,c
  3560  01EE8A  50DE               	movf	postinc2,w,c
  3561  01EE8C  5CE6               	subwf	postinc1,w,c
  3562  01EE8E  50DE               	movf	postinc2,w,c
  3563  01EE90  58E6               	subwfb	postinc1,w,c
  3564  01EE92  A0D8               	btfss	status,0,c
  3565  01EE94  EF4E  F0F7         	goto	u3391
  3566  01EE98  EF50  F0F7         	goto	u3390
  3567  01EE9C                     u3391:
  3568  01EE9C  EF5C  F0F7         	goto	l4002
  3569  01EEA0                     u3390:
  3570  01EEA0                     
  3571                           ; BSR set to: 0
  3572  01EEA0  EE20 F004          	lfsr	2,4
  3573  01EEA4  5164               	movf	findHSV@cr& (0+255),w,b
  3574  01EEA6  26D9               	addwf	fsr2l,f,c
  3575  01EEA8  5165               	movf	(findHSV@cr+1)& (0+255),w,b
  3576  01EEAA  22DA               	addwfc	fsr2h,f,c
  3577  01EEAC  CFDE F076          	movff	postinc2,_findHSV$784
  3578  01EEB0  CFDD F077          	movff	postdec2,_findHSV$784+1
  3579  01EEB4  EF66  F0F7         	goto	l4004
  3580  01EEB8                     l4002:
  3581                           
  3582                           ; BSR set to: 0
  3583  01EEB8  EE20 F002          	lfsr	2,2
  3584  01EEBC  5164               	movf	findHSV@cr& (0+255),w,b
  3585  01EEBE  26D9               	addwf	fsr2l,f,c
  3586  01EEC0  5165               	movf	(findHSV@cr+1)& (0+255),w,b
  3587  01EEC2  22DA               	addwfc	fsr2h,f,c
  3588  01EEC4  CFDE F076          	movff	postinc2,_findHSV$784
  3589  01EEC8  CFDD F077          	movff	postdec2,_findHSV$784+1
  3590  01EECC                     l4004:
  3591                           
  3592                           ; BSR set to: 0
  3593  01EECC  C076  F001         	movff	_findHSV$784,___xxtofl@val
  3594  01EED0  C077  F002         	movff	_findHSV$784+1,___xxtofl@val+1
  3595  01EED4  6A03               	clrf	(___xxtofl@val+2)^0,c
  3596  01EED6  6A04               	clrf	(___xxtofl@val+3)^0,c
  3597  01EED8  0E00               	movlw	0
  3598  01EEDA  ECE4  F0E9         	call	___xxtofl
  3599  01EEDE  C001  F085         	movff	?___xxtofl,findHSV@minValue
  3600  01EEE2  C002  F086         	movff	?___xxtofl+1,findHSV@minValue+1
  3601  01EEE6  C003  F087         	movff	?___xxtofl+2,findHSV@minValue+2
  3602  01EEEA  C004  F088         	movff	?___xxtofl+3,findHSV@minValue+3
  3603                           
  3604                           ;color.c: 256:     }
  3605  01EEEE  EFB9  F0F9         	goto	l4048
  3606  01EEF2                     l4006:
  3607                           
  3608                           ; BSR set to: 0
  3609  01EEF2  C064  FFD9         	movff	findHSV@cr,fsr2l
  3610  01EEF6  C065  FFDA         	movff	findHSV@cr+1,fsr2h
  3611  01EEFA  EE10 F002          	lfsr	1,2
  3612  01EEFE  5164               	movf	findHSV@cr& (0+255),w,b
  3613  01EF00  26E1               	addwf	fsr1l,f,c
  3614  01EF02  5165               	movf	(findHSV@cr+1)& (0+255),w,b
  3615  01EF04  22E2               	addwfc	fsr1h,f,c
  3616  01EF06  50DE               	movf	postinc2,w,c
  3617  01EF08  5CE6               	subwf	postinc1,w,c
  3618  01EF0A  50DE               	movf	postinc2,w,c
  3619  01EF0C  58E6               	subwfb	postinc1,w,c
  3620  01EF0E  A0D8               	btfss	status,0,c
  3621  01EF10  EF8C  F0F7         	goto	u3401
  3622  01EF14  EF8E  F0F7         	goto	u3400
  3623  01EF18                     u3401:
  3624  01EF18  EFFF  F0F7         	goto	l4022
  3625  01EF1C                     u3400:
  3626  01EF1C                     
  3627                           ; BSR set to: 0
  3628  01EF1C  EE20 F004          	lfsr	2,4
  3629  01EF20  5164               	movf	findHSV@cr& (0+255),w,b
  3630  01EF22  26D9               	addwf	fsr2l,f,c
  3631  01EF24  5165               	movf	(findHSV@cr+1)& (0+255),w,b
  3632  01EF26  22DA               	addwfc	fsr2h,f,c
  3633  01EF28  EE10 F002          	lfsr	1,2
  3634  01EF2C  5164               	movf	findHSV@cr& (0+255),w,b
  3635  01EF2E  26E1               	addwf	fsr1l,f,c
  3636  01EF30  5165               	movf	(findHSV@cr+1)& (0+255),w,b
  3637  01EF32  22E2               	addwfc	fsr1h,f,c
  3638  01EF34  50DE               	movf	postinc2,w,c
  3639  01EF36  5CE6               	subwf	postinc1,w,c
  3640  01EF38  50DE               	movf	postinc2,w,c
  3641  01EF3A  58E6               	subwfb	postinc1,w,c
  3642  01EF3C  A0D8               	btfss	status,0,c
  3643  01EF3E  EFA3  F0F7         	goto	u3411
  3644  01EF42  EFA5  F0F7         	goto	u3410
  3645  01EF46                     u3411:
  3646  01EF46  EFFF  F0F7         	goto	l4022
  3647  01EF4A                     u3410:
  3648  01EF4A                     
  3649                           ; BSR set to: 0
  3650                           ;color.c: 258:         maxIndex = 2;
  3651  01EF4A  0E02               	movlw	2
  3652  01EF4C  6F80               	movwf	findHSV@maxIndex& (0+255),b
  3653  01EF4E                     
  3654                           ; BSR set to: 0
  3655                           ;color.c: 259:         maxValue = cr->GG;
  3656  01EF4E  EE20 F002          	lfsr	2,2
  3657  01EF52  5164               	movf	findHSV@cr& (0+255),w,b
  3658  01EF54  26D9               	addwf	fsr2l,f,c
  3659  01EF56  5165               	movf	(findHSV@cr+1)& (0+255),w,b
  3660  01EF58  22DA               	addwfc	fsr2h,f,c
  3661  01EF5A  CFDE F068          	movff	postinc2,??_findHSV
  3662  01EF5E  CFDD F069          	movff	postdec2,??_findHSV+1
  3663  01EF62  C068  F001         	movff	??_findHSV,___xxtofl@val
  3664  01EF66  C069  F002         	movff	??_findHSV+1,___xxtofl@val+1
  3665  01EF6A  6A03               	clrf	(___xxtofl@val+2)^0,c
  3666  01EF6C  6A04               	clrf	(___xxtofl@val+3)^0,c
  3667  01EF6E  0E00               	movlw	0
  3668  01EF70  ECE4  F0E9         	call	___xxtofl
  3669  01EF74  C001  F089         	movff	?___xxtofl,findHSV@maxValue
  3670  01EF78  C002  F08A         	movff	?___xxtofl+1,findHSV@maxValue+1
  3671  01EF7C  C003  F08B         	movff	?___xxtofl+2,findHSV@maxValue+2
  3672  01EF80  C004  F08C         	movff	?___xxtofl+3,findHSV@maxValue+3
  3673  01EF84                     
  3674                           ;color.c: 260:         minValue = (cr->RR<cr->BB)?cr->RR:cr->BB;
  3675  01EF84  0100               	movlb	0	; () banked
  3676  01EF86  EE20 F004          	lfsr	2,4
  3677  01EF8A  5164               	movf	findHSV@cr& (0+255),w,b
  3678  01EF8C  26D9               	addwf	fsr2l,f,c
  3679  01EF8E  5165               	movf	(findHSV@cr+1)& (0+255),w,b
  3680  01EF90  22DA               	addwfc	fsr2h,f,c
  3681  01EF92  C064  FFE1         	movff	findHSV@cr,fsr1l
  3682  01EF96  C065  FFE2         	movff	findHSV@cr+1,fsr1h
  3683  01EF9A  50DE               	movf	postinc2,w,c
  3684  01EF9C  5CE6               	subwf	postinc1,w,c
  3685  01EF9E  50DE               	movf	postinc2,w,c
  3686  01EFA0  58E6               	subwfb	postinc1,w,c
  3687  01EFA2  A0D8               	btfss	status,0,c
  3688  01EFA4  EFD6  F0F7         	goto	u3421
  3689  01EFA8  EFD8  F0F7         	goto	u3420
  3690  01EFAC                     u3421:
  3691  01EFAC  EFE4  F0F7         	goto	l4018
  3692  01EFB0                     u3420:
  3693  01EFB0                     
  3694                           ; BSR set to: 0
  3695  01EFB0  EE20 F004          	lfsr	2,4
  3696  01EFB4  5164               	movf	findHSV@cr& (0+255),w,b
  3697  01EFB6  26D9               	addwf	fsr2l,f,c
  3698  01EFB8  5165               	movf	(findHSV@cr+1)& (0+255),w,b
  3699  01EFBA  22DA               	addwfc	fsr2h,f,c
  3700  01EFBC  CFDE F078          	movff	postinc2,_findHSV$785
  3701  01EFC0  CFDD F079          	movff	postdec2,_findHSV$785+1
  3702  01EFC4  EFEC  F0F7         	goto	l4020
  3703  01EFC8                     l4018:
  3704                           
  3705                           ; BSR set to: 0
  3706  01EFC8  C064  FFD9         	movff	findHSV@cr,fsr2l
  3707  01EFCC  C065  FFDA         	movff	findHSV@cr+1,fsr2h
  3708  01EFD0  CFDE F078          	movff	postinc2,_findHSV$785
  3709  01EFD4  CFDD F079          	movff	postdec2,_findHSV$785+1
  3710  01EFD8                     l4020:
  3711                           
  3712                           ; BSR set to: 0
  3713  01EFD8  C078  F001         	movff	_findHSV$785,___xxtofl@val
  3714  01EFDC  C079  F002         	movff	_findHSV$785+1,___xxtofl@val+1
  3715  01EFE0  6A03               	clrf	(___xxtofl@val+2)^0,c
  3716  01EFE2  6A04               	clrf	(___xxtofl@val+3)^0,c
  3717  01EFE4  0E00               	movlw	0
  3718  01EFE6  ECE4  F0E9         	call	___xxtofl
  3719  01EFEA  C001  F085         	movff	?___xxtofl,findHSV@minValue
  3720  01EFEE  C002  F086         	movff	?___xxtofl+1,findHSV@minValue+1
  3721  01EFF2  C003  F087         	movff	?___xxtofl+2,findHSV@minValue+2
  3722  01EFF6  C004  F088         	movff	?___xxtofl+3,findHSV@minValue+3
  3723                           
  3724                           ;color.c: 261:     }
  3725  01EFFA  EFB9  F0F9         	goto	l4048
  3726  01EFFE                     l4022:
  3727                           
  3728                           ; BSR set to: 0
  3729                           ;color.c: 263:         maxIndex = 3;
  3730  01EFFE  0E03               	movlw	3
  3731  01F000  6F80               	movwf	findHSV@maxIndex& (0+255),b
  3732  01F002                     
  3733                           ; BSR set to: 0
  3734                           ;color.c: 264:         maxValue = cr->BB;
  3735  01F002  EE20 F004          	lfsr	2,4
  3736  01F006  5164               	movf	findHSV@cr& (0+255),w,b
  3737  01F008  26D9               	addwf	fsr2l,f,c
  3738  01F00A  5165               	movf	(findHSV@cr+1)& (0+255),w,b
  3739  01F00C  22DA               	addwfc	fsr2h,f,c
  3740  01F00E  CFDE F068          	movff	postinc2,??_findHSV
  3741  01F012  CFDD F069          	movff	postdec2,??_findHSV+1
  3742  01F016  C068  F001         	movff	??_findHSV,___xxtofl@val
  3743  01F01A  C069  F002         	movff	??_findHSV+1,___xxtofl@val+1
  3744  01F01E  6A03               	clrf	(___xxtofl@val+2)^0,c
  3745  01F020  6A04               	clrf	(___xxtofl@val+3)^0,c
  3746  01F022  0E00               	movlw	0
  3747  01F024  ECE4  F0E9         	call	___xxtofl
  3748  01F028  C001  F089         	movff	?___xxtofl,findHSV@maxValue
  3749  01F02C  C002  F08A         	movff	?___xxtofl+1,findHSV@maxValue+1
  3750  01F030  C003  F08B         	movff	?___xxtofl+2,findHSV@maxValue+2
  3751  01F034  C004  F08C         	movff	?___xxtofl+3,findHSV@maxValue+3
  3752  01F038                     
  3753                           ;color.c: 265:         minValue = (cr->RR<cr->GG)?cr->RR:cr->GG;
  3754  01F038  0100               	movlb	0	; () banked
  3755  01F03A  EE20 F002          	lfsr	2,2
  3756  01F03E  5164               	movf	findHSV@cr& (0+255),w,b
  3757  01F040  26D9               	addwf	fsr2l,f,c
  3758  01F042  5165               	movf	(findHSV@cr+1)& (0+255),w,b
  3759  01F044  22DA               	addwfc	fsr2h,f,c
  3760  01F046  C064  FFE1         	movff	findHSV@cr,fsr1l
  3761  01F04A  C065  FFE2         	movff	findHSV@cr+1,fsr1h
  3762  01F04E  50DE               	movf	postinc2,w,c
  3763  01F050  5CE6               	subwf	postinc1,w,c
  3764  01F052  50DE               	movf	postinc2,w,c
  3765  01F054  58E6               	subwfb	postinc1,w,c
  3766  01F056  A0D8               	btfss	status,0,c
  3767  01F058  EF30  F0F8         	goto	u3431
  3768  01F05C  EF32  F0F8         	goto	u3430
  3769  01F060                     u3431:
  3770  01F060  EF3E  F0F8         	goto	l4030
  3771  01F064                     u3430:
  3772  01F064                     
  3773                           ; BSR set to: 0
  3774  01F064  EE20 F002          	lfsr	2,2
  3775  01F068  5164               	movf	findHSV@cr& (0+255),w,b
  3776  01F06A  26D9               	addwf	fsr2l,f,c
  3777  01F06C  5165               	movf	(findHSV@cr+1)& (0+255),w,b
  3778  01F06E  22DA               	addwfc	fsr2h,f,c
  3779  01F070  CFDE F07A          	movff	postinc2,_findHSV$786
  3780  01F074  CFDD F07B          	movff	postdec2,_findHSV$786+1
  3781  01F078  EF46  F0F8         	goto	l4032
  3782  01F07C                     l4030:
  3783                           
  3784                           ; BSR set to: 0
  3785  01F07C  C064  FFD9         	movff	findHSV@cr,fsr2l
  3786  01F080  C065  FFDA         	movff	findHSV@cr+1,fsr2h
  3787  01F084  CFDE F07A          	movff	postinc2,_findHSV$786
  3788  01F088  CFDD F07B          	movff	postdec2,_findHSV$786+1
  3789  01F08C                     l4032:
  3790                           
  3791                           ; BSR set to: 0
  3792  01F08C  C07A  F001         	movff	_findHSV$786,___xxtofl@val
  3793  01F090  C07B  F002         	movff	_findHSV$786+1,___xxtofl@val+1
  3794  01F094  6A03               	clrf	(___xxtofl@val+2)^0,c
  3795  01F096  6A04               	clrf	(___xxtofl@val+3)^0,c
  3796  01F098  0E00               	movlw	0
  3797  01F09A  ECE4  F0E9         	call	___xxtofl
  3798  01F09E  C001  F085         	movff	?___xxtofl,findHSV@minValue
  3799  01F0A2  C002  F086         	movff	?___xxtofl+1,findHSV@minValue+1
  3800  01F0A6  C003  F087         	movff	?___xxtofl+2,findHSV@minValue+2
  3801  01F0AA  C004  F088         	movff	?___xxtofl+3,findHSV@minValue+3
  3802  01F0AE  EFB9  F0F9         	goto	l4048
  3803  01F0B2                     l4034:
  3804                           
  3805                           ; BSR set to: 0
  3806  01F0B2  0E00               	movlw	0
  3807  01F0B4  6F81               	movwf	findHSV@h& (0+255),b
  3808  01F0B6  0E00               	movlw	0
  3809  01F0B8  6F82               	movwf	(findHSV@h+1)& (0+255),b
  3810  01F0BA  0E00               	movlw	0
  3811  01F0BC  6F83               	movwf	(findHSV@h+2)& (0+255),b
  3812  01F0BE  0E00               	movlw	0
  3813  01F0C0  6F84               	movwf	(findHSV@h+3)& (0+255),b
  3814                           
  3815                           ;color.c: 271:         break;
  3816  01F0C2  EFD7  F0F9         	goto	l4050
  3817  01F0C6                     l4036:
  3818                           
  3819                           ; BSR set to: 0
  3820  01F0C6  C085  F023         	movff	findHSV@minValue,___flsub@a
  3821  01F0CA  C086  F024         	movff	findHSV@minValue+1,___flsub@a+1
  3822  01F0CE  C087  F025         	movff	findHSV@minValue+2,___flsub@a+2
  3823  01F0D2  C088  F026         	movff	findHSV@minValue+3,___flsub@a+3
  3824  01F0D6  C089  F01F         	movff	findHSV@maxValue,___flsub@b
  3825  01F0DA  C08A  F020         	movff	findHSV@maxValue+1,___flsub@b+1
  3826  01F0DE  C08B  F021         	movff	findHSV@maxValue+2,___flsub@b+2
  3827  01F0E2  C08C  F022         	movff	findHSV@maxValue+3,___flsub@b+3
  3828  01F0E6  ECA8  F0DD         	call	___flsub	;wreg free
  3829  01F0EA  C01F  F02B         	movff	?___flsub,___fldiv@a
  3830  01F0EE  C020  F02C         	movff	?___flsub+1,___fldiv@a+1
  3831  01F0F2  C021  F02D         	movff	?___flsub+2,___fldiv@a+2
  3832  01F0F6  C022  F02E         	movff	?___flsub+3,___fldiv@a+3
  3833  01F0FA  0100               	movlb	0	; () banked
  3834  01F0FC  EE20 F004          	lfsr	2,4
  3835  01F100  5164               	movf	findHSV@cr& (0+255),w,b
  3836  01F102  26D9               	addwf	fsr2l,f,c
  3837  01F104  5165               	movf	(findHSV@cr+1)& (0+255),w,b
  3838  01F106  22DA               	addwfc	fsr2h,f,c
  3839  01F108  CFDE F068          	movff	postinc2,??_findHSV
  3840  01F10C  CFDD F069          	movff	postdec2,??_findHSV+1
  3841  01F110  EE20 F002          	lfsr	2,2
  3842  01F114  5164               	movf	findHSV@cr& (0+255),w,b
  3843  01F116  26D9               	addwf	fsr2l,f,c
  3844  01F118  5165               	movf	(findHSV@cr+1)& (0+255),w,b
  3845  01F11A  22DA               	addwfc	fsr2h,f,c
  3846  01F11C  CFDE F06A          	movff	postinc2,??_findHSV+2
  3847  01F120  CFDD F06B          	movff	postdec2,??_findHSV+3
  3848  01F124  5168               	movf	??_findHSV& (0+255),w,b
  3849  01F126  5F6A               	subwf	(??_findHSV+2)& (0+255),f,b
  3850  01F128  5169               	movf	(??_findHSV+1)& (0+255),w,b
  3851  01F12A  5B6B               	subwfb	(??_findHSV+3)& (0+255),f,b
  3852  01F12C  C06A  F001         	movff	??_findHSV+2,___xxtofl@val
  3853  01F130  C06B  F002         	movff	??_findHSV+3,___xxtofl@val+1
  3854  01F134  6A03               	clrf	(___xxtofl@val+2)^0,c
  3855  01F136  6A04               	clrf	(___xxtofl@val+3)^0,c
  3856  01F138  0E00               	movlw	0
  3857  01F13A  ECE4  F0E9         	call	___xxtofl
  3858  01F13E  C001  F027         	movff	?___xxtofl,___fldiv@b
  3859  01F142  C002  F028         	movff	?___xxtofl+1,___fldiv@b+1
  3860  01F146  C003  F029         	movff	?___xxtofl+2,___fldiv@b+2
  3861  01F14A  C004  F02A         	movff	?___xxtofl+3,___fldiv@b+3
  3862  01F14E  ECB1  F0EC         	call	___fldiv	;wreg free
  3863  01F152  C027  F040         	movff	?___fldiv,___flmul@b
  3864  01F156  C028  F041         	movff	?___fldiv+1,___flmul@b+1
  3865  01F15A  C029  F042         	movff	?___fldiv+2,___flmul@b+2
  3866  01F15E  C02A  F043         	movff	?___fldiv+3,___flmul@b+3
  3867  01F162  0E00               	movlw	0
  3868  01F164  6E44               	movwf	___flmul@a^0,c
  3869  01F166  0E00               	movlw	0
  3870  01F168  6E45               	movwf	(___flmul@a+1)^0,c
  3871  01F16A  0E70               	movlw	112
  3872  01F16C  6E46               	movwf	(___flmul@a+2)^0,c
  3873  01F16E  0E42               	movlw	66
  3874  01F170  6E47               	movwf	(___flmul@a+3)^0,c
  3875  01F172  EC7E  F0EE         	call	___flmul	;wreg free
  3876  01F176  C040  F081         	movff	?___flmul,findHSV@h
  3877  01F17A  C041  F082         	movff	?___flmul+1,findHSV@h+1
  3878  01F17E  C042  F083         	movff	?___flmul+2,findHSV@h+2
  3879  01F182  C043  F084         	movff	?___flmul+3,findHSV@h+3
  3880                           
  3881                           ;color.c: 273:         break;
  3882  01F186  EFD7  F0F9         	goto	l4050
  3883  01F18A                     l4038:
  3884                           
  3885                           ; BSR set to: 0
  3886  01F18A  C085  F023         	movff	findHSV@minValue,___flsub@a
  3887  01F18E  C086  F024         	movff	findHSV@minValue+1,___flsub@a+1
  3888  01F192  C087  F025         	movff	findHSV@minValue+2,___flsub@a+2
  3889  01F196  C088  F026         	movff	findHSV@minValue+3,___flsub@a+3
  3890  01F19A  C089  F01F         	movff	findHSV@maxValue,___flsub@b
  3891  01F19E  C08A  F020         	movff	findHSV@maxValue+1,___flsub@b+1
  3892  01F1A2  C08B  F021         	movff	findHSV@maxValue+2,___flsub@b+2
  3893  01F1A6  C08C  F022         	movff	findHSV@maxValue+3,___flsub@b+3
  3894  01F1AA  ECA8  F0DD         	call	___flsub	;wreg free
  3895  01F1AE  C01F  F02B         	movff	?___flsub,___fldiv@a
  3896  01F1B2  C020  F02C         	movff	?___flsub+1,___fldiv@a+1
  3897  01F1B6  C021  F02D         	movff	?___flsub+2,___fldiv@a+2
  3898  01F1BA  C022  F02E         	movff	?___flsub+3,___fldiv@a+3
  3899  01F1BE  C064  FFD9         	movff	findHSV@cr,fsr2l
  3900  01F1C2  C065  FFDA         	movff	findHSV@cr+1,fsr2h
  3901  01F1C6  CFDE F068          	movff	postinc2,??_findHSV
  3902  01F1CA  CFDD F069          	movff	postdec2,??_findHSV+1
  3903  01F1CE  0100               	movlb	0	; () banked
  3904  01F1D0  EE20 F004          	lfsr	2,4
  3905  01F1D4  5164               	movf	findHSV@cr& (0+255),w,b
  3906  01F1D6  26D9               	addwf	fsr2l,f,c
  3907  01F1D8  5165               	movf	(findHSV@cr+1)& (0+255),w,b
  3908  01F1DA  22DA               	addwfc	fsr2h,f,c
  3909  01F1DC  CFDE F06A          	movff	postinc2,??_findHSV+2
  3910  01F1E0  CFDD F06B          	movff	postdec2,??_findHSV+3
  3911  01F1E4  5168               	movf	??_findHSV& (0+255),w,b
  3912  01F1E6  5F6A               	subwf	(??_findHSV+2)& (0+255),f,b
  3913  01F1E8  5169               	movf	(??_findHSV+1)& (0+255),w,b
  3914  01F1EA  5B6B               	subwfb	(??_findHSV+3)& (0+255),f,b
  3915  01F1EC  C06A  F001         	movff	??_findHSV+2,___xxtofl@val
  3916  01F1F0  C06B  F002         	movff	??_findHSV+3,___xxtofl@val+1
  3917  01F1F4  6A03               	clrf	(___xxtofl@val+2)^0,c
  3918  01F1F6  6A04               	clrf	(___xxtofl@val+3)^0,c
  3919  01F1F8  0E00               	movlw	0
  3920  01F1FA  ECE4  F0E9         	call	___xxtofl
  3921  01F1FE  C001  F027         	movff	?___xxtofl,___fldiv@b
  3922  01F202  C002  F028         	movff	?___xxtofl+1,___fldiv@b+1
  3923  01F206  C003  F029         	movff	?___xxtofl+2,___fldiv@b+2
  3924  01F20A  C004  F02A         	movff	?___xxtofl+3,___fldiv@b+3
  3925  01F20E  ECB1  F0EC         	call	___fldiv	;wreg free
  3926  01F212  C027  F07C         	movff	?___fldiv,_findHSV$2549
  3927  01F216  C028  F07D         	movff	?___fldiv+1,_findHSV$2549+1
  3928  01F21A  C029  F07E         	movff	?___fldiv+2,_findHSV$2549+2
  3929  01F21E  C02A  F07F         	movff	?___fldiv+3,_findHSV$2549+3
  3930  01F222  0E00               	movlw	0
  3931  01F224  6E13               	movwf	___fladd@a^0,c
  3932  01F226  0E00               	movlw	0
  3933  01F228  6E14               	movwf	(___fladd@a+1)^0,c
  3934  01F22A  0E00               	movlw	0
  3935  01F22C  6E15               	movwf	(___fladd@a+2)^0,c
  3936  01F22E  0E40               	movlw	64
  3937  01F230  6E16               	movwf	(___fladd@a+3)^0,c
  3938  01F232  C07C  F00F         	movff	_findHSV$2549,___fladd@b
  3939  01F236  C07D  F010         	movff	_findHSV$2549+1,___fladd@b+1
  3940  01F23A  C07E  F011         	movff	_findHSV$2549+2,___fladd@b+2
  3941  01F23E  C07F  F012         	movff	_findHSV$2549+3,___fladd@b+3
  3942  01F242  EC93  F0F0         	call	___fladd	;wreg free
  3943  01F246  C00F  F040         	movff	?___fladd,___flmul@b
  3944  01F24A  C010  F041         	movff	?___fladd+1,___flmul@b+1
  3945  01F24E  C011  F042         	movff	?___fladd+2,___flmul@b+2
  3946  01F252  C012  F043         	movff	?___fladd+3,___flmul@b+3
  3947  01F256  0E00               	movlw	0
  3948  01F258  6E44               	movwf	___flmul@a^0,c
  3949  01F25A  0E00               	movlw	0
  3950  01F25C  6E45               	movwf	(___flmul@a+1)^0,c
  3951  01F25E  0E70               	movlw	112
  3952  01F260  6E46               	movwf	(___flmul@a+2)^0,c
  3953  01F262  0E42               	movlw	66
  3954  01F264  6E47               	movwf	(___flmul@a+3)^0,c
  3955  01F266  EC7E  F0EE         	call	___flmul	;wreg free
  3956  01F26A  C040  F081         	movff	?___flmul,findHSV@h
  3957  01F26E  C041  F082         	movff	?___flmul+1,findHSV@h+1
  3958  01F272  C042  F083         	movff	?___flmul+2,findHSV@h+2
  3959  01F276  C043  F084         	movff	?___flmul+3,findHSV@h+3
  3960                           
  3961                           ;color.c: 275:         break;
  3962  01F27A  EFD7  F0F9         	goto	l4050
  3963  01F27E                     l4042:
  3964                           
  3965                           ; BSR set to: 0
  3966  01F27E  C085  F023         	movff	findHSV@minValue,___flsub@a
  3967  01F282  C086  F024         	movff	findHSV@minValue+1,___flsub@a+1
  3968  01F286  C087  F025         	movff	findHSV@minValue+2,___flsub@a+2
  3969  01F28A  C088  F026         	movff	findHSV@minValue+3,___flsub@a+3
  3970  01F28E  C089  F01F         	movff	findHSV@maxValue,___flsub@b
  3971  01F292  C08A  F020         	movff	findHSV@maxValue+1,___flsub@b+1
  3972  01F296  C08B  F021         	movff	findHSV@maxValue+2,___flsub@b+2
  3973  01F29A  C08C  F022         	movff	findHSV@maxValue+3,___flsub@b+3
  3974  01F29E  ECA8  F0DD         	call	___flsub	;wreg free
  3975  01F2A2  C01F  F02B         	movff	?___flsub,___fldiv@a
  3976  01F2A6  C020  F02C         	movff	?___flsub+1,___fldiv@a+1
  3977  01F2AA  C021  F02D         	movff	?___flsub+2,___fldiv@a+2
  3978  01F2AE  C022  F02E         	movff	?___flsub+3,___fldiv@a+3
  3979  01F2B2  0100               	movlb	0	; () banked
  3980  01F2B4  EE20 F002          	lfsr	2,2
  3981  01F2B8  5164               	movf	findHSV@cr& (0+255),w,b
  3982  01F2BA  26D9               	addwf	fsr2l,f,c
  3983  01F2BC  5165               	movf	(findHSV@cr+1)& (0+255),w,b
  3984  01F2BE  22DA               	addwfc	fsr2h,f,c
  3985  01F2C0  CFDE F068          	movff	postinc2,??_findHSV
  3986  01F2C4  CFDD F069          	movff	postdec2,??_findHSV+1
  3987  01F2C8  C064  FFD9         	movff	findHSV@cr,fsr2l
  3988  01F2CC  C065  FFDA         	movff	findHSV@cr+1,fsr2h
  3989  01F2D0  CFDE F06A          	movff	postinc2,??_findHSV+2
  3990  01F2D4  CFDD F06B          	movff	postdec2,??_findHSV+3
  3991  01F2D8  5168               	movf	??_findHSV& (0+255),w,b
  3992  01F2DA  5F6A               	subwf	(??_findHSV+2)& (0+255),f,b
  3993  01F2DC  5169               	movf	(??_findHSV+1)& (0+255),w,b
  3994  01F2DE  5B6B               	subwfb	(??_findHSV+3)& (0+255),f,b
  3995  01F2E0  C06A  F001         	movff	??_findHSV+2,___xxtofl@val
  3996  01F2E4  C06B  F002         	movff	??_findHSV+3,___xxtofl@val+1
  3997  01F2E8  6A03               	clrf	(___xxtofl@val+2)^0,c
  3998  01F2EA  6A04               	clrf	(___xxtofl@val+3)^0,c
  3999  01F2EC  0E00               	movlw	0
  4000  01F2EE  ECE4  F0E9         	call	___xxtofl
  4001  01F2F2  C001  F027         	movff	?___xxtofl,___fldiv@b
  4002  01F2F6  C002  F028         	movff	?___xxtofl+1,___fldiv@b+1
  4003  01F2FA  C003  F029         	movff	?___xxtofl+2,___fldiv@b+2
  4004  01F2FE  C004  F02A         	movff	?___xxtofl+3,___fldiv@b+3
  4005  01F302  ECB1  F0EC         	call	___fldiv	;wreg free
  4006  01F306  C027  F07C         	movff	?___fldiv,_findHSV$2549
  4007  01F30A  C028  F07D         	movff	?___fldiv+1,_findHSV$2549+1
  4008  01F30E  C029  F07E         	movff	?___fldiv+2,_findHSV$2549+2
  4009  01F312  C02A  F07F         	movff	?___fldiv+3,_findHSV$2549+3
  4010  01F316  0E00               	movlw	0
  4011  01F318  6E13               	movwf	___fladd@a^0,c
  4012  01F31A  0E00               	movlw	0
  4013  01F31C  6E14               	movwf	(___fladd@a+1)^0,c
  4014  01F31E  0E80               	movlw	128
  4015  01F320  6E15               	movwf	(___fladd@a+2)^0,c
  4016  01F322  0E40               	movlw	64
  4017  01F324  6E16               	movwf	(___fladd@a+3)^0,c
  4018  01F326  C07C  F00F         	movff	_findHSV$2549,___fladd@b
  4019  01F32A  C07D  F010         	movff	_findHSV$2549+1,___fladd@b+1
  4020  01F32E  C07E  F011         	movff	_findHSV$2549+2,___fladd@b+2
  4021  01F332  C07F  F012         	movff	_findHSV$2549+3,___fladd@b+3
  4022  01F336  EC93  F0F0         	call	___fladd	;wreg free
  4023  01F33A  C00F  F040         	movff	?___fladd,___flmul@b
  4024  01F33E  C010  F041         	movff	?___fladd+1,___flmul@b+1
  4025  01F342  C011  F042         	movff	?___fladd+2,___flmul@b+2
  4026  01F346  C012  F043         	movff	?___fladd+3,___flmul@b+3
  4027  01F34A  0E00               	movlw	0
  4028  01F34C  6E44               	movwf	___flmul@a^0,c
  4029  01F34E  0E00               	movlw	0
  4030  01F350  6E45               	movwf	(___flmul@a+1)^0,c
  4031  01F352  0E70               	movlw	112
  4032  01F354  6E46               	movwf	(___flmul@a+2)^0,c
  4033  01F356  0E42               	movlw	66
  4034  01F358  6E47               	movwf	(___flmul@a+3)^0,c
  4035  01F35A  EC7E  F0EE         	call	___flmul	;wreg free
  4036  01F35E  C040  F081         	movff	?___flmul,findHSV@h
  4037  01F362  C041  F082         	movff	?___flmul+1,findHSV@h+1
  4038  01F366  C042  F083         	movff	?___flmul+2,findHSV@h+2
  4039  01F36A  C043  F084         	movff	?___flmul+3,findHSV@h+3
  4040                           
  4041                           ;color.c: 277:         break;
  4042  01F36E  EFD7  F0F9         	goto	l4050
  4043  01F372                     l4048:
  4044  01F372  0100               	movlb	0	; () banked
  4045  01F374  5180               	movf	findHSV@maxIndex& (0+255),w,b
  4046  01F376  6F68               	movwf	??_findHSV& (0+255),b
  4047  01F378  6B69               	clrf	(??_findHSV+1)& (0+255),b
  4048                           
  4049                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4050                           ; Switch size 1, requested type "simple"
  4051                           ; Number of cases is 1, Range of values is 0 to 0
  4052                           ; switch strategies available:
  4053                           ; Name         Instructions Cycles
  4054                           ; simple_byte            4     3 (average)
  4055                           ;	Chosen strategy is simple_byte
  4056  01F37A  5169               	movf	(??_findHSV+1)& (0+255),w,b
  4057  01F37C  0A00               	xorlw	0	; case 0
  4058  01F37E  B4D8               	btfsc	status,2,c
  4059  01F380  EFC4  F0F9         	goto	l4646
  4060  01F384  EFD7  F0F9         	goto	l4050
  4061  01F388                     l4646:
  4062                           
  4063                           ; BSR set to: 0
  4064                           ; Switch size 1, requested type "simple"
  4065                           ; Number of cases is 4, Range of values is 0 to 3
  4066                           ; switch strategies available:
  4067                           ; Name         Instructions Cycles
  4068                           ; simple_byte           13     7 (average)
  4069                           ;	Chosen strategy is simple_byte
  4070  01F388  5168               	movf	??_findHSV& (0+255),w,b
  4071  01F38A  0A00               	xorlw	0	; case 0
  4072  01F38C  B4D8               	btfsc	status,2,c
  4073  01F38E  EF59  F0F8         	goto	l4034
  4074  01F392  0A01               	xorlw	1	; case 1
  4075  01F394  B4D8               	btfsc	status,2,c
  4076  01F396  EF63  F0F8         	goto	l4036
  4077  01F39A  0A03               	xorlw	3	; case 2
  4078  01F39C  B4D8               	btfsc	status,2,c
  4079  01F39E  EFC5  F0F8         	goto	l4038
  4080  01F3A2  0A01               	xorlw	1	; case 3
  4081  01F3A4  B4D8               	btfsc	status,2,c
  4082  01F3A6  EF3F  F0F9         	goto	l4042
  4083  01F3AA  EFD7  F0F9         	goto	l4050
  4084  01F3AE                     l4050:
  4085                           
  4086                           ;color.c: 279:     if (h<0.0){
  4087  01F3AE  0100               	movlb	0	; () banked
  4088  01F3B0  BF84               	btfsc	(findHSV@h+3)& (0+255),7,b
  4089  01F3B2  EFDF  F0F9         	goto	u3440
  4090  01F3B6  EFDD  F0F9         	goto	u3441
  4091  01F3BA                     u3441:
  4092  01F3BA  EFF9  F0F9         	goto	l4054
  4093  01F3BE                     u3440:
  4094  01F3BE                     
  4095                           ; BSR set to: 0
  4096                           ;color.c: 280:         h += 360;
  4097  01F3BE  C081  F00F         	movff	findHSV@h,___fladd@b
  4098  01F3C2  C082  F010         	movff	findHSV@h+1,___fladd@b+1
  4099  01F3C6  C083  F011         	movff	findHSV@h+2,___fladd@b+2
  4100  01F3CA  C084  F012         	movff	findHSV@h+3,___fladd@b+3
  4101  01F3CE  0E00               	movlw	0
  4102  01F3D0  6E13               	movwf	___fladd@a^0,c
  4103  01F3D2  0E00               	movlw	0
  4104  01F3D4  6E14               	movwf	(___fladd@a+1)^0,c
  4105  01F3D6  0EB4               	movlw	180
  4106  01F3D8  6E15               	movwf	(___fladd@a+2)^0,c
  4107  01F3DA  0E43               	movlw	67
  4108  01F3DC  6E16               	movwf	(___fladd@a+3)^0,c
  4109  01F3DE  EC93  F0F0         	call	___fladd	;wreg free
  4110  01F3E2  C00F  F081         	movff	?___fladd,findHSV@h
  4111  01F3E6  C010  F082         	movff	?___fladd+1,findHSV@h+1
  4112  01F3EA  C011  F083         	movff	?___fladd+2,findHSV@h+2
  4113  01F3EE  C012  F084         	movff	?___fladd+3,findHSV@h+3
  4114  01F3F2                     l4054:
  4115                           
  4116                           ;color.c: 282:     double s;;color.c: 283:     unsigned int ss;;color.c: 284:     s = (m
      +                          axIndex==0)? 0:(maxValue-minValue)/maxValue;
  4117  01F3F2  0100               	movlb	0	; () banked
  4118  01F3F4  5180               	movf	findHSV@maxIndex& (0+255),w,b
  4119  01F3F6  B4D8               	btfsc	status,2,c
  4120  01F3F8  EF00  F0FA         	goto	u3451
  4121  01F3FC  EF02  F0FA         	goto	u3450
  4122  01F400                     u3451:
  4123  01F400  EF30  F0FA         	goto	l4058
  4124  01F404                     u3450:
  4125  01F404                     
  4126                           ; BSR set to: 0
  4127  01F404  C085  F023         	movff	findHSV@minValue,___flsub@a
  4128  01F408  C086  F024         	movff	findHSV@minValue+1,___flsub@a+1
  4129  01F40C  C087  F025         	movff	findHSV@minValue+2,___flsub@a+2
  4130  01F410  C088  F026         	movff	findHSV@minValue+3,___flsub@a+3
  4131  01F414  C089  F01F         	movff	findHSV@maxValue,___flsub@b
  4132  01F418  C08A  F020         	movff	findHSV@maxValue+1,___flsub@b+1
  4133  01F41C  C08B  F021         	movff	findHSV@maxValue+2,___flsub@b+2
  4134  01F420  C08C  F022         	movff	findHSV@maxValue+3,___flsub@b+3
  4135  01F424  ECA8  F0DD         	call	___flsub	;wreg free
  4136  01F428  C01F  F027         	movff	?___flsub,___fldiv@b
  4137  01F42C  C020  F028         	movff	?___flsub+1,___fldiv@b+1
  4138  01F430  C021  F029         	movff	?___flsub+2,___fldiv@b+2
  4139  01F434  C022  F02A         	movff	?___flsub+3,___fldiv@b+3
  4140  01F438  C089  F02B         	movff	findHSV@maxValue,___fldiv@a
  4141  01F43C  C08A  F02C         	movff	findHSV@maxValue+1,___fldiv@a+1
  4142  01F440  C08B  F02D         	movff	findHSV@maxValue+2,___fldiv@a+2
  4143  01F444  C08C  F02E         	movff	findHSV@maxValue+3,___fldiv@a+3
  4144  01F448  ECB1  F0EC         	call	___fldiv	;wreg free
  4145  01F44C  C027  F072         	movff	?___fldiv,findHSV@s
  4146  01F450  C028  F073         	movff	?___fldiv+1,findHSV@s+1
  4147  01F454  C029  F074         	movff	?___fldiv+2,findHSV@s+2
  4148  01F458  C02A  F075         	movff	?___fldiv+3,findHSV@s+3
  4149  01F45C  EF38  F0FA         	goto	l4060
  4150  01F460                     l4058:
  4151                           
  4152                           ; BSR set to: 0
  4153  01F460  0E00               	movlw	0
  4154  01F462  6F72               	movwf	findHSV@s& (0+255),b
  4155  01F464  0E00               	movlw	0
  4156  01F466  6F73               	movwf	(findHSV@s+1)& (0+255),b
  4157  01F468  0E00               	movlw	0
  4158  01F46A  6F74               	movwf	(findHSV@s+2)& (0+255),b
  4159  01F46C  0E00               	movlw	0
  4160  01F46E  6F75               	movwf	(findHSV@s+3)& (0+255),b
  4161  01F470                     l4060:
  4162                           
  4163                           ;color.c: 285:     ss = 100*s;
  4164  01F470  0E00               	movlw	0
  4165  01F472  6E44               	movwf	___flmul@a^0,c
  4166  01F474  0E00               	movlw	0
  4167  01F476  6E45               	movwf	(___flmul@a+1)^0,c
  4168  01F478  0EC8               	movlw	200
  4169  01F47A  6E46               	movwf	(___flmul@a+2)^0,c
  4170  01F47C  0E42               	movlw	66
  4171  01F47E  6E47               	movwf	(___flmul@a+3)^0,c
  4172  01F480  C072  F040         	movff	findHSV@s,___flmul@b
  4173  01F484  C073  F041         	movff	findHSV@s+1,___flmul@b+1
  4174  01F488  C074  F042         	movff	findHSV@s+2,___flmul@b+2
  4175  01F48C  C075  F043         	movff	findHSV@s+3,___flmul@b+3
  4176  01F490  EC7E  F0EE         	call	___flmul	;wreg free
  4177  01F494  C040  F059         	movff	?___flmul,___fltol@f1
  4178  01F498  C041  F05A         	movff	?___flmul+1,___fltol@f1+1
  4179  01F49C  C042  F05B         	movff	?___flmul+2,___fltol@f1+2
  4180  01F4A0  C043  F05C         	movff	?___flmul+3,___fltol@f1+3
  4181  01F4A4  ECE4  F0E5         	call	___fltol	;wreg free
  4182  01F4A8  C059  F070         	movff	?___fltol,findHSV@ss
  4183  01F4AC  C05A  F071         	movff	?___fltol+1,findHSV@ss+1
  4184  01F4B0                     
  4185                           ;color.c: 286:     double v = maxValue;
  4186  01F4B0  C089  F06C         	movff	findHSV@maxValue,findHSV@v
  4187  01F4B4  C08A  F06D         	movff	findHSV@maxValue+1,findHSV@v+1
  4188  01F4B8  C08B  F06E         	movff	findHSV@maxValue+2,findHSV@v+2
  4189  01F4BC  C08C  F06F         	movff	findHSV@maxValue+3,findHSV@v+3
  4190  01F4C0                     
  4191                           ;color.c: 288:     hr->RR = h;
  4192  01F4C0  C081  F059         	movff	findHSV@h,___fltol@f1
  4193  01F4C4  C082  F05A         	movff	findHSV@h+1,___fltol@f1+1
  4194  01F4C8  C083  F05B         	movff	findHSV@h+2,___fltol@f1+2
  4195  01F4CC  C084  F05C         	movff	findHSV@h+3,___fltol@f1+3
  4196  01F4D0  ECE4  F0E5         	call	___fltol	;wreg free
  4197  01F4D4  C066  FFD9         	movff	findHSV@hr,fsr2l
  4198  01F4D8  C067  FFDA         	movff	findHSV@hr+1,fsr2h
  4199  01F4DC  C059  FFDE         	movff	?___fltol,postinc2
  4200  01F4E0  C05A  FFDD         	movff	?___fltol+1,postdec2
  4201  01F4E4                     
  4202                           ;color.c: 289:     hr->GG = ss;
  4203  01F4E4  0100               	movlb	0	; () banked
  4204  01F4E6  EE20 F002          	lfsr	2,2
  4205  01F4EA  5166               	movf	findHSV@hr& (0+255),w,b
  4206  01F4EC  26D9               	addwf	fsr2l,f,c
  4207  01F4EE  5167               	movf	(findHSV@hr+1)& (0+255),w,b
  4208  01F4F0  22DA               	addwfc	fsr2h,f,c
  4209  01F4F2  C070  FFDE         	movff	findHSV@ss,postinc2
  4210  01F4F6  C071  FFDD         	movff	findHSV@ss+1,postdec2
  4211  01F4FA                     
  4212                           ; BSR set to: 0
  4213                           ;color.c: 290:     hr->BB = v;
  4214  01F4FA  C06C  F059         	movff	findHSV@v,___fltol@f1
  4215  01F4FE  C06D  F05A         	movff	findHSV@v+1,___fltol@f1+1
  4216  01F502  C06E  F05B         	movff	findHSV@v+2,___fltol@f1+2
  4217  01F506  C06F  F05C         	movff	findHSV@v+3,___fltol@f1+3
  4218  01F50A  ECE4  F0E5         	call	___fltol	;wreg free
  4219  01F50E  0100               	movlb	0	; () banked
  4220  01F510  EE20 F004          	lfsr	2,4
  4221  01F514  5166               	movf	findHSV@hr& (0+255),w,b
  4222  01F516  26D9               	addwf	fsr2l,f,c
  4223  01F518  5167               	movf	(findHSV@hr+1)& (0+255),w,b
  4224  01F51A  22DA               	addwfc	fsr2h,f,c
  4225  01F51C  C059  FFDE         	movff	?___fltol,postinc2
  4226  01F520  C05A  FFDD         	movff	?___fltol+1,postdec2
  4227  01F524                     
  4228                           ; BSR set to: 0
  4229  01F524  0012               	return		;funcret
  4230  01F526                     __end_of_findHSV:
  4231                           	callstack 0
  4232                           
  4233 ;; *************** function _convertHSV *****************
  4234 ;; Defined at:
  4235 ;;		line 172 in file "color.c"
  4236 ;; Parameters:    Size  Location     Type
  4237 ;;  sc              2    4[BANK0 ] PTR struct storecolor
  4238 ;;		 -> main@sc(120), 
  4239 ;;  sh              2    6[BANK0 ] PTR struct storecolor
  4240 ;;		 -> main@sh(120), 
  4241 ;; Auto vars:     Size  Location     Type
  4242 ;;  h               4   37[BANK0 ] PTR struct storecolor
  4243 ;;  s               4   22[BANK0 ] PTR struct storecolor
  4244 ;;  v               4   16[BANK0 ] PTR struct storecolor
  4245 ;;  ss              2   20[BANK0 ] unsigned int 
  4246 ;;  maxIndex        1   36[BANK0 ] unsigned char 
  4247 ;;  maxValue        4   45[BANK0 ] unsigned char 
  4248 ;;  minValue        4   41[BANK0 ] unsigned char 
  4249 ;;  i               1   49[BANK0 ] unsigned char 
  4250 ;; Return value:  Size  Location     Type
  4251 ;;                  1    wreg      void 
  4252 ;; Registers used:
  4253 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4254 ;; Tracked objects:
  4255 ;;		On entry : 0/0
  4256 ;;		On exit  : 0/0
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4259 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4260 ;;      Locals:         0      34       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4261 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4262 ;;      Totals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4263 ;;Total ram usage:       46 bytes
  4264 ;; Hardware stack levels used: 1
  4265 ;; Hardware stack levels required when called: 2
  4266 ;; This function calls:
  4267 ;;		___fladd
  4268 ;;		___fldiv
  4269 ;;		___flmul
  4270 ;;		___flsub
  4271 ;;		___fltol
  4272 ;;		___xxtofl
  4273 ;; This function is called by:
  4274 ;;		_main
  4275 ;; This function uses a non-reentrant model
  4276 ;;
  4277                           
  4278                           	psect	text9
  4279  01F526                     __ptext9:
  4280                           	callstack 0
  4281  01F526                     _convertHSV:
  4282                           	callstack 28
  4283  01F526                     
  4284                           ;color.c: 173:     double minValue, maxValue;;color.c: 174:     char i;;color.c: 175:   
      +                            for (i=0;i<10;i++){
  4285  01F526  0E00               	movlw	0
  4286  01F528  0100               	movlb	0	; () banked
  4287  01F52A  6F91               	movwf	convertHSV@i& (0+255),b
  4288  01F52C                     l4190:
  4289                           
  4290                           ; BSR set to: 0
  4291                           ;color.c: 176:     unsigned char maxIndex;;color.c: 179:     if ((sc->R[i]==sc->G[i])&&(
      +                          sc->R[i]==sc->B[i])){
  4292  01F52C  5191               	movf	convertHSV@i& (0+255),w,b
  4293  01F52E  0D02               	mullw	2
  4294  01F530  C064  F068         	movff	convertHSV@sc,??_convertHSV
  4295  01F534  C065  F069         	movff	convertHSV@sc+1,??_convertHSV+1
  4296  01F538  50F3               	movf	243,w,c
  4297  01F53A  2768               	addwf	??_convertHSV& (0+255),f,b
  4298  01F53C  50F4               	movf	244,w,c
  4299  01F53E  2369               	addwfc	(??_convertHSV+1)& (0+255),f,b
  4300  01F540  0E1E               	movlw	30
  4301  01F542  2568               	addwf	??_convertHSV& (0+255),w,b
  4302  01F544  6ED9               	movwf	fsr2l,c
  4303  01F546  0E00               	movlw	0
  4304  01F548  2169               	addwfc	(??_convertHSV+1)& (0+255),w,b
  4305  01F54A  6EDA               	movwf	fsr2h,c
  4306  01F54C  5191               	movf	convertHSV@i& (0+255),w,b
  4307  01F54E  0D02               	mullw	2
  4308  01F550  CFF3 F06C          	movff	prodl,??_convertHSV+4
  4309  01F554  CFF4 F06D          	movff	prodh,??_convertHSV+5
  4310  01F558  516C               	movf	(??_convertHSV+4)& (0+255),w,b
  4311  01F55A  2564               	addwf	convertHSV@sc& (0+255),w,b
  4312  01F55C  6EE1               	movwf	fsr1l,c
  4313  01F55E  516D               	movf	(??_convertHSV+5)& (0+255),w,b
  4314  01F560  2165               	addwfc	(convertHSV@sc+1)& (0+255),w,b
  4315  01F562  6EE2               	movwf	fsr1h,c
  4316  01F564  50DE               	movf	postinc2,w,c
  4317  01F566  18E6               	xorwf	postinc1,w,c
  4318  01F568  E107               	bnz	u3511
  4319  01F56A  50DE               	movf	postinc2,w,c
  4320  01F56C  18E6               	xorwf	postinc1,w,c
  4321  01F56E  A4D8               	btfss	status,2,c
  4322  01F570  EFBC  F0FA         	goto	u3511
  4323  01F574  EFBE  F0FA         	goto	u3510
  4324  01F578                     u3511:
  4325  01F578  EF2D  F0FB         	goto	l4200
  4326  01F57C                     u3510:
  4327  01F57C                     
  4328                           ; BSR set to: 0
  4329  01F57C  5191               	movf	convertHSV@i& (0+255),w,b
  4330  01F57E  0D02               	mullw	2
  4331  01F580  C064  F068         	movff	convertHSV@sc,??_convertHSV
  4332  01F584  C065  F069         	movff	convertHSV@sc+1,??_convertHSV+1
  4333  01F588  50F3               	movf	243,w,c
  4334  01F58A  2768               	addwf	??_convertHSV& (0+255),f,b
  4335  01F58C  50F4               	movf	244,w,c
  4336  01F58E  2369               	addwfc	(??_convertHSV+1)& (0+255),f,b
  4337  01F590  0E3C               	movlw	60
  4338  01F592  2568               	addwf	??_convertHSV& (0+255),w,b
  4339  01F594  6ED9               	movwf	fsr2l,c
  4340  01F596  0E00               	movlw	0
  4341  01F598  2169               	addwfc	(??_convertHSV+1)& (0+255),w,b
  4342  01F59A  6EDA               	movwf	fsr2h,c
  4343  01F59C  5191               	movf	convertHSV@i& (0+255),w,b
  4344  01F59E  0D02               	mullw	2
  4345  01F5A0  CFF3 F06C          	movff	prodl,??_convertHSV+4
  4346  01F5A4  CFF4 F06D          	movff	prodh,??_convertHSV+5
  4347  01F5A8  516C               	movf	(??_convertHSV+4)& (0+255),w,b
  4348  01F5AA  2564               	addwf	convertHSV@sc& (0+255),w,b
  4349  01F5AC  6EE1               	movwf	fsr1l,c
  4350  01F5AE  516D               	movf	(??_convertHSV+5)& (0+255),w,b
  4351  01F5B0  2165               	addwfc	(convertHSV@sc+1)& (0+255),w,b
  4352  01F5B2  6EE2               	movwf	fsr1h,c
  4353  01F5B4  50DE               	movf	postinc2,w,c
  4354  01F5B6  18E6               	xorwf	postinc1,w,c
  4355  01F5B8  E107               	bnz	u3521
  4356  01F5BA  50DE               	movf	postinc2,w,c
  4357  01F5BC  18E6               	xorwf	postinc1,w,c
  4358  01F5BE  A4D8               	btfss	status,2,c
  4359  01F5C0  EFE4  F0FA         	goto	u3521
  4360  01F5C4  EFE6  F0FA         	goto	u3520
  4361  01F5C8                     u3521:
  4362  01F5C8  EF2D  F0FB         	goto	l4200
  4363  01F5CC                     u3520:
  4364  01F5CC                     
  4365                           ; BSR set to: 0
  4366                           ;color.c: 180:         maxIndex = 0;
  4367  01F5CC  0E00               	movlw	0
  4368  01F5CE  6F84               	movwf	convertHSV@maxIndex& (0+255),b
  4369  01F5D0                     
  4370                           ; BSR set to: 0
  4371                           ;color.c: 181:         maxValue = sc->R[i];
  4372  01F5D0  5191               	movf	convertHSV@i& (0+255),w,b
  4373  01F5D2  0D02               	mullw	2
  4374  01F5D4  CFF3 F068          	movff	prodl,??_convertHSV
  4375  01F5D8  CFF4 F069          	movff	prodh,??_convertHSV+1
  4376  01F5DC  5168               	movf	??_convertHSV& (0+255),w,b
  4377  01F5DE  2564               	addwf	convertHSV@sc& (0+255),w,b
  4378  01F5E0  6ED9               	movwf	fsr2l,c
  4379  01F5E2  5169               	movf	(??_convertHSV+1)& (0+255),w,b
  4380  01F5E4  2165               	addwfc	(convertHSV@sc+1)& (0+255),w,b
  4381  01F5E6  6EDA               	movwf	fsr2h,c
  4382  01F5E8  CFDE F06A          	movff	postinc2,??_convertHSV+2
  4383  01F5EC  CFDD F06B          	movff	postdec2,??_convertHSV+3
  4384  01F5F0  C06A  F001         	movff	??_convertHSV+2,___xxtofl@val
  4385  01F5F4  C06B  F002         	movff	??_convertHSV+3,___xxtofl@val+1
  4386  01F5F8  6A03               	clrf	(___xxtofl@val+2)^0,c
  4387  01F5FA  6A04               	clrf	(___xxtofl@val+3)^0,c
  4388  01F5FC  0E00               	movlw	0
  4389  01F5FE  ECE4  F0E9         	call	___xxtofl
  4390  01F602  C001  F08D         	movff	?___xxtofl,convertHSV@maxValue
  4391  01F606  C002  F08E         	movff	?___xxtofl+1,convertHSV@maxValue+1
  4392  01F60A  C003  F08F         	movff	?___xxtofl+2,convertHSV@maxValue+2
  4393  01F60E  C004  F090         	movff	?___xxtofl+3,convertHSV@maxValue+3
  4394  01F612                     
  4395                           ;color.c: 182:         minValue = sc->R[i];
  4396  01F612  0100               	movlb	0	; () banked
  4397  01F614  5191               	movf	convertHSV@i& (0+255),w,b
  4398  01F616  0D02               	mullw	2
  4399  01F618  CFF3 F068          	movff	prodl,??_convertHSV
  4400  01F61C  CFF4 F069          	movff	prodh,??_convertHSV+1
  4401  01F620  5168               	movf	??_convertHSV& (0+255),w,b
  4402  01F622  2564               	addwf	convertHSV@sc& (0+255),w,b
  4403  01F624  6ED9               	movwf	fsr2l,c
  4404  01F626  5169               	movf	(??_convertHSV+1)& (0+255),w,b
  4405  01F628  2165               	addwfc	(convertHSV@sc+1)& (0+255),w,b
  4406  01F62A  6EDA               	movwf	fsr2h,c
  4407  01F62C  CFDE F06A          	movff	postinc2,??_convertHSV+2
  4408  01F630  CFDD F06B          	movff	postdec2,??_convertHSV+3
  4409  01F634  C06A  F001         	movff	??_convertHSV+2,___xxtofl@val
  4410  01F638  C06B  F002         	movff	??_convertHSV+3,___xxtofl@val+1
  4411  01F63C  6A03               	clrf	(___xxtofl@val+2)^0,c
  4412  01F63E  6A04               	clrf	(___xxtofl@val+3)^0,c
  4413  01F640  0E00               	movlw	0
  4414  01F642  ECE4  F0E9         	call	___xxtofl
  4415  01F646  C001  F089         	movff	?___xxtofl,convertHSV@minValue
  4416  01F64A  C002  F08A         	movff	?___xxtofl+1,convertHSV@minValue+1
  4417  01F64E  C003  F08B         	movff	?___xxtofl+2,convertHSV@minValue+2
  4418  01F652  C004  F08C         	movff	?___xxtofl+3,convertHSV@minValue+3
  4419                           
  4420                           ;color.c: 183:     }
  4421  01F656  EF01  F0FF         	goto	l4258
  4422  01F65A                     l4200:
  4423                           
  4424                           ; BSR set to: 0
  4425  01F65A  5191               	movf	convertHSV@i& (0+255),w,b
  4426  01F65C  0D02               	mullw	2
  4427  01F65E  C064  F068         	movff	convertHSV@sc,??_convertHSV
  4428  01F662  C065  F069         	movff	convertHSV@sc+1,??_convertHSV+1
  4429  01F666  50F3               	movf	243,w,c
  4430  01F668  2768               	addwf	??_convertHSV& (0+255),f,b
  4431  01F66A  50F4               	movf	244,w,c
  4432  01F66C  2369               	addwfc	(??_convertHSV+1)& (0+255),f,b
  4433  01F66E  0E1E               	movlw	30
  4434  01F670  2568               	addwf	??_convertHSV& (0+255),w,b
  4435  01F672  6ED9               	movwf	fsr2l,c
  4436  01F674  0E00               	movlw	0
  4437  01F676  2169               	addwfc	(??_convertHSV+1)& (0+255),w,b
  4438  01F678  6EDA               	movwf	fsr2h,c
  4439  01F67A  5191               	movf	convertHSV@i& (0+255),w,b
  4440  01F67C  0D02               	mullw	2
  4441  01F67E  CFF3 F06C          	movff	prodl,??_convertHSV+4
  4442  01F682  CFF4 F06D          	movff	prodh,??_convertHSV+5
  4443  01F686  516C               	movf	(??_convertHSV+4)& (0+255),w,b
  4444  01F688  2564               	addwf	convertHSV@sc& (0+255),w,b
  4445  01F68A  6EE1               	movwf	fsr1l,c
  4446  01F68C  516D               	movf	(??_convertHSV+5)& (0+255),w,b
  4447  01F68E  2165               	addwfc	(convertHSV@sc+1)& (0+255),w,b
  4448  01F690  6EE2               	movwf	fsr1h,c
  4449  01F692  50DE               	movf	postinc2,w,c
  4450  01F694  5CE6               	subwf	postinc1,w,c
  4451  01F696  50DE               	movf	postinc2,w,c
  4452  01F698  58E6               	subwfb	postinc1,w,c
  4453  01F69A  A0D8               	btfss	status,0,c
  4454  01F69C  EF52  F0FB         	goto	u3531
  4455  01F6A0  EF54  F0FB         	goto	u3530
  4456  01F6A4                     u3531:
  4457  01F6A4  EF07  F0FC         	goto	l4216
  4458  01F6A8                     u3530:
  4459  01F6A8                     
  4460                           ; BSR set to: 0
  4461  01F6A8  5191               	movf	convertHSV@i& (0+255),w,b
  4462  01F6AA  0D02               	mullw	2
  4463  01F6AC  C064  F068         	movff	convertHSV@sc,??_convertHSV
  4464  01F6B0  C065  F069         	movff	convertHSV@sc+1,??_convertHSV+1
  4465  01F6B4  50F3               	movf	243,w,c
  4466  01F6B6  2768               	addwf	??_convertHSV& (0+255),f,b
  4467  01F6B8  50F4               	movf	244,w,c
  4468  01F6BA  2369               	addwfc	(??_convertHSV+1)& (0+255),f,b
  4469  01F6BC  0E3C               	movlw	60
  4470  01F6BE  2568               	addwf	??_convertHSV& (0+255),w,b
  4471  01F6C0  6ED9               	movwf	fsr2l,c
  4472  01F6C2  0E00               	movlw	0
  4473  01F6C4  2169               	addwfc	(??_convertHSV+1)& (0+255),w,b
  4474  01F6C6  6EDA               	movwf	fsr2h,c
  4475  01F6C8  5191               	movf	convertHSV@i& (0+255),w,b
  4476  01F6CA  0D02               	mullw	2
  4477  01F6CC  CFF3 F06C          	movff	prodl,??_convertHSV+4
  4478  01F6D0  CFF4 F06D          	movff	prodh,??_convertHSV+5
  4479  01F6D4  516C               	movf	(??_convertHSV+4)& (0+255),w,b
  4480  01F6D6  2564               	addwf	convertHSV@sc& (0+255),w,b
  4481  01F6D8  6EE1               	movwf	fsr1l,c
  4482  01F6DA  516D               	movf	(??_convertHSV+5)& (0+255),w,b
  4483  01F6DC  2165               	addwfc	(convertHSV@sc+1)& (0+255),w,b
  4484  01F6DE  6EE2               	movwf	fsr1h,c
  4485  01F6E0  50DE               	movf	postinc2,w,c
  4486  01F6E2  5CE6               	subwf	postinc1,w,c
  4487  01F6E4  50DE               	movf	postinc2,w,c
  4488  01F6E6  58E6               	subwfb	postinc1,w,c
  4489  01F6E8  A0D8               	btfss	status,0,c
  4490  01F6EA  EF79  F0FB         	goto	u3541
  4491  01F6EE  EF7B  F0FB         	goto	u3540
  4492  01F6F2                     u3541:
  4493  01F6F2  EF07  F0FC         	goto	l4216
  4494  01F6F6                     u3540:
  4495  01F6F6                     
  4496                           ; BSR set to: 0
  4497                           ;color.c: 186:         maxIndex = 1;
  4498  01F6F6  0E01               	movlw	1
  4499  01F6F8  6F84               	movwf	convertHSV@maxIndex& (0+255),b
  4500  01F6FA                     
  4501                           ; BSR set to: 0
  4502                           ;color.c: 187:         maxValue = sc->R[i];
  4503  01F6FA  5191               	movf	convertHSV@i& (0+255),w,b
  4504  01F6FC  0D02               	mullw	2
  4505  01F6FE  CFF3 F068          	movff	prodl,??_convertHSV
  4506  01F702  CFF4 F069          	movff	prodh,??_convertHSV+1
  4507  01F706  5168               	movf	??_convertHSV& (0+255),w,b
  4508  01F708  2564               	addwf	convertHSV@sc& (0+255),w,b
  4509  01F70A  6ED9               	movwf	fsr2l,c
  4510  01F70C  5169               	movf	(??_convertHSV+1)& (0+255),w,b
  4511  01F70E  2165               	addwfc	(convertHSV@sc+1)& (0+255),w,b
  4512  01F710  6EDA               	movwf	fsr2h,c
  4513  01F712  CFDE F06A          	movff	postinc2,??_convertHSV+2
  4514  01F716  CFDD F06B          	movff	postdec2,??_convertHSV+3
  4515  01F71A  C06A  F001         	movff	??_convertHSV+2,___xxtofl@val
  4516  01F71E  C06B  F002         	movff	??_convertHSV+3,___xxtofl@val+1
  4517  01F722  6A03               	clrf	(___xxtofl@val+2)^0,c
  4518  01F724  6A04               	clrf	(___xxtofl@val+3)^0,c
  4519  01F726  0E00               	movlw	0
  4520  01F728  ECE4  F0E9         	call	___xxtofl
  4521  01F72C  C001  F08D         	movff	?___xxtofl,convertHSV@maxValue
  4522  01F730  C002  F08E         	movff	?___xxtofl+1,convertHSV@maxValue+1
  4523  01F734  C003  F08F         	movff	?___xxtofl+2,convertHSV@maxValue+2
  4524  01F738  C004  F090         	movff	?___xxtofl+3,convertHSV@maxValue+3
  4525  01F73C                     
  4526                           ;color.c: 188:         minValue = (sc->G[i]<sc->B[i])?sc->G[i] : sc->B[i];
  4527  01F73C  0100               	movlb	0	; () banked
  4528  01F73E  5191               	movf	convertHSV@i& (0+255),w,b
  4529  01F740  0D02               	mullw	2
  4530  01F742  C064  F068         	movff	convertHSV@sc,??_convertHSV
  4531  01F746  C065  F069         	movff	convertHSV@sc+1,??_convertHSV+1
  4532  01F74A  50F3               	movf	243,w,c
  4533  01F74C  2768               	addwf	??_convertHSV& (0+255),f,b
  4534  01F74E  50F4               	movf	244,w,c
  4535  01F750  2369               	addwfc	(??_convertHSV+1)& (0+255),f,b
  4536  01F752  0E3C               	movlw	60
  4537  01F754  2568               	addwf	??_convertHSV& (0+255),w,b
  4538  01F756  6ED9               	movwf	fsr2l,c
  4539  01F758  0E00               	movlw	0
  4540  01F75A  2169               	addwfc	(??_convertHSV+1)& (0+255),w,b
  4541  01F75C  6EDA               	movwf	fsr2h,c
  4542  01F75E  5191               	movf	convertHSV@i& (0+255),w,b
  4543  01F760  0D02               	mullw	2
  4544  01F762  C064  F06C         	movff	convertHSV@sc,??_convertHSV+4
  4545  01F766  C065  F06D         	movff	convertHSV@sc+1,??_convertHSV+5
  4546  01F76A  50F3               	movf	243,w,c
  4547  01F76C  276C               	addwf	(??_convertHSV+4)& (0+255),f,b
  4548  01F76E  50F4               	movf	244,w,c
  4549  01F770  236D               	addwfc	(??_convertHSV+5)& (0+255),f,b
  4550  01F772  0E1E               	movlw	30
  4551  01F774  256C               	addwf	(??_convertHSV+4)& (0+255),w,b
  4552  01F776  6EE1               	movwf	fsr1l,c
  4553  01F778  0E00               	movlw	0
  4554  01F77A  216D               	addwfc	(??_convertHSV+5)& (0+255),w,b
  4555  01F77C  6EE2               	movwf	fsr1h,c
  4556  01F77E  50DE               	movf	postinc2,w,c
  4557  01F780  5CE6               	subwf	postinc1,w,c
  4558  01F782  50DE               	movf	postinc2,w,c
  4559  01F784  58E6               	subwfb	postinc1,w,c
  4560  01F786  A0D8               	btfss	status,0,c
  4561  01F788  EFC8  F0FB         	goto	u3551
  4562  01F78C  EFCA  F0FB         	goto	u3550
  4563  01F790                     u3551:
  4564  01F790  EFDC  F0FB         	goto	l4212
  4565  01F794                     u3550:
  4566  01F794                     
  4567                           ; BSR set to: 0
  4568  01F794  5191               	movf	convertHSV@i& (0+255),w,b
  4569  01F796  0D02               	mullw	2
  4570  01F798  C064  F068         	movff	convertHSV@sc,??_convertHSV
  4571  01F79C  C065  F069         	movff	convertHSV@sc+1,??_convertHSV+1
  4572  01F7A0  50F3               	movf	243,w,c
  4573  01F7A2  2768               	addwf	??_convertHSV& (0+255),f,b
  4574  01F7A4  50F4               	movf	244,w,c
  4575  01F7A6  2369               	addwfc	(??_convertHSV+1)& (0+255),f,b
  4576  01F7A8  0E3C               	movlw	60
  4577  01F7AA  2568               	addwf	??_convertHSV& (0+255),w,b
  4578  01F7AC  6F7A               	movwf	_convertHSV$761& (0+255),b
  4579  01F7AE  0E00               	movlw	0
  4580  01F7B0  2169               	addwfc	(??_convertHSV+1)& (0+255),w,b
  4581  01F7B2  6F7B               	movwf	(_convertHSV$761+1)& (0+255),b
  4582  01F7B4  EFEC  F0FB         	goto	l4214
  4583  01F7B8                     l4212:
  4584                           
  4585                           ; BSR set to: 0
  4586  01F7B8  5191               	movf	convertHSV@i& (0+255),w,b
  4587  01F7BA  0D02               	mullw	2
  4588  01F7BC  C064  F068         	movff	convertHSV@sc,??_convertHSV
  4589  01F7C0  C065  F069         	movff	convertHSV@sc+1,??_convertHSV+1
  4590  01F7C4  50F3               	movf	243,w,c
  4591  01F7C6  2768               	addwf	??_convertHSV& (0+255),f,b
  4592  01F7C8  50F4               	movf	244,w,c
  4593  01F7CA  2369               	addwfc	(??_convertHSV+1)& (0+255),f,b
  4594  01F7CC  0E1E               	movlw	30
  4595  01F7CE  2568               	addwf	??_convertHSV& (0+255),w,b
  4596  01F7D0  6F7A               	movwf	_convertHSV$761& (0+255),b
  4597  01F7D2  0E00               	movlw	0
  4598  01F7D4  2169               	addwfc	(??_convertHSV+1)& (0+255),w,b
  4599  01F7D6  6F7B               	movwf	(_convertHSV$761+1)& (0+255),b
  4600  01F7D8                     l4214:
  4601                           
  4602                           ; BSR set to: 0
  4603  01F7D8  C07A  FFD9         	movff	_convertHSV$761,fsr2l
  4604  01F7DC  C07B  FFDA         	movff	_convertHSV$761+1,fsr2h
  4605  01F7E0  CFDE F068          	movff	postinc2,??_convertHSV
  4606  01F7E4  CFDD F069          	movff	postdec2,??_convertHSV+1
  4607  01F7E8  C068  F001         	movff	??_convertHSV,___xxtofl@val
  4608  01F7EC  C069  F002         	movff	??_convertHSV+1,___xxtofl@val+1
  4609  01F7F0  6A03               	clrf	(___xxtofl@val+2)^0,c
  4610  01F7F2  6A04               	clrf	(___xxtofl@val+3)^0,c
  4611  01F7F4  0E00               	movlw	0
  4612  01F7F6  ECE4  F0E9         	call	___xxtofl
  4613  01F7FA  C001  F089         	movff	?___xxtofl,convertHSV@minValue
  4614  01F7FE  C002  F08A         	movff	?___xxtofl+1,convertHSV@minValue+1
  4615  01F802  C003  F08B         	movff	?___xxtofl+2,convertHSV@minValue+2
  4616  01F806  C004  F08C         	movff	?___xxtofl+3,convertHSV@minValue+3
  4617                           
  4618                           ;color.c: 189:     }
  4619  01F80A  EF01  F0FF         	goto	l4258
  4620  01F80E                     l4216:
  4621                           
  4622                           ; BSR set to: 0
  4623  01F80E  5191               	movf	convertHSV@i& (0+255),w,b
  4624  01F810  0D02               	mullw	2
  4625  01F812  CFF3 F068          	movff	prodl,??_convertHSV
  4626  01F816  CFF4 F069          	movff	prodh,??_convertHSV+1
  4627  01F81A  5168               	movf	??_convertHSV& (0+255),w,b
  4628  01F81C  2564               	addwf	convertHSV@sc& (0+255),w,b
  4629  01F81E  6ED9               	movwf	fsr2l,c
  4630  01F820  5169               	movf	(??_convertHSV+1)& (0+255),w,b
  4631  01F822  2165               	addwfc	(convertHSV@sc+1)& (0+255),w,b
  4632  01F824  6EDA               	movwf	fsr2h,c
  4633  01F826  5191               	movf	convertHSV@i& (0+255),w,b
  4634  01F828  0D02               	mullw	2
  4635  01F82A  C064  F06C         	movff	convertHSV@sc,??_convertHSV+4
  4636  01F82E  C065  F06D         	movff	convertHSV@sc+1,??_convertHSV+5
  4637  01F832  50F3               	movf	243,w,c
  4638  01F834  276C               	addwf	(??_convertHSV+4)& (0+255),f,b
  4639  01F836  50F4               	movf	244,w,c
  4640  01F838  236D               	addwfc	(??_convertHSV+5)& (0+255),f,b
  4641  01F83A  0E1E               	movlw	30
  4642  01F83C  256C               	addwf	(??_convertHSV+4)& (0+255),w,b
  4643  01F83E  6EE1               	movwf	fsr1l,c
  4644  01F840  0E00               	movlw	0
  4645  01F842  216D               	addwfc	(??_convertHSV+5)& (0+255),w,b
  4646  01F844  6EE2               	movwf	fsr1h,c
  4647  01F846  50DE               	movf	postinc2,w,c
  4648  01F848  5CE6               	subwf	postinc1,w,c
  4649  01F84A  50DE               	movf	postinc2,w,c
  4650  01F84C  58E6               	subwfb	postinc1,w,c
  4651  01F84E  A0D8               	btfss	status,0,c
  4652  01F850  EF2C  F0FC         	goto	u3561
  4653  01F854  EF2E  F0FC         	goto	u3560
  4654  01F858                     u3561:
  4655  01F858  EFE1  F0FC         	goto	l4232
  4656  01F85C                     u3560:
  4657  01F85C                     
  4658                           ; BSR set to: 0
  4659  01F85C  5191               	movf	convertHSV@i& (0+255),w,b
  4660  01F85E  0D02               	mullw	2
  4661  01F860  C064  F068         	movff	convertHSV@sc,??_convertHSV
  4662  01F864  C065  F069         	movff	convertHSV@sc+1,??_convertHSV+1
  4663  01F868  50F3               	movf	243,w,c
  4664  01F86A  2768               	addwf	??_convertHSV& (0+255),f,b
  4665  01F86C  50F4               	movf	244,w,c
  4666  01F86E  2369               	addwfc	(??_convertHSV+1)& (0+255),f,b
  4667  01F870  0E3C               	movlw	60
  4668  01F872  2568               	addwf	??_convertHSV& (0+255),w,b
  4669  01F874  6ED9               	movwf	fsr2l,c
  4670  01F876  0E00               	movlw	0
  4671  01F878  2169               	addwfc	(??_convertHSV+1)& (0+255),w,b
  4672  01F87A  6EDA               	movwf	fsr2h,c
  4673  01F87C  5191               	movf	convertHSV@i& (0+255),w,b
  4674  01F87E  0D02               	mullw	2
  4675  01F880  C064  F06C         	movff	convertHSV@sc,??_convertHSV+4
  4676  01F884  C065  F06D         	movff	convertHSV@sc+1,??_convertHSV+5
  4677  01F888  50F3               	movf	243,w,c
  4678  01F88A  276C               	addwf	(??_convertHSV+4)& (0+255),f,b
  4679  01F88C  50F4               	movf	244,w,c
  4680  01F88E  236D               	addwfc	(??_convertHSV+5)& (0+255),f,b
  4681  01F890  0E1E               	movlw	30
  4682  01F892  256C               	addwf	(??_convertHSV+4)& (0+255),w,b
  4683  01F894  6EE1               	movwf	fsr1l,c
  4684  01F896  0E00               	movlw	0
  4685  01F898  216D               	addwfc	(??_convertHSV+5)& (0+255),w,b
  4686  01F89A  6EE2               	movwf	fsr1h,c
  4687  01F89C  50DE               	movf	postinc2,w,c
  4688  01F89E  5CE6               	subwf	postinc1,w,c
  4689  01F8A0  50DE               	movf	postinc2,w,c
  4690  01F8A2  58E6               	subwfb	postinc1,w,c
  4691  01F8A4  A0D8               	btfss	status,0,c
  4692  01F8A6  EF57  F0FC         	goto	u3571
  4693  01F8AA  EF59  F0FC         	goto	u3570
  4694  01F8AE                     u3571:
  4695  01F8AE  EFE1  F0FC         	goto	l4232
  4696  01F8B2                     u3570:
  4697  01F8B2                     
  4698                           ; BSR set to: 0
  4699                           ;color.c: 192:         maxIndex = 2;
  4700  01F8B2  0E02               	movlw	2
  4701  01F8B4  6F84               	movwf	convertHSV@maxIndex& (0+255),b
  4702  01F8B6                     
  4703                           ; BSR set to: 0
  4704                           ;color.c: 193:         maxValue = sc->G[i];
  4705  01F8B6  5191               	movf	convertHSV@i& (0+255),w,b
  4706  01F8B8  0D02               	mullw	2
  4707  01F8BA  C064  F068         	movff	convertHSV@sc,??_convertHSV
  4708  01F8BE  C065  F069         	movff	convertHSV@sc+1,??_convertHSV+1
  4709  01F8C2  50F3               	movf	243,w,c
  4710  01F8C4  2768               	addwf	??_convertHSV& (0+255),f,b
  4711  01F8C6  50F4               	movf	244,w,c
  4712  01F8C8  2369               	addwfc	(??_convertHSV+1)& (0+255),f,b
  4713  01F8CA  0E1E               	movlw	30
  4714  01F8CC  2568               	addwf	??_convertHSV& (0+255),w,b
  4715  01F8CE  6ED9               	movwf	fsr2l,c
  4716  01F8D0  0E00               	movlw	0
  4717  01F8D2  2169               	addwfc	(??_convertHSV+1)& (0+255),w,b
  4718  01F8D4  6EDA               	movwf	fsr2h,c
  4719  01F8D6  CFDE F06A          	movff	postinc2,??_convertHSV+2
  4720  01F8DA  CFDD F06B          	movff	postdec2,??_convertHSV+3
  4721  01F8DE  C06A  F001         	movff	??_convertHSV+2,___xxtofl@val
  4722  01F8E2  C06B  F002         	movff	??_convertHSV+3,___xxtofl@val+1
  4723  01F8E6  6A03               	clrf	(___xxtofl@val+2)^0,c
  4724  01F8E8  6A04               	clrf	(___xxtofl@val+3)^0,c
  4725  01F8EA  0E00               	movlw	0
  4726  01F8EC  ECE4  F0E9         	call	___xxtofl
  4727  01F8F0  C001  F08D         	movff	?___xxtofl,convertHSV@maxValue
  4728  01F8F4  C002  F08E         	movff	?___xxtofl+1,convertHSV@maxValue+1
  4729  01F8F8  C003  F08F         	movff	?___xxtofl+2,convertHSV@maxValue+2
  4730  01F8FC  C004  F090         	movff	?___xxtofl+3,convertHSV@maxValue+3
  4731  01F900                     
  4732                           ;color.c: 194:         minValue = (sc->R[i]<sc->B[i])?sc->R[i]:sc->B[i];
  4733  01F900  0100               	movlb	0	; () banked
  4734  01F902  5191               	movf	convertHSV@i& (0+255),w,b
  4735  01F904  0D02               	mullw	2
  4736  01F906  C064  F068         	movff	convertHSV@sc,??_convertHSV
  4737  01F90A  C065  F069         	movff	convertHSV@sc+1,??_convertHSV+1
  4738  01F90E  50F3               	movf	243,w,c
  4739  01F910  2768               	addwf	??_convertHSV& (0+255),f,b
  4740  01F912  50F4               	movf	244,w,c
  4741  01F914  2369               	addwfc	(??_convertHSV+1)& (0+255),f,b
  4742  01F916  0E3C               	movlw	60
  4743  01F918  2568               	addwf	??_convertHSV& (0+255),w,b
  4744  01F91A  6ED9               	movwf	fsr2l,c
  4745  01F91C  0E00               	movlw	0
  4746  01F91E  2169               	addwfc	(??_convertHSV+1)& (0+255),w,b
  4747  01F920  6EDA               	movwf	fsr2h,c
  4748  01F922  5191               	movf	convertHSV@i& (0+255),w,b
  4749  01F924  0D02               	mullw	2
  4750  01F926  CFF3 F06C          	movff	prodl,??_convertHSV+4
  4751  01F92A  CFF4 F06D          	movff	prodh,??_convertHSV+5
  4752  01F92E  516C               	movf	(??_convertHSV+4)& (0+255),w,b
  4753  01F930  2564               	addwf	convertHSV@sc& (0+255),w,b
  4754  01F932  6EE1               	movwf	fsr1l,c
  4755  01F934  516D               	movf	(??_convertHSV+5)& (0+255),w,b
  4756  01F936  2165               	addwfc	(convertHSV@sc+1)& (0+255),w,b
  4757  01F938  6EE2               	movwf	fsr1h,c
  4758  01F93A  50DE               	movf	postinc2,w,c
  4759  01F93C  5CE6               	subwf	postinc1,w,c
  4760  01F93E  50DE               	movf	postinc2,w,c
  4761  01F940  58E6               	subwfb	postinc1,w,c
  4762  01F942  A0D8               	btfss	status,0,c
  4763  01F944  EFA6  F0FC         	goto	u3581
  4764  01F948  EFA8  F0FC         	goto	u3580
  4765  01F94C                     u3581:
  4766  01F94C  EFBA  F0FC         	goto	l4228
  4767  01F950                     u3580:
  4768  01F950                     
  4769                           ; BSR set to: 0
  4770  01F950  5191               	movf	convertHSV@i& (0+255),w,b
  4771  01F952  0D02               	mullw	2
  4772  01F954  C064  F068         	movff	convertHSV@sc,??_convertHSV
  4773  01F958  C065  F069         	movff	convertHSV@sc+1,??_convertHSV+1
  4774  01F95C  50F3               	movf	243,w,c
  4775  01F95E  2768               	addwf	??_convertHSV& (0+255),f,b
  4776  01F960  50F4               	movf	244,w,c
  4777  01F962  2369               	addwfc	(??_convertHSV+1)& (0+255),f,b
  4778  01F964  0E3C               	movlw	60
  4779  01F966  2568               	addwf	??_convertHSV& (0+255),w,b
  4780  01F968  6F7C               	movwf	_convertHSV$763& (0+255),b
  4781  01F96A  0E00               	movlw	0
  4782  01F96C  2169               	addwfc	(??_convertHSV+1)& (0+255),w,b
  4783  01F96E  6F7D               	movwf	(_convertHSV$763+1)& (0+255),b
  4784  01F970  EFC6  F0FC         	goto	l4230
  4785  01F974                     l4228:
  4786                           
  4787                           ; BSR set to: 0
  4788  01F974  5191               	movf	convertHSV@i& (0+255),w,b
  4789  01F976  0D02               	mullw	2
  4790  01F978  CFF3 F068          	movff	prodl,??_convertHSV
  4791  01F97C  CFF4 F069          	movff	prodh,??_convertHSV+1
  4792  01F980  5168               	movf	??_convertHSV& (0+255),w,b
  4793  01F982  2564               	addwf	convertHSV@sc& (0+255),w,b
  4794  01F984  6F7C               	movwf	_convertHSV$763& (0+255),b
  4795  01F986  5169               	movf	(??_convertHSV+1)& (0+255),w,b
  4796  01F988  2165               	addwfc	(convertHSV@sc+1)& (0+255),w,b
  4797  01F98A  6F7D               	movwf	(_convertHSV$763+1)& (0+255),b
  4798  01F98C                     l4230:
  4799                           
  4800                           ; BSR set to: 0
  4801  01F98C  C07C  FFD9         	movff	_convertHSV$763,fsr2l
  4802  01F990  C07D  FFDA         	movff	_convertHSV$763+1,fsr2h
  4803  01F994  CFDE F068          	movff	postinc2,??_convertHSV
  4804  01F998  CFDD F069          	movff	postdec2,??_convertHSV+1
  4805  01F99C  C068  F001         	movff	??_convertHSV,___xxtofl@val
  4806  01F9A0  C069  F002         	movff	??_convertHSV+1,___xxtofl@val+1
  4807  01F9A4  6A03               	clrf	(___xxtofl@val+2)^0,c
  4808  01F9A6  6A04               	clrf	(___xxtofl@val+3)^0,c
  4809  01F9A8  0E00               	movlw	0
  4810  01F9AA  ECE4  F0E9         	call	___xxtofl
  4811  01F9AE  C001  F089         	movff	?___xxtofl,convertHSV@minValue
  4812  01F9B2  C002  F08A         	movff	?___xxtofl+1,convertHSV@minValue+1
  4813  01F9B6  C003  F08B         	movff	?___xxtofl+2,convertHSV@minValue+2
  4814  01F9BA  C004  F08C         	movff	?___xxtofl+3,convertHSV@minValue+3
  4815                           
  4816                           ;color.c: 195:     }
  4817  01F9BE  EF01  F0FF         	goto	l4258
  4818  01F9C2                     l4232:
  4819                           
  4820                           ; BSR set to: 0
  4821                           ;color.c: 198:         maxIndex = 3;
  4822  01F9C2  0E03               	movlw	3
  4823  01F9C4  6F84               	movwf	convertHSV@maxIndex& (0+255),b
  4824  01F9C6                     
  4825                           ; BSR set to: 0
  4826                           ;color.c: 199:         maxValue = sc->B[i];
  4827  01F9C6  5191               	movf	convertHSV@i& (0+255),w,b
  4828  01F9C8  0D02               	mullw	2
  4829  01F9CA  C064  F068         	movff	convertHSV@sc,??_convertHSV
  4830  01F9CE  C065  F069         	movff	convertHSV@sc+1,??_convertHSV+1
  4831  01F9D2  50F3               	movf	243,w,c
  4832  01F9D4  2768               	addwf	??_convertHSV& (0+255),f,b
  4833  01F9D6  50F4               	movf	244,w,c
  4834  01F9D8  2369               	addwfc	(??_convertHSV+1)& (0+255),f,b
  4835  01F9DA  0E3C               	movlw	60
  4836  01F9DC  2568               	addwf	??_convertHSV& (0+255),w,b
  4837  01F9DE  6ED9               	movwf	fsr2l,c
  4838  01F9E0  0E00               	movlw	0
  4839  01F9E2  2169               	addwfc	(??_convertHSV+1)& (0+255),w,b
  4840  01F9E4  6EDA               	movwf	fsr2h,c
  4841  01F9E6  CFDE F06A          	movff	postinc2,??_convertHSV+2
  4842  01F9EA  CFDD F06B          	movff	postdec2,??_convertHSV+3
  4843  01F9EE  C06A  F001         	movff	??_convertHSV+2,___xxtofl@val
  4844  01F9F2  C06B  F002         	movff	??_convertHSV+3,___xxtofl@val+1
  4845  01F9F6  6A03               	clrf	(___xxtofl@val+2)^0,c
  4846  01F9F8  6A04               	clrf	(___xxtofl@val+3)^0,c
  4847  01F9FA  0E00               	movlw	0
  4848  01F9FC  ECE4  F0E9         	call	___xxtofl
  4849  01FA00  C001  F08D         	movff	?___xxtofl,convertHSV@maxValue
  4850  01FA04  C002  F08E         	movff	?___xxtofl+1,convertHSV@maxValue+1
  4851  01FA08  C003  F08F         	movff	?___xxtofl+2,convertHSV@maxValue+2
  4852  01FA0C  C004  F090         	movff	?___xxtofl+3,convertHSV@maxValue+3
  4853  01FA10                     
  4854                           ;color.c: 200:         minValue = (sc->R[i]<sc->G[i])?sc->R[i]:sc->G[i];
  4855  01FA10  0100               	movlb	0	; () banked
  4856  01FA12  5191               	movf	convertHSV@i& (0+255),w,b
  4857  01FA14  0D02               	mullw	2
  4858  01FA16  C064  F068         	movff	convertHSV@sc,??_convertHSV
  4859  01FA1A  C065  F069         	movff	convertHSV@sc+1,??_convertHSV+1
  4860  01FA1E  50F3               	movf	243,w,c
  4861  01FA20  2768               	addwf	??_convertHSV& (0+255),f,b
  4862  01FA22  50F4               	movf	244,w,c
  4863  01FA24  2369               	addwfc	(??_convertHSV+1)& (0+255),f,b
  4864  01FA26  0E1E               	movlw	30
  4865  01FA28  2568               	addwf	??_convertHSV& (0+255),w,b
  4866  01FA2A  6ED9               	movwf	fsr2l,c
  4867  01FA2C  0E00               	movlw	0
  4868  01FA2E  2169               	addwfc	(??_convertHSV+1)& (0+255),w,b
  4869  01FA30  6EDA               	movwf	fsr2h,c
  4870  01FA32  5191               	movf	convertHSV@i& (0+255),w,b
  4871  01FA34  0D02               	mullw	2
  4872  01FA36  CFF3 F06C          	movff	prodl,??_convertHSV+4
  4873  01FA3A  CFF4 F06D          	movff	prodh,??_convertHSV+5
  4874  01FA3E  516C               	movf	(??_convertHSV+4)& (0+255),w,b
  4875  01FA40  2564               	addwf	convertHSV@sc& (0+255),w,b
  4876  01FA42  6EE1               	movwf	fsr1l,c
  4877  01FA44  516D               	movf	(??_convertHSV+5)& (0+255),w,b
  4878  01FA46  2165               	addwfc	(convertHSV@sc+1)& (0+255),w,b
  4879  01FA48  6EE2               	movwf	fsr1h,c
  4880  01FA4A  50DE               	movf	postinc2,w,c
  4881  01FA4C  5CE6               	subwf	postinc1,w,c
  4882  01FA4E  50DE               	movf	postinc2,w,c
  4883  01FA50  58E6               	subwfb	postinc1,w,c
  4884  01FA52  A0D8               	btfss	status,0,c
  4885  01FA54  EF2E  F0FD         	goto	u3591
  4886  01FA58  EF30  F0FD         	goto	u3590
  4887  01FA5C                     u3591:
  4888  01FA5C  EF42  F0FD         	goto	l4240
  4889  01FA60                     u3590:
  4890  01FA60                     
  4891                           ; BSR set to: 0
  4892  01FA60  5191               	movf	convertHSV@i& (0+255),w,b
  4893  01FA62  0D02               	mullw	2
  4894  01FA64  C064  F068         	movff	convertHSV@sc,??_convertHSV
  4895  01FA68  C065  F069         	movff	convertHSV@sc+1,??_convertHSV+1
  4896  01FA6C  50F3               	movf	243,w,c
  4897  01FA6E  2768               	addwf	??_convertHSV& (0+255),f,b
  4898  01FA70  50F4               	movf	244,w,c
  4899  01FA72  2369               	addwfc	(??_convertHSV+1)& (0+255),f,b
  4900  01FA74  0E1E               	movlw	30
  4901  01FA76  2568               	addwf	??_convertHSV& (0+255),w,b
  4902  01FA78  6F7E               	movwf	_convertHSV$765& (0+255),b
  4903  01FA7A  0E00               	movlw	0
  4904  01FA7C  2169               	addwfc	(??_convertHSV+1)& (0+255),w,b
  4905  01FA7E  6F7F               	movwf	(_convertHSV$765+1)& (0+255),b
  4906  01FA80  EF4E  F0FD         	goto	l4242
  4907  01FA84                     l4240:
  4908                           
  4909                           ; BSR set to: 0
  4910  01FA84  5191               	movf	convertHSV@i& (0+255),w,b
  4911  01FA86  0D02               	mullw	2
  4912  01FA88  CFF3 F068          	movff	prodl,??_convertHSV
  4913  01FA8C  CFF4 F069          	movff	prodh,??_convertHSV+1
  4914  01FA90  5168               	movf	??_convertHSV& (0+255),w,b
  4915  01FA92  2564               	addwf	convertHSV@sc& (0+255),w,b
  4916  01FA94  6F7E               	movwf	_convertHSV$765& (0+255),b
  4917  01FA96  5169               	movf	(??_convertHSV+1)& (0+255),w,b
  4918  01FA98  2165               	addwfc	(convertHSV@sc+1)& (0+255),w,b
  4919  01FA9A  6F7F               	movwf	(_convertHSV$765+1)& (0+255),b
  4920  01FA9C                     l4242:
  4921                           
  4922                           ; BSR set to: 0
  4923  01FA9C  C07E  FFD9         	movff	_convertHSV$765,fsr2l
  4924  01FAA0  C07F  FFDA         	movff	_convertHSV$765+1,fsr2h
  4925  01FAA4  CFDE F068          	movff	postinc2,??_convertHSV
  4926  01FAA8  CFDD F069          	movff	postdec2,??_convertHSV+1
  4927  01FAAC  C068  F001         	movff	??_convertHSV,___xxtofl@val
  4928  01FAB0  C069  F002         	movff	??_convertHSV+1,___xxtofl@val+1
  4929  01FAB4  6A03               	clrf	(___xxtofl@val+2)^0,c
  4930  01FAB6  6A04               	clrf	(___xxtofl@val+3)^0,c
  4931  01FAB8  0E00               	movlw	0
  4932  01FABA  ECE4  F0E9         	call	___xxtofl
  4933  01FABE  C001  F089         	movff	?___xxtofl,convertHSV@minValue
  4934  01FAC2  C002  F08A         	movff	?___xxtofl+1,convertHSV@minValue+1
  4935  01FAC6  C003  F08B         	movff	?___xxtofl+2,convertHSV@minValue+2
  4936  01FACA  C004  F08C         	movff	?___xxtofl+3,convertHSV@minValue+3
  4937  01FACE  EF01  F0FF         	goto	l4258
  4938  01FAD2                     l4244:
  4939                           
  4940                           ; BSR set to: 0
  4941  01FAD2  0E00               	movlw	0
  4942  01FAD4  6F85               	movwf	convertHSV@h& (0+255),b
  4943  01FAD6  0E00               	movlw	0
  4944  01FAD8  6F86               	movwf	(convertHSV@h+1)& (0+255),b
  4945  01FADA  0E00               	movlw	0
  4946  01FADC  6F87               	movwf	(convertHSV@h+2)& (0+255),b
  4947  01FADE  0E00               	movlw	0
  4948  01FAE0  6F88               	movwf	(convertHSV@h+3)& (0+255),b
  4949                           
  4950                           ;color.c: 208:         break;
  4951  01FAE2  EF1F  F0FF         	goto	l4260
  4952  01FAE6                     l4246:
  4953                           
  4954                           ; BSR set to: 0
  4955  01FAE6  C089  F023         	movff	convertHSV@minValue,___flsub@a
  4956  01FAEA  C08A  F024         	movff	convertHSV@minValue+1,___flsub@a+1
  4957  01FAEE  C08B  F025         	movff	convertHSV@minValue+2,___flsub@a+2
  4958  01FAF2  C08C  F026         	movff	convertHSV@minValue+3,___flsub@a+3
  4959  01FAF6  C08D  F01F         	movff	convertHSV@maxValue,___flsub@b
  4960  01FAFA  C08E  F020         	movff	convertHSV@maxValue+1,___flsub@b+1
  4961  01FAFE  C08F  F021         	movff	convertHSV@maxValue+2,___flsub@b+2
  4962  01FB02  C090  F022         	movff	convertHSV@maxValue+3,___flsub@b+3
  4963  01FB06  ECA8  F0DD         	call	___flsub	;wreg free
  4964  01FB0A  C01F  F02B         	movff	?___flsub,___fldiv@a
  4965  01FB0E  C020  F02C         	movff	?___flsub+1,___fldiv@a+1
  4966  01FB12  C021  F02D         	movff	?___flsub+2,___fldiv@a+2
  4967  01FB16  C022  F02E         	movff	?___flsub+3,___fldiv@a+3
  4968  01FB1A  0100               	movlb	0	; () banked
  4969  01FB1C  5191               	movf	convertHSV@i& (0+255),w,b
  4970  01FB1E  0D02               	mullw	2
  4971  01FB20  C064  F068         	movff	convertHSV@sc,??_convertHSV
  4972  01FB24  C065  F069         	movff	convertHSV@sc+1,??_convertHSV+1
  4973  01FB28  50F3               	movf	243,w,c
  4974  01FB2A  2768               	addwf	??_convertHSV& (0+255),f,b
  4975  01FB2C  50F4               	movf	244,w,c
  4976  01FB2E  2369               	addwfc	(??_convertHSV+1)& (0+255),f,b
  4977  01FB30  0E3C               	movlw	60
  4978  01FB32  2568               	addwf	??_convertHSV& (0+255),w,b
  4979  01FB34  6ED9               	movwf	fsr2l,c
  4980  01FB36  0E00               	movlw	0
  4981  01FB38  2169               	addwfc	(??_convertHSV+1)& (0+255),w,b
  4982  01FB3A  6EDA               	movwf	fsr2h,c
  4983  01FB3C  CFDE F06A          	movff	postinc2,??_convertHSV+2
  4984  01FB40  CFDD F06B          	movff	postdec2,??_convertHSV+3
  4985  01FB44  5191               	movf	convertHSV@i& (0+255),w,b
  4986  01FB46  0D02               	mullw	2
  4987  01FB48  C064  F06C         	movff	convertHSV@sc,??_convertHSV+4
  4988  01FB4C  C065  F06D         	movff	convertHSV@sc+1,??_convertHSV+5
  4989  01FB50  50F3               	movf	243,w,c
  4990  01FB52  276C               	addwf	(??_convertHSV+4)& (0+255),f,b
  4991  01FB54  50F4               	movf	244,w,c
  4992  01FB56  236D               	addwfc	(??_convertHSV+5)& (0+255),f,b
  4993  01FB58  0E1E               	movlw	30
  4994  01FB5A  256C               	addwf	(??_convertHSV+4)& (0+255),w,b
  4995  01FB5C  6ED9               	movwf	fsr2l,c
  4996  01FB5E  0E00               	movlw	0
  4997  01FB60  216D               	addwfc	(??_convertHSV+5)& (0+255),w,b
  4998  01FB62  6EDA               	movwf	fsr2h,c
  4999  01FB64  CFDE F06E          	movff	postinc2,??_convertHSV+6
  5000  01FB68  CFDD F06F          	movff	postdec2,??_convertHSV+7
  5001  01FB6C  516A               	movf	(??_convertHSV+2)& (0+255),w,b
  5002  01FB6E  5F6E               	subwf	(??_convertHSV+6)& (0+255),f,b
  5003  01FB70  516B               	movf	(??_convertHSV+3)& (0+255),w,b
  5004  01FB72  5B6F               	subwfb	(??_convertHSV+7)& (0+255),f,b
  5005  01FB74  C06E  F001         	movff	??_convertHSV+6,___xxtofl@val
  5006  01FB78  C06F  F002         	movff	??_convertHSV+7,___xxtofl@val+1
  5007  01FB7C  6A03               	clrf	(___xxtofl@val+2)^0,c
  5008  01FB7E  6A04               	clrf	(___xxtofl@val+3)^0,c
  5009  01FB80  0E00               	movlw	0
  5010  01FB82  ECE4  F0E9         	call	___xxtofl
  5011  01FB86  C001  F027         	movff	?___xxtofl,___fldiv@b
  5012  01FB8A  C002  F028         	movff	?___xxtofl+1,___fldiv@b+1
  5013  01FB8E  C003  F029         	movff	?___xxtofl+2,___fldiv@b+2
  5014  01FB92  C004  F02A         	movff	?___xxtofl+3,___fldiv@b+3
  5015  01FB96  ECB1  F0EC         	call	___fldiv	;wreg free
  5016  01FB9A  C027  F040         	movff	?___fldiv,___flmul@b
  5017  01FB9E  C028  F041         	movff	?___fldiv+1,___flmul@b+1
  5018  01FBA2  C029  F042         	movff	?___fldiv+2,___flmul@b+2
  5019  01FBA6  C02A  F043         	movff	?___fldiv+3,___flmul@b+3
  5020  01FBAA  0E00               	movlw	0
  5021  01FBAC  6E44               	movwf	___flmul@a^0,c
  5022  01FBAE  0E00               	movlw	0
  5023  01FBB0  6E45               	movwf	(___flmul@a+1)^0,c
  5024  01FBB2  0E70               	movlw	112
  5025  01FBB4  6E46               	movwf	(___flmul@a+2)^0,c
  5026  01FBB6  0E42               	movlw	66
  5027  01FBB8  6E47               	movwf	(___flmul@a+3)^0,c
  5028  01FBBA  EC7E  F0EE         	call	___flmul	;wreg free
  5029  01FBBE  C040  F085         	movff	?___flmul,convertHSV@h
  5030  01FBC2  C041  F086         	movff	?___flmul+1,convertHSV@h+1
  5031  01FBC6  C042  F087         	movff	?___flmul+2,convertHSV@h+2
  5032  01FBCA  C043  F088         	movff	?___flmul+3,convertHSV@h+3
  5033                           
  5034                           ;color.c: 210:         break;
  5035  01FBCE  EF1F  F0FF         	goto	l4260
  5036  01FBD2                     l4248:
  5037                           
  5038                           ; BSR set to: 0
  5039  01FBD2  C089  F023         	movff	convertHSV@minValue,___flsub@a
  5040  01FBD6  C08A  F024         	movff	convertHSV@minValue+1,___flsub@a+1
  5041  01FBDA  C08B  F025         	movff	convertHSV@minValue+2,___flsub@a+2
  5042  01FBDE  C08C  F026         	movff	convertHSV@minValue+3,___flsub@a+3
  5043  01FBE2  C08D  F01F         	movff	convertHSV@maxValue,___flsub@b
  5044  01FBE6  C08E  F020         	movff	convertHSV@maxValue+1,___flsub@b+1
  5045  01FBEA  C08F  F021         	movff	convertHSV@maxValue+2,___flsub@b+2
  5046  01FBEE  C090  F022         	movff	convertHSV@maxValue+3,___flsub@b+3
  5047  01FBF2  ECA8  F0DD         	call	___flsub	;wreg free
  5048  01FBF6  C01F  F02B         	movff	?___flsub,___fldiv@a
  5049  01FBFA  C020  F02C         	movff	?___flsub+1,___fldiv@a+1
  5050  01FBFE  C021  F02D         	movff	?___flsub+2,___fldiv@a+2
  5051  01FC02  C022  F02E         	movff	?___flsub+3,___fldiv@a+3
  5052  01FC06  0100               	movlb	0	; () banked
  5053  01FC08  5191               	movf	convertHSV@i& (0+255),w,b
  5054  01FC0A  0D02               	mullw	2
  5055  01FC0C  CFF3 F068          	movff	prodl,??_convertHSV
  5056  01FC10  CFF4 F069          	movff	prodh,??_convertHSV+1
  5057  01FC14  5168               	movf	??_convertHSV& (0+255),w,b
  5058  01FC16  2564               	addwf	convertHSV@sc& (0+255),w,b
  5059  01FC18  6ED9               	movwf	fsr2l,c
  5060  01FC1A  5169               	movf	(??_convertHSV+1)& (0+255),w,b
  5061  01FC1C  2165               	addwfc	(convertHSV@sc+1)& (0+255),w,b
  5062  01FC1E  6EDA               	movwf	fsr2h,c
  5063  01FC20  CFDE F06A          	movff	postinc2,??_convertHSV+2
  5064  01FC24  CFDD F06B          	movff	postdec2,??_convertHSV+3
  5065  01FC28  5191               	movf	convertHSV@i& (0+255),w,b
  5066  01FC2A  0D02               	mullw	2
  5067  01FC2C  C064  F06C         	movff	convertHSV@sc,??_convertHSV+4
  5068  01FC30  C065  F06D         	movff	convertHSV@sc+1,??_convertHSV+5
  5069  01FC34  50F3               	movf	243,w,c
  5070  01FC36  276C               	addwf	(??_convertHSV+4)& (0+255),f,b
  5071  01FC38  50F4               	movf	244,w,c
  5072  01FC3A  236D               	addwfc	(??_convertHSV+5)& (0+255),f,b
  5073  01FC3C  0E3C               	movlw	60
  5074  01FC3E  256C               	addwf	(??_convertHSV+4)& (0+255),w,b
  5075  01FC40  6ED9               	movwf	fsr2l,c
  5076  01FC42  0E00               	movlw	0
  5077  01FC44  216D               	addwfc	(??_convertHSV+5)& (0+255),w,b
  5078  01FC46  6EDA               	movwf	fsr2h,c
  5079  01FC48  CFDE F06E          	movff	postinc2,??_convertHSV+6
  5080  01FC4C  CFDD F06F          	movff	postdec2,??_convertHSV+7
  5081  01FC50  516A               	movf	(??_convertHSV+2)& (0+255),w,b
  5082  01FC52  5F6E               	subwf	(??_convertHSV+6)& (0+255),f,b
  5083  01FC54  516B               	movf	(??_convertHSV+3)& (0+255),w,b
  5084  01FC56  5B6F               	subwfb	(??_convertHSV+7)& (0+255),f,b
  5085  01FC58  C06E  F001         	movff	??_convertHSV+6,___xxtofl@val
  5086  01FC5C  C06F  F002         	movff	??_convertHSV+7,___xxtofl@val+1
  5087  01FC60  6A03               	clrf	(___xxtofl@val+2)^0,c
  5088  01FC62  6A04               	clrf	(___xxtofl@val+3)^0,c
  5089  01FC64  0E00               	movlw	0
  5090  01FC66  ECE4  F0E9         	call	___xxtofl
  5091  01FC6A  C001  F027         	movff	?___xxtofl,___fldiv@b
  5092  01FC6E  C002  F028         	movff	?___xxtofl+1,___fldiv@b+1
  5093  01FC72  C003  F029         	movff	?___xxtofl+2,___fldiv@b+2
  5094  01FC76  C004  F02A         	movff	?___xxtofl+3,___fldiv@b+3
  5095  01FC7A  ECB1  F0EC         	call	___fldiv	;wreg free
  5096  01FC7E  C027  F080         	movff	?___fldiv,_convertHSV$2548
  5097  01FC82  C028  F081         	movff	?___fldiv+1,_convertHSV$2548+1
  5098  01FC86  C029  F082         	movff	?___fldiv+2,_convertHSV$2548+2
  5099  01FC8A  C02A  F083         	movff	?___fldiv+3,_convertHSV$2548+3
  5100  01FC8E  0E00               	movlw	0
  5101  01FC90  6E13               	movwf	___fladd@a^0,c
  5102  01FC92  0E00               	movlw	0
  5103  01FC94  6E14               	movwf	(___fladd@a+1)^0,c
  5104  01FC96  0E00               	movlw	0
  5105  01FC98  6E15               	movwf	(___fladd@a+2)^0,c
  5106  01FC9A  0E40               	movlw	64
  5107  01FC9C  6E16               	movwf	(___fladd@a+3)^0,c
  5108  01FC9E  C080  F00F         	movff	_convertHSV$2548,___fladd@b
  5109  01FCA2  C081  F010         	movff	_convertHSV$2548+1,___fladd@b+1
  5110  01FCA6  C082  F011         	movff	_convertHSV$2548+2,___fladd@b+2
  5111  01FCAA  C083  F012         	movff	_convertHSV$2548+3,___fladd@b+3
  5112  01FCAE  EC93  F0F0         	call	___fladd	;wreg free
  5113  01FCB2  C00F  F040         	movff	?___fladd,___flmul@b
  5114  01FCB6  C010  F041         	movff	?___fladd+1,___flmul@b+1
  5115  01FCBA  C011  F042         	movff	?___fladd+2,___flmul@b+2
  5116  01FCBE  C012  F043         	movff	?___fladd+3,___flmul@b+3
  5117  01FCC2  0E00               	movlw	0
  5118  01FCC4  6E44               	movwf	___flmul@a^0,c
  5119  01FCC6  0E00               	movlw	0
  5120  01FCC8  6E45               	movwf	(___flmul@a+1)^0,c
  5121  01FCCA  0E70               	movlw	112
  5122  01FCCC  6E46               	movwf	(___flmul@a+2)^0,c
  5123  01FCCE  0E42               	movlw	66
  5124  01FCD0  6E47               	movwf	(___flmul@a+3)^0,c
  5125  01FCD2  EC7E  F0EE         	call	___flmul	;wreg free
  5126  01FCD6  C040  F085         	movff	?___flmul,convertHSV@h
  5127  01FCDA  C041  F086         	movff	?___flmul+1,convertHSV@h+1
  5128  01FCDE  C042  F087         	movff	?___flmul+2,convertHSV@h+2
  5129  01FCE2  C043  F088         	movff	?___flmul+3,convertHSV@h+3
  5130                           
  5131                           ;color.c: 212:         break;
  5132  01FCE6  EF1F  F0FF         	goto	l4260
  5133  01FCEA                     l4252:
  5134                           
  5135                           ; BSR set to: 0
  5136  01FCEA  C089  F023         	movff	convertHSV@minValue,___flsub@a
  5137  01FCEE  C08A  F024         	movff	convertHSV@minValue+1,___flsub@a+1
  5138  01FCF2  C08B  F025         	movff	convertHSV@minValue+2,___flsub@a+2
  5139  01FCF6  C08C  F026         	movff	convertHSV@minValue+3,___flsub@a+3
  5140  01FCFA  C08D  F01F         	movff	convertHSV@maxValue,___flsub@b
  5141  01FCFE  C08E  F020         	movff	convertHSV@maxValue+1,___flsub@b+1
  5142  01FD02  C08F  F021         	movff	convertHSV@maxValue+2,___flsub@b+2
  5143  01FD06  C090  F022         	movff	convertHSV@maxValue+3,___flsub@b+3
  5144  01FD0A  ECA8  F0DD         	call	___flsub	;wreg free
  5145  01FD0E  C01F  F02B         	movff	?___flsub,___fldiv@a
  5146  01FD12  C020  F02C         	movff	?___flsub+1,___fldiv@a+1
  5147  01FD16  C021  F02D         	movff	?___flsub+2,___fldiv@a+2
  5148  01FD1A  C022  F02E         	movff	?___flsub+3,___fldiv@a+3
  5149  01FD1E  0100               	movlb	0	; () banked
  5150  01FD20  5191               	movf	convertHSV@i& (0+255),w,b
  5151  01FD22  0D02               	mullw	2
  5152  01FD24  C064  F068         	movff	convertHSV@sc,??_convertHSV
  5153  01FD28  C065  F069         	movff	convertHSV@sc+1,??_convertHSV+1
  5154  01FD2C  50F3               	movf	243,w,c
  5155  01FD2E  2768               	addwf	??_convertHSV& (0+255),f,b
  5156  01FD30  50F4               	movf	244,w,c
  5157  01FD32  2369               	addwfc	(??_convertHSV+1)& (0+255),f,b
  5158  01FD34  0E1E               	movlw	30
  5159  01FD36  2568               	addwf	??_convertHSV& (0+255),w,b
  5160  01FD38  6ED9               	movwf	fsr2l,c
  5161  01FD3A  0E00               	movlw	0
  5162  01FD3C  2169               	addwfc	(??_convertHSV+1)& (0+255),w,b
  5163  01FD3E  6EDA               	movwf	fsr2h,c
  5164  01FD40  CFDE F06A          	movff	postinc2,??_convertHSV+2
  5165  01FD44  CFDD F06B          	movff	postdec2,??_convertHSV+3
  5166  01FD48  5191               	movf	convertHSV@i& (0+255),w,b
  5167  01FD4A  0D02               	mullw	2
  5168  01FD4C  CFF3 F06C          	movff	prodl,??_convertHSV+4
  5169  01FD50  CFF4 F06D          	movff	prodh,??_convertHSV+5
  5170  01FD54  516C               	movf	(??_convertHSV+4)& (0+255),w,b
  5171  01FD56  2564               	addwf	convertHSV@sc& (0+255),w,b
  5172  01FD58  6ED9               	movwf	fsr2l,c
  5173  01FD5A  516D               	movf	(??_convertHSV+5)& (0+255),w,b
  5174  01FD5C  2165               	addwfc	(convertHSV@sc+1)& (0+255),w,b
  5175  01FD5E  6EDA               	movwf	fsr2h,c
  5176  01FD60  CFDE F06E          	movff	postinc2,??_convertHSV+6
  5177  01FD64  CFDD F06F          	movff	postdec2,??_convertHSV+7
  5178  01FD68  516A               	movf	(??_convertHSV+2)& (0+255),w,b
  5179  01FD6A  5F6E               	subwf	(??_convertHSV+6)& (0+255),f,b
  5180  01FD6C  516B               	movf	(??_convertHSV+3)& (0+255),w,b
  5181  01FD6E  5B6F               	subwfb	(??_convertHSV+7)& (0+255),f,b
  5182  01FD70  C06E  F001         	movff	??_convertHSV+6,___xxtofl@val
  5183  01FD74  C06F  F002         	movff	??_convertHSV+7,___xxtofl@val+1
  5184  01FD78  6A03               	clrf	(___xxtofl@val+2)^0,c
  5185  01FD7A  6A04               	clrf	(___xxtofl@val+3)^0,c
  5186  01FD7C  0E00               	movlw	0
  5187  01FD7E  ECE4  F0E9         	call	___xxtofl
  5188  01FD82  C001  F027         	movff	?___xxtofl,___fldiv@b
  5189  01FD86  C002  F028         	movff	?___xxtofl+1,___fldiv@b+1
  5190  01FD8A  C003  F029         	movff	?___xxtofl+2,___fldiv@b+2
  5191  01FD8E  C004  F02A         	movff	?___xxtofl+3,___fldiv@b+3
  5192  01FD92  ECB1  F0EC         	call	___fldiv	;wreg free
  5193  01FD96  C027  F080         	movff	?___fldiv,_convertHSV$2548
  5194  01FD9A  C028  F081         	movff	?___fldiv+1,_convertHSV$2548+1
  5195  01FD9E  C029  F082         	movff	?___fldiv+2,_convertHSV$2548+2
  5196  01FDA2  C02A  F083         	movff	?___fldiv+3,_convertHSV$2548+3
  5197  01FDA6  0E00               	movlw	0
  5198  01FDA8  6E13               	movwf	___fladd@a^0,c
  5199  01FDAA  0E00               	movlw	0
  5200  01FDAC  6E14               	movwf	(___fladd@a+1)^0,c
  5201  01FDAE  0E80               	movlw	128
  5202  01FDB0  6E15               	movwf	(___fladd@a+2)^0,c
  5203  01FDB2  0E40               	movlw	64
  5204  01FDB4  6E16               	movwf	(___fladd@a+3)^0,c
  5205  01FDB6  C080  F00F         	movff	_convertHSV$2548,___fladd@b
  5206  01FDBA  C081  F010         	movff	_convertHSV$2548+1,___fladd@b+1
  5207  01FDBE  C082  F011         	movff	_convertHSV$2548+2,___fladd@b+2
  5208  01FDC2  C083  F012         	movff	_convertHSV$2548+3,___fladd@b+3
  5209  01FDC6  EC93  F0F0         	call	___fladd	;wreg free
  5210  01FDCA  C00F  F040         	movff	?___fladd,___flmul@b
  5211  01FDCE  C010  F041         	movff	?___fladd+1,___flmul@b+1
  5212  01FDD2  C011  F042         	movff	?___fladd+2,___flmul@b+2
  5213  01FDD6  C012  F043         	movff	?___fladd+3,___flmul@b+3
  5214  01FDDA  0E00               	movlw	0
  5215  01FDDC  6E44               	movwf	___flmul@a^0,c
  5216  01FDDE  0E00               	movlw	0
  5217  01FDE0  6E45               	movwf	(___flmul@a+1)^0,c
  5218  01FDE2  0E70               	movlw	112
  5219  01FDE4  6E46               	movwf	(___flmul@a+2)^0,c
  5220  01FDE6  0E42               	movlw	66
  5221  01FDE8  6E47               	movwf	(___flmul@a+3)^0,c
  5222  01FDEA  EC7E  F0EE         	call	___flmul	;wreg free
  5223  01FDEE  C040  F085         	movff	?___flmul,convertHSV@h
  5224  01FDF2  C041  F086         	movff	?___flmul+1,convertHSV@h+1
  5225  01FDF6  C042  F087         	movff	?___flmul+2,convertHSV@h+2
  5226  01FDFA  C043  F088         	movff	?___flmul+3,convertHSV@h+3
  5227                           
  5228                           ;color.c: 214:         break;
  5229  01FDFE  EF1F  F0FF         	goto	l4260
  5230  01FE02                     l4258:
  5231  01FE02  0100               	movlb	0	; () banked
  5232  01FE04  5184               	movf	convertHSV@maxIndex& (0+255),w,b
  5233  01FE06  6F68               	movwf	??_convertHSV& (0+255),b
  5234  01FE08  6B69               	clrf	(??_convertHSV+1)& (0+255),b
  5235                           
  5236                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5237                           ; Switch size 1, requested type "simple"
  5238                           ; Number of cases is 1, Range of values is 0 to 0
  5239                           ; switch strategies available:
  5240                           ; Name         Instructions Cycles
  5241                           ; simple_byte            4     3 (average)
  5242                           ;	Chosen strategy is simple_byte
  5243  01FE0A  5169               	movf	(??_convertHSV+1)& (0+255),w,b
  5244  01FE0C  0A00               	xorlw	0	; case 0
  5245  01FE0E  B4D8               	btfsc	status,2,c
  5246  01FE10  EF0C  F0FF         	goto	l4648
  5247  01FE14  EF1F  F0FF         	goto	l4260
  5248  01FE18                     l4648:
  5249                           
  5250                           ; BSR set to: 0
  5251                           ; Switch size 1, requested type "simple"
  5252                           ; Number of cases is 4, Range of values is 0 to 3
  5253                           ; switch strategies available:
  5254                           ; Name         Instructions Cycles
  5255                           ; simple_byte           13     7 (average)
  5256                           ;	Chosen strategy is simple_byte
  5257  01FE18  5168               	movf	??_convertHSV& (0+255),w,b
  5258  01FE1A  0A00               	xorlw	0	; case 0
  5259  01FE1C  B4D8               	btfsc	status,2,c
  5260  01FE1E  EF69  F0FD         	goto	l4244
  5261  01FE22  0A01               	xorlw	1	; case 1
  5262  01FE24  B4D8               	btfsc	status,2,c
  5263  01FE26  EF73  F0FD         	goto	l4246
  5264  01FE2A  0A03               	xorlw	3	; case 2
  5265  01FE2C  B4D8               	btfsc	status,2,c
  5266  01FE2E  EFE9  F0FD         	goto	l4248
  5267  01FE32  0A01               	xorlw	1	; case 3
  5268  01FE34  B4D8               	btfsc	status,2,c
  5269  01FE36  EF75  F0FE         	goto	l4252
  5270  01FE3A  EF1F  F0FF         	goto	l4260
  5271  01FE3E                     l4260:
  5272                           
  5273                           ;color.c: 218:     if (h<0){
  5274  01FE3E  0100               	movlb	0	; () banked
  5275  01FE40  BF88               	btfsc	(convertHSV@h+3)& (0+255),7,b
  5276  01FE42  EF27  F0FF         	goto	u3600
  5277  01FE46  EF25  F0FF         	goto	u3601
  5278  01FE4A                     u3601:
  5279  01FE4A  EF41  F0FF         	goto	l4264
  5280  01FE4E                     u3600:
  5281  01FE4E                     
  5282                           ; BSR set to: 0
  5283                           ;color.c: 219:         h += 360;
  5284  01FE4E  C085  F00F         	movff	convertHSV@h,___fladd@b
  5285  01FE52  C086  F010         	movff	convertHSV@h+1,___fladd@b+1
  5286  01FE56  C087  F011         	movff	convertHSV@h+2,___fladd@b+2
  5287  01FE5A  C088  F012         	movff	convertHSV@h+3,___fladd@b+3
  5288  01FE5E  0E00               	movlw	0
  5289  01FE60  6E13               	movwf	___fladd@a^0,c
  5290  01FE62  0E00               	movlw	0
  5291  01FE64  6E14               	movwf	(___fladd@a+1)^0,c
  5292  01FE66  0EB4               	movlw	180
  5293  01FE68  6E15               	movwf	(___fladd@a+2)^0,c
  5294  01FE6A  0E43               	movlw	67
  5295  01FE6C  6E16               	movwf	(___fladd@a+3)^0,c
  5296  01FE6E  EC93  F0F0         	call	___fladd	;wreg free
  5297  01FE72  C00F  F085         	movff	?___fladd,convertHSV@h
  5298  01FE76  C010  F086         	movff	?___fladd+1,convertHSV@h+1
  5299  01FE7A  C011  F087         	movff	?___fladd+2,convertHSV@h+2
  5300  01FE7E  C012  F088         	movff	?___fladd+3,convertHSV@h+3
  5301  01FE82                     l4264:
  5302                           
  5303                           ;color.c: 224:     double s;;color.c: 225:     unsigned int ss;;color.c: 226:     s = (m
      +                          axIndex==0)? 0:(maxValue-minValue)/maxValue;
  5304  01FE82  0100               	movlb	0	; () banked
  5305  01FE84  5184               	movf	convertHSV@maxIndex& (0+255),w,b
  5306  01FE86  B4D8               	btfsc	status,2,c
  5307  01FE88  EF48  F0FF         	goto	u3611
  5308  01FE8C  EF4A  F0FF         	goto	u3610
  5309  01FE90                     u3611:
  5310  01FE90  EF78  F0FF         	goto	l4268
  5311  01FE94                     u3610:
  5312  01FE94                     
  5313                           ; BSR set to: 0
  5314  01FE94  C089  F023         	movff	convertHSV@minValue,___flsub@a
  5315  01FE98  C08A  F024         	movff	convertHSV@minValue+1,___flsub@a+1
  5316  01FE9C  C08B  F025         	movff	convertHSV@minValue+2,___flsub@a+2
  5317  01FEA0  C08C  F026         	movff	convertHSV@minValue+3,___flsub@a+3
  5318  01FEA4  C08D  F01F         	movff	convertHSV@maxValue,___flsub@b
  5319  01FEA8  C08E  F020         	movff	convertHSV@maxValue+1,___flsub@b+1
  5320  01FEAC  C08F  F021         	movff	convertHSV@maxValue+2,___flsub@b+2
  5321  01FEB0  C090  F022         	movff	convertHSV@maxValue+3,___flsub@b+3
  5322  01FEB4  ECA8  F0DD         	call	___flsub	;wreg free
  5323  01FEB8  C01F  F027         	movff	?___flsub,___fldiv@b
  5324  01FEBC  C020  F028         	movff	?___flsub+1,___fldiv@b+1
  5325  01FEC0  C021  F029         	movff	?___flsub+2,___fldiv@b+2
  5326  01FEC4  C022  F02A         	movff	?___flsub+3,___fldiv@b+3
  5327  01FEC8  C08D  F02B         	movff	convertHSV@maxValue,___fldiv@a
  5328  01FECC  C08E  F02C         	movff	convertHSV@maxValue+1,___fldiv@a+1
  5329  01FED0  C08F  F02D         	movff	convertHSV@maxValue+2,___fldiv@a+2
  5330  01FED4  C090  F02E         	movff	convertHSV@maxValue+3,___fldiv@a+3
  5331  01FED8  ECB1  F0EC         	call	___fldiv	;wreg free
  5332  01FEDC  C027  F076         	movff	?___fldiv,convertHSV@s
  5333  01FEE0  C028  F077         	movff	?___fldiv+1,convertHSV@s+1
  5334  01FEE4  C029  F078         	movff	?___fldiv+2,convertHSV@s+2
  5335  01FEE8  C02A  F079         	movff	?___fldiv+3,convertHSV@s+3
  5336  01FEEC  EF80  F0FF         	goto	l4270
  5337  01FEF0                     l4268:
  5338                           
  5339                           ; BSR set to: 0
  5340  01FEF0  0E00               	movlw	0
  5341  01FEF2  6F76               	movwf	convertHSV@s& (0+255),b
  5342  01FEF4  0E00               	movlw	0
  5343  01FEF6  6F77               	movwf	(convertHSV@s+1)& (0+255),b
  5344  01FEF8  0E00               	movlw	0
  5345  01FEFA  6F78               	movwf	(convertHSV@s+2)& (0+255),b
  5346  01FEFC  0E00               	movlw	0
  5347  01FEFE  6F79               	movwf	(convertHSV@s+3)& (0+255),b
  5348  01FF00                     l4270:
  5349                           
  5350                           ;color.c: 227:     ss = 100*s;
  5351  01FF00  0E00               	movlw	0
  5352  01FF02  6E44               	movwf	___flmul@a^0,c
  5353  01FF04  0E00               	movlw	0
  5354  01FF06  6E45               	movwf	(___flmul@a+1)^0,c
  5355  01FF08  0EC8               	movlw	200
  5356  01FF0A  6E46               	movwf	(___flmul@a+2)^0,c
  5357  01FF0C  0E42               	movlw	66
  5358  01FF0E  6E47               	movwf	(___flmul@a+3)^0,c
  5359  01FF10  C076  F040         	movff	convertHSV@s,___flmul@b
  5360  01FF14  C077  F041         	movff	convertHSV@s+1,___flmul@b+1
  5361  01FF18  C078  F042         	movff	convertHSV@s+2,___flmul@b+2
  5362  01FF1C  C079  F043         	movff	convertHSV@s+3,___flmul@b+3
  5363  01FF20  EC7E  F0EE         	call	___flmul	;wreg free
  5364  01FF24  C040  F059         	movff	?___flmul,___fltol@f1
  5365  01FF28  C041  F05A         	movff	?___flmul+1,___fltol@f1+1
  5366  01FF2C  C042  F05B         	movff	?___flmul+2,___fltol@f1+2
  5367  01FF30  C043  F05C         	movff	?___flmul+3,___fltol@f1+3
  5368  01FF34  ECE4  F0E5         	call	___fltol	;wreg free
  5369  01FF38  C059  F074         	movff	?___fltol,convertHSV@ss
  5370  01FF3C  C05A  F075         	movff	?___fltol+1,convertHSV@ss+1
  5371  01FF40                     
  5372                           ;color.c: 230:     double v = maxValue;
  5373  01FF40  C08D  F070         	movff	convertHSV@maxValue,convertHSV@v
  5374  01FF44  C08E  F071         	movff	convertHSV@maxValue+1,convertHSV@v+1
  5375  01FF48  C08F  F072         	movff	convertHSV@maxValue+2,convertHSV@v+2
  5376  01FF4C  C090  F073         	movff	convertHSV@maxValue+3,convertHSV@v+3
  5377  01FF50                     
  5378                           ;color.c: 233:     sh->R[i] = h;
  5379  01FF50  C085  F059         	movff	convertHSV@h,___fltol@f1
  5380  01FF54  C086  F05A         	movff	convertHSV@h+1,___fltol@f1+1
  5381  01FF58  C087  F05B         	movff	convertHSV@h+2,___fltol@f1+2
  5382  01FF5C  C088  F05C         	movff	convertHSV@h+3,___fltol@f1+3
  5383  01FF60  ECE4  F0E5         	call	___fltol	;wreg free
  5384  01FF64  0100               	movlb	0	; () banked
  5385  01FF66  5191               	movf	convertHSV@i& (0+255),w,b
  5386  01FF68  0D02               	mullw	2
  5387  01FF6A  CFF3 F068          	movff	prodl,??_convertHSV
  5388  01FF6E  CFF4 F069          	movff	prodh,??_convertHSV+1
  5389  01FF72  5168               	movf	??_convertHSV& (0+255),w,b
  5390  01FF74  2566               	addwf	convertHSV@sh& (0+255),w,b
  5391  01FF76  6ED9               	movwf	fsr2l,c
  5392  01FF78  5169               	movf	(??_convertHSV+1)& (0+255),w,b
  5393  01FF7A  2167               	addwfc	(convertHSV@sh+1)& (0+255),w,b
  5394  01FF7C  6EDA               	movwf	fsr2h,c
  5395  01FF7E  C059  FFDE         	movff	?___fltol,postinc2
  5396  01FF82  C05A  FFDD         	movff	?___fltol+1,postdec2
  5397  01FF86                     
  5398                           ; BSR set to: 0
  5399                           ;color.c: 234:     sh->G[i] = ss;
  5400  01FF86  5191               	movf	convertHSV@i& (0+255),w,b
  5401  01FF88  0D02               	mullw	2
  5402  01FF8A  C066  F068         	movff	convertHSV@sh,??_convertHSV
  5403  01FF8E  C067  F069         	movff	convertHSV@sh+1,??_convertHSV+1
  5404  01FF92  50F3               	movf	243,w,c
  5405  01FF94  2768               	addwf	??_convertHSV& (0+255),f,b
  5406  01FF96  50F4               	movf	244,w,c
  5407  01FF98  2369               	addwfc	(??_convertHSV+1)& (0+255),f,b
  5408  01FF9A  0E1E               	movlw	30
  5409  01FF9C  2568               	addwf	??_convertHSV& (0+255),w,b
  5410  01FF9E  6ED9               	movwf	fsr2l,c
  5411  01FFA0  0E00               	movlw	0
  5412  01FFA2  2169               	addwfc	(??_convertHSV+1)& (0+255),w,b
  5413  01FFA4  6EDA               	movwf	fsr2h,c
  5414  01FFA6  C074  FFDE         	movff	convertHSV@ss,postinc2
  5415  01FFAA  C075  FFDD         	movff	convertHSV@ss+1,postdec2
  5416  01FFAE                     
  5417                           ; BSR set to: 0
  5418                           ;color.c: 235:     sh->B[i] = v;
  5419  01FFAE  C070  F059         	movff	convertHSV@v,___fltol@f1
  5420  01FFB2  C071  F05A         	movff	convertHSV@v+1,___fltol@f1+1
  5421  01FFB6  C072  F05B         	movff	convertHSV@v+2,___fltol@f1+2
  5422  01FFBA  C073  F05C         	movff	convertHSV@v+3,___fltol@f1+3
  5423  01FFBE  ECE4  F0E5         	call	___fltol	;wreg free
  5424  01FFC2  0100               	movlb	0	; () banked
  5425  01FFC4  5191               	movf	convertHSV@i& (0+255),w,b
  5426  01FFC6  0D02               	mullw	2
  5427  01FFC8  C066  F068         	movff	convertHSV@sh,??_convertHSV
  5428  01FFCC  C067  F069         	movff	convertHSV@sh+1,??_convertHSV+1
  5429  01FFD0  50F3               	movf	243,w,c
  5430  01FFD2  2768               	addwf	??_convertHSV& (0+255),f,b
  5431  01FFD4  50F4               	movf	244,w,c
  5432  01FFD6  2369               	addwfc	(??_convertHSV+1)& (0+255),f,b
  5433  01FFD8  0E3C               	movlw	60
  5434  01FFDA  2568               	addwf	??_convertHSV& (0+255),w,b
  5435  01FFDC  6ED9               	movwf	fsr2l,c
  5436  01FFDE  0E00               	movlw	0
  5437  01FFE0  2169               	addwfc	(??_convertHSV+1)& (0+255),w,b
  5438  01FFE2  6EDA               	movwf	fsr2h,c
  5439  01FFE4  C059  FFDE         	movff	?___fltol,postinc2
  5440  01FFE8  C05A  FFDD         	movff	?___fltol+1,postdec2
  5441  01FFEC                     
  5442                           ; BSR set to: 0
  5443                           ;color.c: 236: }
  5444  01FFEC  2B91               	incf	convertHSV@i& (0+255),f,b
  5445  01FFEE                     
  5446                           ; BSR set to: 0
  5447  01FFEE  0E09               	movlw	9
  5448  01FFF0  6591               	cpfsgt	convertHSV@i& (0+255),b
  5449  01FFF2  EFFD  F0FF         	goto	u3621
  5450  01FFF6  EFFF  F0FF         	goto	u3620
  5451  01FFFA                     u3621:
  5452  01FFFA  EF96  F0FA         	goto	l4190
  5453  01FFFE                     u3620:
  5454  01FFFE                     
  5455                           ; BSR set to: 0
  5456  01FFFE  0012               	return		;funcret
  5457  020000                     __end_of_convertHSV:
  5458                           	callstack 0
  5459                           
  5460 ;; *************** function ___xxtofl *****************
  5461 ;; Defined at:
  5462 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\xxtofl.c"
  5463 ;; Parameters:    Size  Location     Type
  5464 ;;  sign            1    wreg     unsigned char 
  5465 ;;  val             4    0[COMRAM] long 
  5466 ;; Auto vars:     Size  Location     Type
  5467 ;;  sign            1    8[COMRAM] unsigned char 
  5468 ;;  arg             4   10[COMRAM] unsigned long 
  5469 ;;  exp             1    9[COMRAM] unsigned char 
  5470 ;; Return value:  Size  Location     Type
  5471 ;;                  4    0[COMRAM] unsigned char 
  5472 ;; Registers used:
  5473 ;;		wreg, status,2, status,0
  5474 ;; Tracked objects:
  5475 ;;		On entry : 0/0
  5476 ;;		On exit  : 0/0
  5477 ;;		Unchanged: 0/0
  5478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5479 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5480 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5481 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5482 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5483 ;;Total ram usage:       14 bytes
  5484 ;; Hardware stack levels used: 1
  5485 ;; This function calls:
  5486 ;;		Nothing
  5487 ;; This function is called by:
  5488 ;;		_convertHSV
  5489 ;;		_findHSV
  5490 ;; This function uses a non-reentrant model
  5491 ;;
  5492                           
  5493                           	psect	text10
  5494  01D3C8                     __ptext10:
  5495                           	callstack 0
  5496  01D3C8                     ___xxtofl:
  5497                           	callstack 28
  5498                           
  5499                           ; BSR set to: 0
  5500                           ;incstack = 0
  5501                           ;___xxtofl@sign stored from wreg
  5502  01D3C8  6E09               	movwf	___xxtofl@sign^0,c
  5503  01D3CA  5009               	movf	___xxtofl@sign^0,w,c
  5504  01D3CC  B4D8               	btfsc	status,2,c
  5505  01D3CE  EFEB  F0E9         	goto	u3221
  5506  01D3D2  EFED  F0E9         	goto	u3220
  5507  01D3D6                     u3221:
  5508  01D3D6  EF0F  F0EA         	goto	l1256
  5509  01D3DA                     u3220:
  5510  01D3DA  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  5511  01D3DC  EFF4  F0E9         	goto	u3230
  5512  01D3E0  EFF2  F0E9         	goto	u3231
  5513  01D3E4                     u3231:
  5514  01D3E4  EF0F  F0EA         	goto	l1256
  5515  01D3E8                     u3230:
  5516  01D3E8  C001  F005         	movff	___xxtofl@val,??___xxtofl
  5517  01D3EC  C002  F006         	movff	___xxtofl@val+1,??___xxtofl+1
  5518  01D3F0  C003  F007         	movff	___xxtofl@val+2,??___xxtofl+2
  5519  01D3F4  C004  F008         	movff	___xxtofl@val+3,??___xxtofl+3
  5520  01D3F8  1E05               	comf	??___xxtofl^0,f,c
  5521  01D3FA  1E06               	comf	(??___xxtofl+1)^0,f,c
  5522  01D3FC  1E07               	comf	(??___xxtofl+2)^0,f,c
  5523  01D3FE  1E08               	comf	(??___xxtofl+3)^0,f,c
  5524  01D400  2A05               	incf	??___xxtofl^0,f,c
  5525  01D402  0E00               	movlw	0
  5526  01D404  2206               	addwfc	(??___xxtofl+1)^0,f,c
  5527  01D406  2207               	addwfc	(??___xxtofl+2)^0,f,c
  5528  01D408  2208               	addwfc	(??___xxtofl+3)^0,f,c
  5529  01D40A  C005  F00B         	movff	??___xxtofl,___xxtofl@arg
  5530  01D40E  C006  F00C         	movff	??___xxtofl+1,___xxtofl@arg+1
  5531  01D412  C007  F00D         	movff	??___xxtofl+2,___xxtofl@arg+2
  5532  01D416  C008  F00E         	movff	??___xxtofl+3,___xxtofl@arg+3
  5533  01D41A  EF17  F0EA         	goto	l3858
  5534  01D41E                     l1256:
  5535  01D41E  C001  F00B         	movff	___xxtofl@val,___xxtofl@arg
  5536  01D422  C002  F00C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  5537  01D426  C003  F00D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  5538  01D42A  C004  F00E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  5539  01D42E                     l3858:
  5540  01D42E  5001               	movf	___xxtofl@val^0,w,c
  5541  01D430  1002               	iorwf	(___xxtofl@val+1)^0,w,c
  5542  01D432  1003               	iorwf	(___xxtofl@val+2)^0,w,c
  5543  01D434  1004               	iorwf	(___xxtofl@val+3)^0,w,c
  5544  01D436  A4D8               	btfss	status,2,c
  5545  01D438  EF20  F0EA         	goto	u3241
  5546  01D43C  EF22  F0EA         	goto	u3240
  5547  01D440                     u3241:
  5548  01D440  EF2C  F0EA         	goto	l3864
  5549  01D444                     u3240:
  5550  01D444  0E00               	movlw	0
  5551  01D446  6E01               	movwf	?___xxtofl^0,c
  5552  01D448  0E00               	movlw	0
  5553  01D44A  6E02               	movwf	(?___xxtofl+1)^0,c
  5554  01D44C  0E00               	movlw	0
  5555  01D44E  6E03               	movwf	(?___xxtofl+2)^0,c
  5556  01D450  0E00               	movlw	0
  5557  01D452  6E04               	movwf	(?___xxtofl+3)^0,c
  5558  01D454  EFBD  F0EA         	goto	l1259
  5559  01D458                     l3864:
  5560  01D458  0E96               	movlw	150
  5561  01D45A  6E0A               	movwf	___xxtofl@exp^0,c
  5562  01D45C  EF36  F0EA         	goto	l3868
  5563  01D460                     l3866:
  5564  01D460  2A0A               	incf	___xxtofl@exp^0,f,c
  5565  01D462  90D8               	bcf	status,0,c
  5566  01D464  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  5567  01D466  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  5568  01D468  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  5569  01D46A  320B               	rrcf	___xxtofl@arg^0,f,c
  5570  01D46C                     l3868:
  5571  01D46C  0E00               	movlw	0
  5572  01D46E  140B               	andwf	___xxtofl@arg^0,w,c
  5573  01D470  6E05               	movwf	??___xxtofl^0,c
  5574  01D472  0E00               	movlw	0
  5575  01D474  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  5576  01D476  6E06               	movwf	(??___xxtofl+1)^0,c
  5577  01D478  0E00               	movlw	0
  5578  01D47A  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  5579  01D47C  6E07               	movwf	(??___xxtofl+2)^0,c
  5580  01D47E  0EFE               	movlw	254
  5581  01D480  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  5582  01D482  6E08               	movwf	(??___xxtofl+3)^0,c
  5583  01D484  5005               	movf	??___xxtofl^0,w,c
  5584  01D486  1006               	iorwf	(??___xxtofl+1)^0,w,c
  5585  01D488  1007               	iorwf	(??___xxtofl+2)^0,w,c
  5586  01D48A  1008               	iorwf	(??___xxtofl+3)^0,w,c
  5587  01D48C  A4D8               	btfss	status,2,c
  5588  01D48E  EF4B  F0EA         	goto	u3251
  5589  01D492  EF4D  F0EA         	goto	u3250
  5590  01D496                     u3251:
  5591  01D496  EF30  F0EA         	goto	l3866
  5592  01D49A                     u3250:
  5593  01D49A  EF5B  F0EA         	goto	l1263
  5594  01D49E                     l3870:
  5595  01D49E  2A0A               	incf	___xxtofl@exp^0,f,c
  5596  01D4A0  0E01               	movlw	1
  5597  01D4A2  260B               	addwf	___xxtofl@arg^0,f,c
  5598  01D4A4  0E00               	movlw	0
  5599  01D4A6  220C               	addwfc	(___xxtofl@arg+1)^0,f,c
  5600  01D4A8  220D               	addwfc	(___xxtofl@arg+2)^0,f,c
  5601  01D4AA  220E               	addwfc	(___xxtofl@arg+3)^0,f,c
  5602  01D4AC  90D8               	bcf	status,0,c
  5603  01D4AE  320E               	rrcf	(___xxtofl@arg+3)^0,f,c
  5604  01D4B0  320D               	rrcf	(___xxtofl@arg+2)^0,f,c
  5605  01D4B2  320C               	rrcf	(___xxtofl@arg+1)^0,f,c
  5606  01D4B4  320B               	rrcf	___xxtofl@arg^0,f,c
  5607  01D4B6                     l1263:
  5608  01D4B6  0E00               	movlw	0
  5609  01D4B8  140B               	andwf	___xxtofl@arg^0,w,c
  5610  01D4BA  6E05               	movwf	??___xxtofl^0,c
  5611  01D4BC  0E00               	movlw	0
  5612  01D4BE  140C               	andwf	(___xxtofl@arg+1)^0,w,c
  5613  01D4C0  6E06               	movwf	(??___xxtofl+1)^0,c
  5614  01D4C2  0E00               	movlw	0
  5615  01D4C4  140D               	andwf	(___xxtofl@arg+2)^0,w,c
  5616  01D4C6  6E07               	movwf	(??___xxtofl+2)^0,c
  5617  01D4C8  0EFF               	movlw	255
  5618  01D4CA  140E               	andwf	(___xxtofl@arg+3)^0,w,c
  5619  01D4CC  6E08               	movwf	(??___xxtofl+3)^0,c
  5620  01D4CE  5005               	movf	??___xxtofl^0,w,c
  5621  01D4D0  1006               	iorwf	(??___xxtofl+1)^0,w,c
  5622  01D4D2  1007               	iorwf	(??___xxtofl+2)^0,w,c
  5623  01D4D4  1008               	iorwf	(??___xxtofl+3)^0,w,c
  5624  01D4D6  A4D8               	btfss	status,2,c
  5625  01D4D8  EF70  F0EA         	goto	u3261
  5626  01D4DC  EF72  F0EA         	goto	u3260
  5627  01D4E0                     u3261:
  5628  01D4E0  EF4F  F0EA         	goto	l3870
  5629  01D4E4                     u3260:
  5630  01D4E4  EF7A  F0EA         	goto	l3878
  5631  01D4E8                     l3876:
  5632  01D4E8  060A               	decf	___xxtofl@exp^0,f,c
  5633  01D4EA  90D8               	bcf	status,0,c
  5634  01D4EC  360B               	rlcf	___xxtofl@arg^0,f,c
  5635  01D4EE  360C               	rlcf	(___xxtofl@arg+1)^0,f,c
  5636  01D4F0  360D               	rlcf	(___xxtofl@arg+2)^0,f,c
  5637  01D4F2  360E               	rlcf	(___xxtofl@arg+3)^0,f,c
  5638  01D4F4                     l3878:
  5639  01D4F4  BE0D               	btfsc	(___xxtofl@arg+2)^0,7,c
  5640  01D4F6  EF7F  F0EA         	goto	u3271
  5641  01D4FA  EF81  F0EA         	goto	u3270
  5642  01D4FE                     u3271:
  5643  01D4FE  EF89  F0EA         	goto	l1270
  5644  01D502                     u3270:
  5645  01D502  0E02               	movlw	2
  5646  01D504  600A               	cpfslt	___xxtofl@exp^0,c
  5647  01D506  EF87  F0EA         	goto	u3281
  5648  01D50A  EF89  F0EA         	goto	u3280
  5649  01D50E                     u3281:
  5650  01D50E  EF74  F0EA         	goto	l3876
  5651  01D512                     u3280:
  5652  01D512                     l1270:
  5653  01D512  B00A               	btfsc	___xxtofl@exp^0,0,c
  5654  01D514  EF8E  F0EA         	goto	u3291
  5655  01D518  EF90  F0EA         	goto	u3290
  5656  01D51C                     u3291:
  5657  01D51C  EF91  F0EA         	goto	l3884
  5658  01D520                     u3290:
  5659  01D520  9E0D               	bcf	(___xxtofl@arg+2)^0,7,c
  5660  01D522                     l3884:
  5661  01D522  90D8               	bcf	status,0,c
  5662  01D524  320A               	rrcf	___xxtofl@exp^0,f,c
  5663  01D526  C00A  F005         	movff	___xxtofl@exp,??___xxtofl
  5664  01D52A  6A06               	clrf	(??___xxtofl+1)^0,c
  5665  01D52C  6A07               	clrf	(??___xxtofl+2)^0,c
  5666  01D52E  6A08               	clrf	(??___xxtofl+3)^0,c
  5667  01D530  C005  F008         	movff	??___xxtofl,??___xxtofl+3
  5668  01D534  6A07               	clrf	(??___xxtofl+2)^0,c
  5669  01D536  6A06               	clrf	(??___xxtofl+1)^0,c
  5670  01D538  6A05               	clrf	??___xxtofl^0,c
  5671  01D53A  5005               	movf	??___xxtofl^0,w,c
  5672  01D53C  120B               	iorwf	___xxtofl@arg^0,f,c
  5673  01D53E  5006               	movf	(??___xxtofl+1)^0,w,c
  5674  01D540  120C               	iorwf	(___xxtofl@arg+1)^0,f,c
  5675  01D542  5007               	movf	(??___xxtofl+2)^0,w,c
  5676  01D544  120D               	iorwf	(___xxtofl@arg+2)^0,f,c
  5677  01D546  5008               	movf	(??___xxtofl+3)^0,w,c
  5678  01D548  120E               	iorwf	(___xxtofl@arg+3)^0,f,c
  5679  01D54A  5009               	movf	___xxtofl@sign^0,w,c
  5680  01D54C  B4D8               	btfsc	status,2,c
  5681  01D54E  EFAB  F0EA         	goto	u3301
  5682  01D552  EFAD  F0EA         	goto	u3300
  5683  01D556                     u3301:
  5684  01D556  EFB5  F0EA         	goto	l3894
  5685  01D55A                     u3300:
  5686  01D55A  BE04               	btfsc	(___xxtofl@val+3)^0,7,c
  5687  01D55C  EFB4  F0EA         	goto	u3310
  5688  01D560  EFB2  F0EA         	goto	u3311
  5689  01D564                     u3311:
  5690  01D564  EFB5  F0EA         	goto	l3894
  5691  01D568                     u3310:
  5692  01D568  8E0E               	bsf	(___xxtofl@arg+3)^0,7,c
  5693  01D56A                     l3894:
  5694  01D56A  C00B  F001         	movff	___xxtofl@arg,?___xxtofl
  5695  01D56E  C00C  F002         	movff	___xxtofl@arg+1,?___xxtofl+1
  5696  01D572  C00D  F003         	movff	___xxtofl@arg+2,?___xxtofl+2
  5697  01D576  C00E  F004         	movff	___xxtofl@arg+3,?___xxtofl+3
  5698  01D57A                     l1259:
  5699  01D57A  0012               	return		;funcret
  5700  01D57C                     __end_of___xxtofl:
  5701                           	callstack 0
  5702                           
  5703 ;; *************** function ___fltol *****************
  5704 ;; Defined at:
  5705 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\fltol.c"
  5706 ;; Parameters:    Size  Location     Type
  5707 ;;  f1              4   88[COMRAM] unsigned char 
  5708 ;; Auto vars:     Size  Location     Type
  5709 ;;  exp1            1   93[COMRAM] unsigned char 
  5710 ;;  sign1           1   92[COMRAM] unsigned char 
  5711 ;; Return value:  Size  Location     Type
  5712 ;;                  4   88[COMRAM] long 
  5713 ;; Registers used:
  5714 ;;		wreg, status,2, status,0
  5715 ;; Tracked objects:
  5716 ;;		On entry : 0/0
  5717 ;;		On exit  : 0/0
  5718 ;;		Unchanged: 0/0
  5719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5720 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5721 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5722 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5723 ;;      Totals:         6       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5724 ;;Total ram usage:       10 bytes
  5725 ;; Hardware stack levels used: 1
  5726 ;; This function calls:
  5727 ;;		Nothing
  5728 ;; This function is called by:
  5729 ;;		_convertHSV
  5730 ;;		_findHSV
  5731 ;; This function uses a non-reentrant model
  5732 ;;
  5733                           
  5734                           	psect	text11
  5735  01CBC8                     __ptext11:
  5736                           	callstack 0
  5737  01CBC8                     ___fltol:
  5738                           	callstack 28
  5739  01CBC8  345B               	rlcf	(___fltol@f1+2)^0,w,c
  5740  01CBCA  345C               	rlcf	(___fltol@f1+3)^0,w,c
  5741  01CBCC  6E5E               	movwf	___fltol@exp1^0,c
  5742  01CBCE  505E               	movf	___fltol@exp1^0,w,c
  5743  01CBD0  A4D8               	btfss	status,2,c
  5744  01CBD2  EFED  F0E5         	goto	u3151
  5745  01CBD6  EFEF  F0E5         	goto	u3150
  5746  01CBDA                     u3151:
  5747  01CBDA  EFF9  F0E5         	goto	l3814
  5748  01CBDE                     u3150:
  5749  01CBDE                     l3810:
  5750  01CBDE  0E00               	movlw	0
  5751  01CBE0  6E59               	movwf	?___fltol^0,c
  5752  01CBE2  0E00               	movlw	0
  5753  01CBE4  6E5A               	movwf	(?___fltol+1)^0,c
  5754  01CBE6  0E00               	movlw	0
  5755  01CBE8  6E5B               	movwf	(?___fltol+2)^0,c
  5756  01CBEA  0E00               	movlw	0
  5757  01CBEC  6E5C               	movwf	(?___fltol+3)^0,c
  5758  01CBEE  EF67  F0E6         	goto	l898
  5759  01CBF2                     l3814:
  5760  01CBF2  C059  F060         	movff	___fltol@f1,??___fltol
  5761  01CBF6  C05A  F061         	movff	___fltol@f1+1,??___fltol+1
  5762  01CBFA  C05B  F062         	movff	___fltol@f1+2,??___fltol+2
  5763  01CBFE  C05C  F063         	movff	___fltol@f1+3,??___fltol+3
  5764  01CC02  0E20               	movlw	32
  5765  01CC04  EF0A  F0E6         	goto	u3160
  5766  01CC08                     u3165:
  5767  01CC08  0100               	movlb	0	; () banked
  5768  01CC0A  90D8               	bcf	status,0,c
  5769  01CC0C  3363               	rrcf	(??___fltol+3)& (0+255),f,b
  5770  01CC0E  3362               	rrcf	(??___fltol+2)& (0+255),f,b
  5771  01CC10  3361               	rrcf	(??___fltol+1)& (0+255),f,b
  5772  01CC12  3360               	rrcf	??___fltol& (0+255),f,b
  5773  01CC14                     u3160:
  5774  01CC14  2EE8               	decfsz	wreg,f,c
  5775  01CC16  EF04  F0E6         	goto	u3165
  5776  01CC1A  5160               	movf	??___fltol& (0+255),w,b
  5777  01CC1C  6E5D               	movwf	___fltol@sign1^0,c
  5778  01CC1E                     
  5779                           ; BSR set to: 0
  5780  01CC1E  8E5B               	bsf	(___fltol@f1+2)^0,7,c
  5781  01CC20                     
  5782                           ; BSR set to: 0
  5783  01CC20  0EFF               	movlw	255
  5784  01CC22  1659               	andwf	___fltol@f1^0,f,c
  5785  01CC24  0EFF               	movlw	255
  5786  01CC26  165A               	andwf	(___fltol@f1+1)^0,f,c
  5787  01CC28  0EFF               	movlw	255
  5788  01CC2A  165B               	andwf	(___fltol@f1+2)^0,f,c
  5789  01CC2C  0E00               	movlw	0
  5790  01CC2E  165C               	andwf	(___fltol@f1+3)^0,f,c
  5791  01CC30                     
  5792                           ; BSR set to: 0
  5793  01CC30  0E96               	movlw	150
  5794  01CC32  5E5E               	subwf	___fltol@exp1^0,f,c
  5795  01CC34                     
  5796                           ; BSR set to: 0
  5797  01CC34  BE5E               	btfsc	___fltol@exp1^0,7,c
  5798  01CC36  EF21  F0E6         	goto	u3170
  5799  01CC3A  EF1F  F0E6         	goto	u3171
  5800  01CC3E                     u3171:
  5801  01CC3E  EF37  F0E6         	goto	l3834
  5802  01CC42                     u3170:
  5803  01CC42                     
  5804                           ; BSR set to: 0
  5805  01CC42  505E               	movf	___fltol@exp1^0,w,c
  5806  01CC44  0A80               	xorlw	128
  5807  01CC46  0F97               	addlw	151
  5808  01CC48  B0D8               	btfsc	status,0,c
  5809  01CC4A  EF29  F0E6         	goto	u3181
  5810  01CC4E  EF2B  F0E6         	goto	u3180
  5811  01CC52                     u3181:
  5812  01CC52  EF2D  F0E6         	goto	l3830
  5813  01CC56                     u3180:
  5814  01CC56  EFEF  F0E5         	goto	l3810
  5815  01CC5A                     l3830:
  5816  01CC5A  90D8               	bcf	status,0,c
  5817  01CC5C  325C               	rrcf	(___fltol@f1+3)^0,f,c
  5818  01CC5E  325B               	rrcf	(___fltol@f1+2)^0,f,c
  5819  01CC60  325A               	rrcf	(___fltol@f1+1)^0,f,c
  5820  01CC62  3259               	rrcf	___fltol@f1^0,f,c
  5821  01CC64  3E5E               	incfsz	___fltol@exp1^0,f,c
  5822  01CC66  EF2D  F0E6         	goto	l3830
  5823  01CC6A  EF4F  F0E6         	goto	l3844
  5824  01CC6E                     l3834:
  5825                           
  5826                           ; BSR set to: 0
  5827  01CC6E  0E1F               	movlw	31
  5828  01CC70  645E               	cpfsgt	___fltol@exp1^0,c
  5829  01CC72  EF3D  F0E6         	goto	u3191
  5830  01CC76  EF3F  F0E6         	goto	u3190
  5831  01CC7A                     u3191:
  5832  01CC7A  EF47  F0E6         	goto	l3842
  5833  01CC7E                     u3190:
  5834  01CC7E  EFEF  F0E5         	goto	l3810
  5835  01CC82                     l3840:
  5836  01CC82  90D8               	bcf	status,0,c
  5837  01CC84  3659               	rlcf	___fltol@f1^0,f,c
  5838  01CC86  365A               	rlcf	(___fltol@f1+1)^0,f,c
  5839  01CC88  365B               	rlcf	(___fltol@f1+2)^0,f,c
  5840  01CC8A  365C               	rlcf	(___fltol@f1+3)^0,f,c
  5841  01CC8C  065E               	decf	___fltol@exp1^0,f,c
  5842  01CC8E                     l3842:
  5843  01CC8E  505E               	movf	___fltol@exp1^0,w,c
  5844  01CC90  A4D8               	btfss	status,2,c
  5845  01CC92  EF4D  F0E6         	goto	u3201
  5846  01CC96  EF4F  F0E6         	goto	u3200
  5847  01CC9A                     u3201:
  5848  01CC9A  EF41  F0E6         	goto	l3840
  5849  01CC9E                     u3200:
  5850  01CC9E                     l3844:
  5851  01CC9E  505D               	movf	___fltol@sign1^0,w,c
  5852  01CCA0  B4D8               	btfsc	status,2,c
  5853  01CCA2  EF55  F0E6         	goto	u3211
  5854  01CCA6  EF57  F0E6         	goto	u3210
  5855  01CCAA                     u3211:
  5856  01CCAA  EF5F  F0E6         	goto	l3848
  5857  01CCAE                     u3210:
  5858  01CCAE  1E5C               	comf	(___fltol@f1+3)^0,f,c
  5859  01CCB0  1E5B               	comf	(___fltol@f1+2)^0,f,c
  5860  01CCB2  1E5A               	comf	(___fltol@f1+1)^0,f,c
  5861  01CCB4  6C59               	negf	___fltol@f1^0,c
  5862  01CCB6  0E00               	movlw	0
  5863  01CCB8  225A               	addwfc	(___fltol@f1+1)^0,f,c
  5864  01CCBA  225B               	addwfc	(___fltol@f1+2)^0,f,c
  5865  01CCBC  225C               	addwfc	(___fltol@f1+3)^0,f,c
  5866  01CCBE                     l3848:
  5867  01CCBE  C059  F059         	movff	___fltol@f1,?___fltol
  5868  01CCC2  C05A  F05A         	movff	___fltol@f1+1,?___fltol+1
  5869  01CCC6  C05B  F05B         	movff	___fltol@f1+2,?___fltol+2
  5870  01CCCA  C05C  F05C         	movff	___fltol@f1+3,?___fltol+3
  5871  01CCCE                     l898:
  5872  01CCCE  0012               	return		;funcret
  5873  01CCD0                     __end_of___fltol:
  5874                           	callstack 0
  5875                           
  5876 ;; *************** function ___flsub *****************
  5877 ;; Defined at:
  5878 ;;		line 245 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\sprcadd.c"
  5879 ;; Parameters:    Size  Location     Type
  5880 ;;  b               4   30[COMRAM] long 
  5881 ;;  a               4   34[COMRAM] long 
  5882 ;; Auto vars:     Size  Location     Type
  5883 ;;		None
  5884 ;; Return value:  Size  Location     Type
  5885 ;;                  4   30[COMRAM] long 
  5886 ;; Registers used:
  5887 ;;		wreg, status,2, status,0, cstack
  5888 ;; Tracked objects:
  5889 ;;		On entry : 0/0
  5890 ;;		On exit  : 0/0
  5891 ;;		Unchanged: 0/0
  5892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5893 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5896 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5897 ;;Total ram usage:        8 bytes
  5898 ;; Hardware stack levels used: 1
  5899 ;; Hardware stack levels required when called: 1
  5900 ;; This function calls:
  5901 ;;		___fladd
  5902 ;; This function is called by:
  5903 ;;		_convertHSV
  5904 ;;		_findHSV
  5905 ;; This function uses a non-reentrant model
  5906 ;;
  5907                           
  5908                           	psect	text12
  5909  01BB50                     __ptext12:
  5910                           	callstack 0
  5911  01BB50                     ___flsub:
  5912                           	callstack 27
  5913  01BB50  0E00               	movlw	0
  5914  01BB52  1A23               	xorwf	___flsub@a^0,f,c
  5915  01BB54  0E00               	movlw	0
  5916  01BB56  1A24               	xorwf	(___flsub@a+1)^0,f,c
  5917  01BB58  0E00               	movlw	0
  5918  01BB5A  1A25               	xorwf	(___flsub@a+2)^0,f,c
  5919  01BB5C  0E80               	movlw	128
  5920  01BB5E  1A26               	xorwf	(___flsub@a+3)^0,f,c
  5921  01BB60  C01F  F00F         	movff	___flsub@b,___fladd@b
  5922  01BB64  C020  F010         	movff	___flsub@b+1,___fladd@b+1
  5923  01BB68  C021  F011         	movff	___flsub@b+2,___fladd@b+2
  5924  01BB6C  C022  F012         	movff	___flsub@b+3,___fladd@b+3
  5925  01BB70  C023  F013         	movff	___flsub@a,___fladd@a
  5926  01BB74  C024  F014         	movff	___flsub@a+1,___fladd@a+1
  5927  01BB78  C025  F015         	movff	___flsub@a+2,___fladd@a+2
  5928  01BB7C  C026  F016         	movff	___flsub@a+3,___fladd@a+3
  5929  01BB80  EC93  F0F0         	call	___fladd	;wreg free
  5930  01BB84  C00F  F01F         	movff	?___fladd,?___flsub
  5931  01BB88  C010  F020         	movff	?___fladd+1,?___flsub+1
  5932  01BB8C  C011  F021         	movff	?___fladd+2,?___flsub+2
  5933  01BB90  C012  F022         	movff	?___fladd+3,?___flsub+3
  5934  01BB94  0012               	return		;funcret
  5935  01BB96                     __end_of___flsub:
  5936                           	callstack 0
  5937                           
  5938 ;; *************** function ___fladd *****************
  5939 ;; Defined at:
  5940 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\sprcadd.c"
  5941 ;; Parameters:    Size  Location     Type
  5942 ;;  b               4   14[COMRAM] long 
  5943 ;;  a               4   18[COMRAM] long 
  5944 ;; Auto vars:     Size  Location     Type
  5945 ;;  grs             1   29[COMRAM] unsigned char 
  5946 ;;  bexp            1   28[COMRAM] unsigned char 
  5947 ;;  aexp            1   27[COMRAM] unsigned char 
  5948 ;;  signs           1   26[COMRAM] unsigned char 
  5949 ;; Return value:  Size  Location     Type
  5950 ;;                  4   14[COMRAM] unsigned char 
  5951 ;; Registers used:
  5952 ;;		wreg, status,2, status,0
  5953 ;; Tracked objects:
  5954 ;;		On entry : 0/0
  5955 ;;		On exit  : 0/0
  5956 ;;		Unchanged: 0/0
  5957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5958 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5959 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5960 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5961 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5962 ;;Total ram usage:       16 bytes
  5963 ;; Hardware stack levels used: 1
  5964 ;; This function calls:
  5965 ;;		Nothing
  5966 ;; This function is called by:
  5967 ;;		_convertHSV
  5968 ;;		_findHSV
  5969 ;;		___flsub
  5970 ;; This function uses a non-reentrant model
  5971 ;;
  5972                           
  5973                           	psect	text13
  5974  01E126                     __ptext13:
  5975                           	callstack 0
  5976  01E126                     ___fladd:
  5977                           	callstack 27
  5978  01E126  5012               	movf	(___fladd@b+3)^0,w,c
  5979  01E128  0B80               	andlw	128
  5980  01E12A  6E1B               	movwf	___fladd@signs^0,c
  5981  01E12C  5012               	movf	(___fladd@b+3)^0,w,c
  5982  01E12E  2412               	addwf	(___fladd@b+3)^0,w,c
  5983  01E130  6E1D               	movwf	___fladd@bexp^0,c
  5984  01E132  AE11               	btfss	(___fladd@b+2)^0,7,c
  5985  01E134  EF9E  F0F0         	goto	u2241
  5986  01E138  EFA0  F0F0         	goto	u2240
  5987  01E13C                     u2241:
  5988  01E13C  EFA1  F0F0         	goto	l3138
  5989  01E140                     u2240:
  5990  01E140  801D               	bsf	___fladd@bexp^0,0,c
  5991  01E142                     l3138:
  5992  01E142  501D               	movf	___fladd@bexp^0,w,c
  5993  01E144  B4D8               	btfsc	status,2,c
  5994  01E146  EFA7  F0F0         	goto	u2251
  5995  01E14A  EFA9  F0F0         	goto	u2250
  5996  01E14E                     u2251:
  5997  01E14E  EFBE  F0F0         	goto	l3148
  5998  01E152                     u2250:
  5999  01E152  281D               	incf	___fladd@bexp^0,w,c
  6000  01E154  A4D8               	btfss	status,2,c
  6001  01E156  EFAF  F0F0         	goto	u2261
  6002  01E15A  EFB1  F0F0         	goto	u2260
  6003  01E15E                     u2261:
  6004  01E15E  EFB9  F0F0         	goto	l3144
  6005  01E162                     u2260:
  6006  01E162  0E00               	movlw	0
  6007  01E164  6E0F               	movwf	___fladd@b^0,c
  6008  01E166  0E00               	movlw	0
  6009  01E168  6E10               	movwf	(___fladd@b+1)^0,c
  6010  01E16A  0E00               	movlw	0
  6011  01E16C  6E11               	movwf	(___fladd@b+2)^0,c
  6012  01E16E  0E00               	movlw	0
  6013  01E170  6E12               	movwf	(___fladd@b+3)^0,c
  6014  01E172                     l3144:
  6015  01E172  8E11               	bsf	(___fladd@b+2)^0,7,c
  6016  01E174  0E00               	movlw	0
  6017  01E176  6E12               	movwf	(___fladd@b+3)^0,c
  6018  01E178  EFC6  F0F0         	goto	l3150
  6019  01E17C                     l3148:
  6020  01E17C  0E00               	movlw	0
  6021  01E17E  6E0F               	movwf	___fladd@b^0,c
  6022  01E180  0E00               	movlw	0
  6023  01E182  6E10               	movwf	(___fladd@b+1)^0,c
  6024  01E184  0E00               	movlw	0
  6025  01E186  6E11               	movwf	(___fladd@b+2)^0,c
  6026  01E188  0E00               	movlw	0
  6027  01E18A  6E12               	movwf	(___fladd@b+3)^0,c
  6028  01E18C                     l3150:
  6029  01E18C  5016               	movf	(___fladd@a+3)^0,w,c
  6030  01E18E  0B80               	andlw	128
  6031  01E190  6E1C               	movwf	___fladd@aexp^0,c
  6032  01E192  501B               	movf	___fladd@signs^0,w,c
  6033  01E194  181C               	xorwf	___fladd@aexp^0,w,c
  6034  01E196  B4D8               	btfsc	status,2,c
  6035  01E198  EFD0  F0F0         	goto	u2271
  6036  01E19C  EFD2  F0F0         	goto	u2270
  6037  01E1A0                     u2271:
  6038  01E1A0  EFD3  F0F0         	goto	l3156
  6039  01E1A4                     u2270:
  6040  01E1A4  8C1B               	bsf	___fladd@signs^0,6,c
  6041  01E1A6                     l3156:
  6042  01E1A6  5016               	movf	(___fladd@a+3)^0,w,c
  6043  01E1A8  2416               	addwf	(___fladd@a+3)^0,w,c
  6044  01E1AA  6E1C               	movwf	___fladd@aexp^0,c
  6045  01E1AC  AE15               	btfss	(___fladd@a+2)^0,7,c
  6046  01E1AE  EFDB  F0F0         	goto	u2281
  6047  01E1B2  EFDD  F0F0         	goto	u2280
  6048  01E1B6                     u2281:
  6049  01E1B6  EFDE  F0F0         	goto	l3162
  6050  01E1BA                     u2280:
  6051  01E1BA  801C               	bsf	___fladd@aexp^0,0,c
  6052  01E1BC                     l3162:
  6053  01E1BC  501C               	movf	___fladd@aexp^0,w,c
  6054  01E1BE  B4D8               	btfsc	status,2,c
  6055  01E1C0  EFE4  F0F0         	goto	u2291
  6056  01E1C4  EFE6  F0F0         	goto	u2290
  6057  01E1C8                     u2291:
  6058  01E1C8  EFFB  F0F0         	goto	l3172
  6059  01E1CC                     u2290:
  6060  01E1CC  281C               	incf	___fladd@aexp^0,w,c
  6061  01E1CE  A4D8               	btfss	status,2,c
  6062  01E1D0  EFEC  F0F0         	goto	u2301
  6063  01E1D4  EFEE  F0F0         	goto	u2300
  6064  01E1D8                     u2301:
  6065  01E1D8  EFF6  F0F0         	goto	l3168
  6066  01E1DC                     u2300:
  6067  01E1DC  0E00               	movlw	0
  6068  01E1DE  6E13               	movwf	___fladd@a^0,c
  6069  01E1E0  0E00               	movlw	0
  6070  01E1E2  6E14               	movwf	(___fladd@a+1)^0,c
  6071  01E1E4  0E00               	movlw	0
  6072  01E1E6  6E15               	movwf	(___fladd@a+2)^0,c
  6073  01E1E8  0E00               	movlw	0
  6074  01E1EA  6E16               	movwf	(___fladd@a+3)^0,c
  6075  01E1EC                     l3168:
  6076  01E1EC  8E15               	bsf	(___fladd@a+2)^0,7,c
  6077  01E1EE  0E00               	movlw	0
  6078  01E1F0  6E16               	movwf	(___fladd@a+3)^0,c
  6079  01E1F2  EF03  F0F1         	goto	l3174
  6080  01E1F6                     l3172:
  6081  01E1F6  0E00               	movlw	0
  6082  01E1F8  6E13               	movwf	___fladd@a^0,c
  6083  01E1FA  0E00               	movlw	0
  6084  01E1FC  6E14               	movwf	(___fladd@a+1)^0,c
  6085  01E1FE  0E00               	movlw	0
  6086  01E200  6E15               	movwf	(___fladd@a+2)^0,c
  6087  01E202  0E00               	movlw	0
  6088  01E204  6E16               	movwf	(___fladd@a+3)^0,c
  6089  01E206                     l3174:
  6090  01E206  501D               	movf	___fladd@bexp^0,w,c
  6091  01E208  5C1C               	subwf	___fladd@aexp^0,w,c
  6092  01E20A  B0D8               	btfsc	status,0,c
  6093  01E20C  EF0A  F0F1         	goto	u2311
  6094  01E210  EF0C  F0F1         	goto	u2310
  6095  01E214                     u2311:
  6096  01E214  EF33  F0F1         	goto	l3210
  6097  01E218                     u2310:
  6098  01E218  AC1B               	btfss	___fladd@signs^0,6,c
  6099  01E21A  EF11  F0F1         	goto	u2321
  6100  01E21E  EF13  F0F1         	goto	u2320
  6101  01E222                     u2321:
  6102  01E222  EF15  F0F1         	goto	l3180
  6103  01E226                     u2320:
  6104  01E226  0E80               	movlw	128
  6105  01E228  1A1B               	xorwf	___fladd@signs^0,f,c
  6106  01E22A                     l3180:
  6107  01E22A  C01D  F01E         	movff	___fladd@bexp,___fladd@grs
  6108  01E22E  C01C  F01D         	movff	___fladd@aexp,___fladd@bexp
  6109  01E232  C01E  F01C         	movff	___fladd@grs,___fladd@aexp
  6110  01E236  C00F  F01E         	movff	___fladd@b,___fladd@grs
  6111  01E23A  C013  F00F         	movff	___fladd@a,___fladd@b
  6112  01E23E  C01E  F013         	movff	___fladd@grs,___fladd@a
  6113  01E242  C010  F01E         	movff	___fladd@b+1,___fladd@grs
  6114  01E246  C014  F010         	movff	___fladd@a+1,___fladd@b+1
  6115  01E24A  C01E  F014         	movff	___fladd@grs,___fladd@a+1
  6116  01E24E  C011  F01E         	movff	___fladd@b+2,___fladd@grs
  6117  01E252  C015  F011         	movff	___fladd@a+2,___fladd@b+2
  6118  01E256  C01E  F015         	movff	___fladd@grs,___fladd@a+2
  6119  01E25A  C012  F01E         	movff	___fladd@b+3,___fladd@grs
  6120  01E25E  C016  F012         	movff	___fladd@a+3,___fladd@b+3
  6121  01E262  C01E  F016         	movff	___fladd@grs,___fladd@a+3
  6122  01E266                     l3210:
  6123  01E266  0E00               	movlw	0
  6124  01E268  6E1E               	movwf	___fladd@grs^0,c
  6125  01E26A  501D               	movf	___fladd@bexp^0,w,c
  6126  01E26C  C01C  F017         	movff	___fladd@aexp,??___fladd
  6127  01E270  6A18               	clrf	(??___fladd+1)^0,c
  6128  01E272  5E17               	subwf	??___fladd^0,f,c
  6129  01E274  0E00               	movlw	0
  6130  01E276  5A18               	subwfb	(??___fladd+1)^0,f,c
  6131  01E278  BE18               	btfsc	(??___fladd+1)^0,7,c
  6132  01E27A  EF48  F0F1         	goto	u2331
  6133  01E27E  5018               	movf	(??___fladd+1)^0,w,c
  6134  01E280  E109               	bnz	u2330
  6135  01E282  0E1A               	movlw	26
  6136  01E284  5C17               	subwf	??___fladd^0,w,c
  6137  01E286  A0D8               	btfss	status,0,c
  6138  01E288  EF48  F0F1         	goto	u2331
  6139  01E28C  EF4A  F0F1         	goto	u2330
  6140  01E290                     u2331:
  6141  01E290  EF81  F0F1         	goto	l1130
  6142  01E294                     u2330:
  6143  01E294  500F               	movf	___fladd@b^0,w,c
  6144  01E296  1010               	iorwf	(___fladd@b+1)^0,w,c
  6145  01E298  1011               	iorwf	(___fladd@b+2)^0,w,c
  6146  01E29A  1012               	iorwf	(___fladd@b+3)^0,w,c
  6147  01E29C  A4D8               	btfss	status,2,c
  6148  01E29E  EF53  F0F1         	goto	u2341
  6149  01E2A2  EF56  F0F1         	goto	u2340
  6150  01E2A6                     u2341:
  6151  01E2A6  0E01               	movlw	1
  6152  01E2A8  EF57  F0F1         	goto	u2350
  6153  01E2AC                     u2340:
  6154  01E2AC  0E00               	movlw	0
  6155  01E2AE                     u2350:
  6156  01E2AE  6E1E               	movwf	___fladd@grs^0,c
  6157  01E2B0  0E00               	movlw	0
  6158  01E2B2  6E0F               	movwf	___fladd@b^0,c
  6159  01E2B4  0E00               	movlw	0
  6160  01E2B6  6E10               	movwf	(___fladd@b+1)^0,c
  6161  01E2B8  0E00               	movlw	0
  6162  01E2BA  6E11               	movwf	(___fladd@b+2)^0,c
  6163  01E2BC  0E00               	movlw	0
  6164  01E2BE  6E12               	movwf	(___fladd@b+3)^0,c
  6165  01E2C0  C01C  F01D         	movff	___fladd@aexp,___fladd@bexp
  6166  01E2C4  EF8A  F0F1         	goto	l1129
  6167  01E2C8                     l1131:
  6168  01E2C8  A01E               	btfss	___fladd@grs^0,0,c
  6169  01E2CA  EF69  F0F1         	goto	u2361
  6170  01E2CE  EF6B  F0F1         	goto	u2360
  6171  01E2D2                     u2361:
  6172  01E2D2  EF71  F0F1         	goto	l3222
  6173  01E2D6                     u2360:
  6174  01E2D6  90D8               	bcf	status,0,c
  6175  01E2D8  301E               	rrcf	___fladd@grs^0,w,c
  6176  01E2DA  0901               	iorlw	1
  6177  01E2DC  6E1E               	movwf	___fladd@grs^0,c
  6178  01E2DE  EF73  F0F1         	goto	l3224
  6179  01E2E2                     l3222:
  6180  01E2E2  90D8               	bcf	status,0,c
  6181  01E2E4  321E               	rrcf	___fladd@grs^0,f,c
  6182  01E2E6                     l3224:
  6183  01E2E6  A00F               	btfss	___fladd@b^0,0,c
  6184  01E2E8  EF78  F0F1         	goto	u2371
  6185  01E2EC  EF7A  F0F1         	goto	u2370
  6186  01E2F0                     u2371:
  6187  01E2F0  EF7B  F0F1         	goto	l3228
  6188  01E2F4                     u2370:
  6189  01E2F4  8E1E               	bsf	___fladd@grs^0,7,c
  6190  01E2F6                     l3228:
  6191  01E2F6  3412               	rlcf	(___fladd@b+3)^0,w,c
  6192  01E2F8  3212               	rrcf	(___fladd@b+3)^0,f,c
  6193  01E2FA  3211               	rrcf	(___fladd@b+2)^0,f,c
  6194  01E2FC  3210               	rrcf	(___fladd@b+1)^0,f,c
  6195  01E2FE  320F               	rrcf	___fladd@b^0,f,c
  6196  01E300  2A1D               	incf	___fladd@bexp^0,f,c
  6197  01E302                     l1130:
  6198  01E302  501C               	movf	___fladd@aexp^0,w,c
  6199  01E304  5C1D               	subwf	___fladd@bexp^0,w,c
  6200  01E306  A0D8               	btfss	status,0,c
  6201  01E308  EF88  F0F1         	goto	u2381
  6202  01E30C  EF8A  F0F1         	goto	u2380
  6203  01E310                     u2381:
  6204  01E310  EF64  F0F1         	goto	l1131
  6205  01E314                     u2380:
  6206  01E314                     l1129:
  6207  01E314  BC1B               	btfsc	___fladd@signs^0,6,c
  6208  01E316  EF8F  F0F1         	goto	u2391
  6209  01E31A  EF91  F0F1         	goto	u2390
  6210  01E31E                     u2391:
  6211  01E31E  EFD1  F0F1         	goto	l3256
  6212  01E322                     u2390:
  6213  01E322  501D               	movf	___fladd@bexp^0,w,c
  6214  01E324  A4D8               	btfss	status,2,c
  6215  01E326  EF97  F0F1         	goto	u2401
  6216  01E32A  EF99  F0F1         	goto	u2400
  6217  01E32E                     u2401:
  6218  01E32E  EFA3  F0F1         	goto	l3238
  6219  01E332                     u2400:
  6220  01E332  0E00               	movlw	0
  6221  01E334  6E0F               	movwf	?___fladd^0,c
  6222  01E336  0E00               	movlw	0
  6223  01E338  6E10               	movwf	(?___fladd+1)^0,c
  6224  01E33A  0E00               	movlw	0
  6225  01E33C  6E11               	movwf	(?___fladd+2)^0,c
  6226  01E33E  0E00               	movlw	0
  6227  01E340  6E12               	movwf	(?___fladd+3)^0,c
  6228  01E342  EFF2  F0F2         	goto	l1138
  6229  01E346                     l3238:
  6230  01E346  5013               	movf	___fladd@a^0,w,c
  6231  01E348  260F               	addwf	___fladd@b^0,f,c
  6232  01E34A  5014               	movf	(___fladd@a+1)^0,w,c
  6233  01E34C  2210               	addwfc	(___fladd@b+1)^0,f,c
  6234  01E34E  5015               	movf	(___fladd@a+2)^0,w,c
  6235  01E350  2211               	addwfc	(___fladd@b+2)^0,f,c
  6236  01E352  5016               	movf	(___fladd@a+3)^0,w,c
  6237  01E354  2212               	addwfc	(___fladd@b+3)^0,f,c
  6238  01E356  A012               	btfss	(___fladd@b+3)^0,0,c
  6239  01E358  EFB0  F0F1         	goto	u2411
  6240  01E35C  EFB2  F0F1         	goto	u2410
  6241  01E360                     u2411:
  6242  01E360  EF5E  F0F2         	goto	l3292
  6243  01E364                     u2410:
  6244  01E364  A01E               	btfss	___fladd@grs^0,0,c
  6245  01E366  EFB7  F0F1         	goto	u2421
  6246  01E36A  EFB9  F0F1         	goto	u2420
  6247  01E36E                     u2421:
  6248  01E36E  EFBF  F0F1         	goto	l3246
  6249  01E372                     u2420:
  6250  01E372  90D8               	bcf	status,0,c
  6251  01E374  301E               	rrcf	___fladd@grs^0,w,c
  6252  01E376  0901               	iorlw	1
  6253  01E378  6E1E               	movwf	___fladd@grs^0,c
  6254  01E37A  EFC1  F0F1         	goto	l3248
  6255  01E37E                     l3246:
  6256  01E37E  90D8               	bcf	status,0,c
  6257  01E380  321E               	rrcf	___fladd@grs^0,f,c
  6258  01E382                     l3248:
  6259  01E382  A00F               	btfss	___fladd@b^0,0,c
  6260  01E384  EFC6  F0F1         	goto	u2431
  6261  01E388  EFC8  F0F1         	goto	u2430
  6262  01E38C                     u2431:
  6263  01E38C  EFC9  F0F1         	goto	l3252
  6264  01E390                     u2430:
  6265  01E390  8E1E               	bsf	___fladd@grs^0,7,c
  6266  01E392                     l3252:
  6267  01E392  3412               	rlcf	(___fladd@b+3)^0,w,c
  6268  01E394  3212               	rrcf	(___fladd@b+3)^0,f,c
  6269  01E396  3211               	rrcf	(___fladd@b+2)^0,f,c
  6270  01E398  3210               	rrcf	(___fladd@b+1)^0,f,c
  6271  01E39A  320F               	rrcf	___fladd@b^0,f,c
  6272  01E39C  2A1D               	incf	___fladd@bexp^0,f,c
  6273  01E39E  EF5E  F0F2         	goto	l3292
  6274  01E3A2                     l3256:
  6275  01E3A2  5013               	movf	___fladd@a^0,w,c
  6276  01E3A4  5C0F               	subwf	___fladd@b^0,w,c
  6277  01E3A6  5014               	movf	(___fladd@a+1)^0,w,c
  6278  01E3A8  5810               	subwfb	(___fladd@b+1)^0,w,c
  6279  01E3AA  5015               	movf	(___fladd@a+2)^0,w,c
  6280  01E3AC  5811               	subwfb	(___fladd@b+2)^0,w,c
  6281  01E3AE  5012               	movf	(___fladd@b+3)^0,w,c
  6282  01E3B0  0A80               	xorlw	128
  6283  01E3B2  6E17               	movwf	??___fladd^0,c
  6284  01E3B4  5016               	movf	(___fladd@a+3)^0,w,c
  6285  01E3B6  0A80               	xorlw	128
  6286  01E3B8  5817               	subwfb	??___fladd^0,w,c
  6287  01E3BA  B0D8               	btfsc	status,0,c
  6288  01E3BC  EFE2  F0F1         	goto	u2441
  6289  01E3C0  EFE4  F0F1         	goto	u2440
  6290  01E3C4                     u2441:
  6291  01E3C4  EF0F  F0F2         	goto	l3266
  6292  01E3C8                     u2440:
  6293  01E3C8  500F               	movf	___fladd@b^0,w,c
  6294  01E3CA  5C13               	subwf	___fladd@a^0,w,c
  6295  01E3CC  6E17               	movwf	??___fladd^0,c
  6296  01E3CE  5010               	movf	(___fladd@b+1)^0,w,c
  6297  01E3D0  5814               	subwfb	(___fladd@a+1)^0,w,c
  6298  01E3D2  6E18               	movwf	(??___fladd+1)^0,c
  6299  01E3D4  5011               	movf	(___fladd@b+2)^0,w,c
  6300  01E3D6  5815               	subwfb	(___fladd@a+2)^0,w,c
  6301  01E3D8  6E19               	movwf	(??___fladd+2)^0,c
  6302  01E3DA  5012               	movf	(___fladd@b+3)^0,w,c
  6303  01E3DC  5816               	subwfb	(___fladd@a+3)^0,w,c
  6304  01E3DE  6E1A               	movwf	(??___fladd+3)^0,c
  6305  01E3E0  0EFF               	movlw	255
  6306  01E3E2  2417               	addwf	??___fladd^0,w,c
  6307  01E3E4  6E0F               	movwf	___fladd@b^0,c
  6308  01E3E6  0EFF               	movlw	255
  6309  01E3E8  2018               	addwfc	(??___fladd+1)^0,w,c
  6310  01E3EA  6E10               	movwf	(___fladd@b+1)^0,c
  6311  01E3EC  0EFF               	movlw	255
  6312  01E3EE  2019               	addwfc	(??___fladd+2)^0,w,c
  6313  01E3F0  6E11               	movwf	(___fladd@b+2)^0,c
  6314  01E3F2  0EFF               	movlw	255
  6315  01E3F4  201A               	addwfc	(??___fladd+3)^0,w,c
  6316  01E3F6  6E12               	movwf	(___fladd@b+3)^0,c
  6317  01E3F8  0E80               	movlw	128
  6318  01E3FA  1A1B               	xorwf	___fladd@signs^0,f,c
  6319  01E3FC  6C1E               	negf	___fladd@grs^0,c
  6320  01E3FE  501E               	movf	___fladd@grs^0,w,c
  6321  01E400  A4D8               	btfss	status,2,c
  6322  01E402  EF05  F0F2         	goto	u2451
  6323  01E406  EF07  F0F2         	goto	u2450
  6324  01E40A                     u2451:
  6325  01E40A  EF17  F0F2         	goto	l1146
  6326  01E40E                     u2450:
  6327  01E40E  0E01               	movlw	1
  6328  01E410  260F               	addwf	___fladd@b^0,f,c
  6329  01E412  0E00               	movlw	0
  6330  01E414  2210               	addwfc	(___fladd@b+1)^0,f,c
  6331  01E416  2211               	addwfc	(___fladd@b+2)^0,f,c
  6332  01E418  2212               	addwfc	(___fladd@b+3)^0,f,c
  6333  01E41A  EF17  F0F2         	goto	l1146
  6334  01E41E                     l3266:
  6335  01E41E  5013               	movf	___fladd@a^0,w,c
  6336  01E420  5E0F               	subwf	___fladd@b^0,f,c
  6337  01E422  5014               	movf	(___fladd@a+1)^0,w,c
  6338  01E424  5A10               	subwfb	(___fladd@b+1)^0,f,c
  6339  01E426  5015               	movf	(___fladd@a+2)^0,w,c
  6340  01E428  5A11               	subwfb	(___fladd@b+2)^0,f,c
  6341  01E42A  5016               	movf	(___fladd@a+3)^0,w,c
  6342  01E42C  5A12               	subwfb	(___fladd@b+3)^0,f,c
  6343  01E42E                     l1146:
  6344  01E42E  500F               	movf	___fladd@b^0,w,c
  6345  01E430  1010               	iorwf	(___fladd@b+1)^0,w,c
  6346  01E432  1011               	iorwf	(___fladd@b+2)^0,w,c
  6347  01E434  1012               	iorwf	(___fladd@b+3)^0,w,c
  6348  01E436  A4D8               	btfss	status,2,c
  6349  01E438  EF20  F0F2         	goto	u2461
  6350  01E43C  EF22  F0F2         	goto	u2460
  6351  01E440                     u2461:
  6352  01E440  EF57  F0F2         	goto	l3290
  6353  01E444                     u2460:
  6354  01E444  501E               	movf	___fladd@grs^0,w,c
  6355  01E446  A4D8               	btfss	status,2,c
  6356  01E448  EF28  F0F2         	goto	u2471
  6357  01E44C  EF2A  F0F2         	goto	u2470
  6358  01E450                     u2471:
  6359  01E450  EF57  F0F2         	goto	l3290
  6360  01E454                     u2470:
  6361  01E454  0E00               	movlw	0
  6362  01E456  6E0F               	movwf	?___fladd^0,c
  6363  01E458  0E00               	movlw	0
  6364  01E45A  6E10               	movwf	(?___fladd+1)^0,c
  6365  01E45C  0E00               	movlw	0
  6366  01E45E  6E11               	movwf	(?___fladd+2)^0,c
  6367  01E460  0E00               	movlw	0
  6368  01E462  6E12               	movwf	(?___fladd+3)^0,c
  6369  01E464  EFF2  F0F2         	goto	l1138
  6370  01E468                     l3274:
  6371  01E468  90D8               	bcf	status,0,c
  6372  01E46A  360F               	rlcf	___fladd@b^0,f,c
  6373  01E46C  3610               	rlcf	(___fladd@b+1)^0,f,c
  6374  01E46E  3611               	rlcf	(___fladd@b+2)^0,f,c
  6375  01E470  3612               	rlcf	(___fladd@b+3)^0,f,c
  6376  01E472  AE1E               	btfss	___fladd@grs^0,7,c
  6377  01E474  EF3E  F0F2         	goto	u2481
  6378  01E478  EF40  F0F2         	goto	u2480
  6379  01E47C                     u2481:
  6380  01E47C  EF41  F0F2         	goto	l3280
  6381  01E480                     u2480:
  6382  01E480  800F               	bsf	___fladd@b^0,0,c
  6383  01E482                     l3280:
  6384  01E482  A01E               	btfss	___fladd@grs^0,0,c
  6385  01E484  EF46  F0F2         	goto	u2491
  6386  01E488  EF48  F0F2         	goto	u2490
  6387  01E48C                     u2491:
  6388  01E48C  EF4C  F0F2         	goto	l3284
  6389  01E490                     u2490:
  6390  01E490  80D8               	bsf	status,0,c
  6391  01E492  361E               	rlcf	___fladd@grs^0,f,c
  6392  01E494  EF4E  F0F2         	goto	l3286
  6393  01E498                     l3284:
  6394  01E498  90D8               	bcf	status,0,c
  6395  01E49A  361E               	rlcf	___fladd@grs^0,f,c
  6396  01E49C                     l3286:
  6397  01E49C  501D               	movf	___fladd@bexp^0,w,c
  6398  01E49E  B4D8               	btfsc	status,2,c
  6399  01E4A0  EF54  F0F2         	goto	u2501
  6400  01E4A4  EF56  F0F2         	goto	u2500
  6401  01E4A8                     u2501:
  6402  01E4A8  EF57  F0F2         	goto	l3290
  6403  01E4AC                     u2500:
  6404  01E4AC  061D               	decf	___fladd@bexp^0,f,c
  6405  01E4AE                     l3290:
  6406  01E4AE  AE11               	btfss	(___fladd@b+2)^0,7,c
  6407  01E4B0  EF5C  F0F2         	goto	u2511
  6408  01E4B4  EF5E  F0F2         	goto	u2510
  6409  01E4B8                     u2511:
  6410  01E4B8  EF34  F0F2         	goto	l3274
  6411  01E4BC                     u2510:
  6412  01E4BC                     l3292:
  6413  01E4BC  0E00               	movlw	0
  6414  01E4BE  6E1C               	movwf	___fladd@aexp^0,c
  6415  01E4C0  AE1E               	btfss	___fladd@grs^0,7,c
  6416  01E4C2  EF65  F0F2         	goto	u2521
  6417  01E4C6  EF67  F0F2         	goto	u2520
  6418  01E4CA                     u2521:
  6419  01E4CA  EF7F  F0F2         	goto	l1155
  6420  01E4CE                     u2520:
  6421  01E4CE  C01E  F017         	movff	___fladd@grs,??___fladd
  6422  01E4D2  0E7F               	movlw	127
  6423  01E4D4  1617               	andwf	??___fladd^0,f,c
  6424  01E4D6  B4D8               	btfsc	status,2,c
  6425  01E4D8  EF70  F0F2         	goto	u2531
  6426  01E4DC  EF72  F0F2         	goto	u2530
  6427  01E4E0                     u2531:
  6428  01E4E0  EF76  F0F2         	goto	l1156
  6429  01E4E4                     u2530:
  6430  01E4E4                     l3298:
  6431  01E4E4  0E01               	movlw	1
  6432  01E4E6  6E1C               	movwf	___fladd@aexp^0,c
  6433  01E4E8  EF7F  F0F2         	goto	l1155
  6434  01E4EC                     l1156:
  6435  01E4EC  A00F               	btfss	___fladd@b^0,0,c
  6436  01E4EE  EF7B  F0F2         	goto	u2541
  6437  01E4F2  EF7D  F0F2         	goto	u2540
  6438  01E4F6                     u2541:
  6439  01E4F6  EF7F  F0F2         	goto	l1155
  6440  01E4FA                     u2540:
  6441  01E4FA  EF72  F0F2         	goto	l3298
  6442  01E4FE                     l1155:
  6443  01E4FE  501C               	movf	___fladd@aexp^0,w,c
  6444  01E500  B4D8               	btfsc	status,2,c
  6445  01E502  EF85  F0F2         	goto	u2551
  6446  01E506  EF87  F0F2         	goto	u2550
  6447  01E50A                     u2551:
  6448  01E50A  EFB2  F0F2         	goto	l3310
  6449  01E50E                     u2550:
  6450  01E50E  0E01               	movlw	1
  6451  01E510  260F               	addwf	___fladd@b^0,f,c
  6452  01E512  0E00               	movlw	0
  6453  01E514  2210               	addwfc	(___fladd@b+1)^0,f,c
  6454  01E516  2211               	addwfc	(___fladd@b+2)^0,f,c
  6455  01E518  2212               	addwfc	(___fladd@b+3)^0,f,c
  6456  01E51A  A012               	btfss	(___fladd@b+3)^0,0,c
  6457  01E51C  EF92  F0F2         	goto	u2561
  6458  01E520  EF94  F0F2         	goto	u2560
  6459  01E524                     u2561:
  6460  01E524  EFB2  F0F2         	goto	l3310
  6461  01E528                     u2560:
  6462  01E528  C00F  F017         	movff	___fladd@b,??___fladd
  6463  01E52C  C010  F018         	movff	___fladd@b+1,??___fladd+1
  6464  01E530  C011  F019         	movff	___fladd@b+2,??___fladd+2
  6465  01E534  C012  F01A         	movff	___fladd@b+3,??___fladd+3
  6466  01E538  341A               	rlcf	(??___fladd+3)^0,w,c
  6467  01E53A  321A               	rrcf	(??___fladd+3)^0,f,c
  6468  01E53C  3219               	rrcf	(??___fladd+2)^0,f,c
  6469  01E53E  3218               	rrcf	(??___fladd+1)^0,f,c
  6470  01E540  3217               	rrcf	??___fladd^0,f,c
  6471  01E542  C017  F00F         	movff	??___fladd,___fladd@b
  6472  01E546  C018  F010         	movff	??___fladd+1,___fladd@b+1
  6473  01E54A  C019  F011         	movff	??___fladd+2,___fladd@b+2
  6474  01E54E  C01A  F012         	movff	??___fladd+3,___fladd@b+3
  6475  01E552  281D               	incf	___fladd@bexp^0,w,c
  6476  01E554  B4D8               	btfsc	status,2,c
  6477  01E556  EFAF  F0F2         	goto	u2571
  6478  01E55A  EFB1  F0F2         	goto	u2570
  6479  01E55E                     u2571:
  6480  01E55E  EFB2  F0F2         	goto	l3310
  6481  01E562                     u2570:
  6482  01E562  2A1D               	incf	___fladd@bexp^0,f,c
  6483  01E564                     l3310:
  6484  01E564  281D               	incf	___fladd@bexp^0,w,c
  6485  01E566  B4D8               	btfsc	status,2,c
  6486  01E568  EFB8  F0F2         	goto	u2581
  6487  01E56C  EFBA  F0F2         	goto	u2580
  6488  01E570                     u2581:
  6489  01E570  EFC2  F0F2         	goto	l3314
  6490  01E574                     u2580:
  6491  01E574  501D               	movf	___fladd@bexp^0,w,c
  6492  01E576  A4D8               	btfss	status,2,c
  6493  01E578  EFC0  F0F2         	goto	u2591
  6494  01E57C  EFC2  F0F2         	goto	u2590
  6495  01E580                     u2591:
  6496  01E580  EFD4  F0F2         	goto	l3318
  6497  01E584                     u2590:
  6498  01E584                     l3314:
  6499  01E584  0E00               	movlw	0
  6500  01E586  6E0F               	movwf	___fladd@b^0,c
  6501  01E588  0E00               	movlw	0
  6502  01E58A  6E10               	movwf	(___fladd@b+1)^0,c
  6503  01E58C  0E00               	movlw	0
  6504  01E58E  6E11               	movwf	(___fladd@b+2)^0,c
  6505  01E590  0E00               	movlw	0
  6506  01E592  6E12               	movwf	(___fladd@b+3)^0,c
  6507  01E594  501D               	movf	___fladd@bexp^0,w,c
  6508  01E596  A4D8               	btfss	status,2,c
  6509  01E598  EFD0  F0F2         	goto	u2601
  6510  01E59C  EFD2  F0F2         	goto	u2600
  6511  01E5A0                     u2601:
  6512  01E5A0  EFD4  F0F2         	goto	l3318
  6513  01E5A4                     u2600:
  6514  01E5A4  0E00               	movlw	0
  6515  01E5A6  6E1B               	movwf	___fladd@signs^0,c
  6516  01E5A8                     l3318:
  6517  01E5A8  A01D               	btfss	___fladd@bexp^0,0,c
  6518  01E5AA  EFD9  F0F2         	goto	u2611
  6519  01E5AE  EFDB  F0F2         	goto	u2610
  6520  01E5B2                     u2611:
  6521  01E5B2  EFDE  F0F2         	goto	l3322
  6522  01E5B6                     u2610:
  6523  01E5B6  8E11               	bsf	(___fladd@b+2)^0,7,c
  6524  01E5B8  EFDF  F0F2         	goto	l3324
  6525  01E5BC                     l3322:
  6526  01E5BC  9E11               	bcf	(___fladd@b+2)^0,7,c
  6527  01E5BE                     l3324:
  6528  01E5BE  90D8               	bcf	status,0,c
  6529  01E5C0  301D               	rrcf	___fladd@bexp^0,w,c
  6530  01E5C2  6E12               	movwf	(___fladd@b+3)^0,c
  6531  01E5C4  AE1B               	btfss	___fladd@signs^0,7,c
  6532  01E5C6  EFE7  F0F2         	goto	u2621
  6533  01E5CA  EFE9  F0F2         	goto	u2620
  6534  01E5CE                     u2621:
  6535  01E5CE  EFEA  F0F2         	goto	l3330
  6536  01E5D2                     u2620:
  6537  01E5D2  8E12               	bsf	(___fladd@b+3)^0,7,c
  6538  01E5D4                     l3330:
  6539  01E5D4  C00F  F00F         	movff	___fladd@b,?___fladd
  6540  01E5D8  C010  F010         	movff	___fladd@b+1,?___fladd+1
  6541  01E5DC  C011  F011         	movff	___fladd@b+2,?___fladd+2
  6542  01E5E0  C012  F012         	movff	___fladd@b+3,?___fladd+3
  6543  01E5E4                     l1138:
  6544  01E5E4  0012               	return		;funcret
  6545  01E5E6                     __end_of___fladd:
  6546                           	callstack 0
  6547                           
  6548 ;; *************** function ___flmul *****************
  6549 ;; Defined at:
  6550 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\sprcmul.c"
  6551 ;; Parameters:    Size  Location     Type
  6552 ;;  b               4   63[COMRAM] unsigned char 
  6553 ;;  a               4   67[COMRAM] unsigned char 
  6554 ;; Auto vars:     Size  Location     Type
  6555 ;;  prod            4   82[COMRAM] struct .
  6556 ;;  grs             4   76[COMRAM] unsigned long 
  6557 ;;  temp            2   86[COMRAM] struct .
  6558 ;;  bexp            1   81[COMRAM] unsigned char 
  6559 ;;  aexp            1   80[COMRAM] unsigned char 
  6560 ;;  sign            1   75[COMRAM] unsigned char 
  6561 ;; Return value:  Size  Location     Type
  6562 ;;                  4   63[COMRAM] unsigned char 
  6563 ;; Registers used:
  6564 ;;		wreg, status,2, status,0, prodl, prodh
  6565 ;; Tracked objects:
  6566 ;;		On entry : 0/0
  6567 ;;		On exit  : 0/0
  6568 ;;		Unchanged: 0/0
  6569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6570 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6571 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6572 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6573 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6574 ;;Total ram usage:       25 bytes
  6575 ;; Hardware stack levels used: 1
  6576 ;; This function calls:
  6577 ;;		Nothing
  6578 ;; This function is called by:
  6579 ;;		_convertHSV
  6580 ;;		_findHSV
  6581 ;; This function uses a non-reentrant model
  6582 ;;
  6583                           
  6584                           	psect	text14
  6585  01DCFC                     __ptext14:
  6586                           	callstack 0
  6587  01DCFC                     ___flmul:
  6588                           	callstack 28
  6589  01DCFC  5043               	movf	(___flmul@b+3)^0,w,c
  6590  01DCFE  0B80               	andlw	128
  6591  01DD00  6E4C               	movwf	___flmul@sign^0,c
  6592  01DD02  5043               	movf	(___flmul@b+3)^0,w,c
  6593  01DD04  2443               	addwf	(___flmul@b+3)^0,w,c
  6594  01DD06  6E52               	movwf	___flmul@bexp^0,c
  6595  01DD08  AE42               	btfss	(___flmul@b+2)^0,7,c
  6596  01DD0A  EF89  F0EE         	goto	u2961
  6597  01DD0E  EF8B  F0EE         	goto	u2960
  6598  01DD12                     u2961:
  6599  01DD12  EF8C  F0EE         	goto	l3678
  6600  01DD16                     u2960:
  6601  01DD16  8052               	bsf	___flmul@bexp^0,0,c
  6602  01DD18                     l3678:
  6603  01DD18  5052               	movf	___flmul@bexp^0,w,c
  6604  01DD1A  B4D8               	btfsc	status,2,c
  6605  01DD1C  EF92  F0EE         	goto	u2971
  6606  01DD20  EF94  F0EE         	goto	u2970
  6607  01DD24                     u2971:
  6608  01DD24  EFA7  F0EE         	goto	l3686
  6609  01DD28                     u2970:
  6610  01DD28  2852               	incf	___flmul@bexp^0,w,c
  6611  01DD2A  A4D8               	btfss	status,2,c
  6612  01DD2C  EF9A  F0EE         	goto	u2981
  6613  01DD30  EF9C  F0EE         	goto	u2980
  6614  01DD34                     u2981:
  6615  01DD34  EFA4  F0EE         	goto	l3684
  6616  01DD38                     u2980:
  6617  01DD38  0E00               	movlw	0
  6618  01DD3A  6E40               	movwf	___flmul@b^0,c
  6619  01DD3C  0E00               	movlw	0
  6620  01DD3E  6E41               	movwf	(___flmul@b+1)^0,c
  6621  01DD40  0E00               	movlw	0
  6622  01DD42  6E42               	movwf	(___flmul@b+2)^0,c
  6623  01DD44  0E00               	movlw	0
  6624  01DD46  6E43               	movwf	(___flmul@b+3)^0,c
  6625  01DD48                     l3684:
  6626  01DD48  8E42               	bsf	(___flmul@b+2)^0,7,c
  6627  01DD4A  EFAF  F0EE         	goto	l3688
  6628  01DD4E                     l3686:
  6629  01DD4E  0E00               	movlw	0
  6630  01DD50  6E40               	movwf	___flmul@b^0,c
  6631  01DD52  0E00               	movlw	0
  6632  01DD54  6E41               	movwf	(___flmul@b+1)^0,c
  6633  01DD56  0E00               	movlw	0
  6634  01DD58  6E42               	movwf	(___flmul@b+2)^0,c
  6635  01DD5A  0E00               	movlw	0
  6636  01DD5C  6E43               	movwf	(___flmul@b+3)^0,c
  6637  01DD5E                     l3688:
  6638  01DD5E  5047               	movf	(___flmul@a+3)^0,w,c
  6639  01DD60  0B80               	andlw	128
  6640  01DD62  1A4C               	xorwf	___flmul@sign^0,f,c
  6641  01DD64  5047               	movf	(___flmul@a+3)^0,w,c
  6642  01DD66  2447               	addwf	(___flmul@a+3)^0,w,c
  6643  01DD68  6E51               	movwf	___flmul@aexp^0,c
  6644  01DD6A  AE46               	btfss	(___flmul@a+2)^0,7,c
  6645  01DD6C  EFBA  F0EE         	goto	u2991
  6646  01DD70  EFBC  F0EE         	goto	u2990
  6647  01DD74                     u2991:
  6648  01DD74  EFBD  F0EE         	goto	l3696
  6649  01DD78                     u2990:
  6650  01DD78  8051               	bsf	___flmul@aexp^0,0,c
  6651  01DD7A                     l3696:
  6652  01DD7A  5051               	movf	___flmul@aexp^0,w,c
  6653  01DD7C  B4D8               	btfsc	status,2,c
  6654  01DD7E  EFC3  F0EE         	goto	u3001
  6655  01DD82  EFC5  F0EE         	goto	u3000
  6656  01DD86                     u3001:
  6657  01DD86  EFD8  F0EE         	goto	l3704
  6658  01DD8A                     u3000:
  6659  01DD8A  2851               	incf	___flmul@aexp^0,w,c
  6660  01DD8C  A4D8               	btfss	status,2,c
  6661  01DD8E  EFCB  F0EE         	goto	u3011
  6662  01DD92  EFCD  F0EE         	goto	u3010
  6663  01DD96                     u3011:
  6664  01DD96  EFD5  F0EE         	goto	l3702
  6665  01DD9A                     u3010:
  6666  01DD9A  0E00               	movlw	0
  6667  01DD9C  6E44               	movwf	___flmul@a^0,c
  6668  01DD9E  0E00               	movlw	0
  6669  01DDA0  6E45               	movwf	(___flmul@a+1)^0,c
  6670  01DDA2  0E00               	movlw	0
  6671  01DDA4  6E46               	movwf	(___flmul@a+2)^0,c
  6672  01DDA6  0E00               	movlw	0
  6673  01DDA8  6E47               	movwf	(___flmul@a+3)^0,c
  6674  01DDAA                     l3702:
  6675  01DDAA  8E46               	bsf	(___flmul@a+2)^0,7,c
  6676  01DDAC  EFE0  F0EE         	goto	l1215
  6677  01DDB0                     l3704:
  6678  01DDB0  0E00               	movlw	0
  6679  01DDB2  6E44               	movwf	___flmul@a^0,c
  6680  01DDB4  0E00               	movlw	0
  6681  01DDB6  6E45               	movwf	(___flmul@a+1)^0,c
  6682  01DDB8  0E00               	movlw	0
  6683  01DDBA  6E46               	movwf	(___flmul@a+2)^0,c
  6684  01DDBC  0E00               	movlw	0
  6685  01DDBE  6E47               	movwf	(___flmul@a+3)^0,c
  6686  01DDC0                     l1215:
  6687  01DDC0  5051               	movf	___flmul@aexp^0,w,c
  6688  01DDC2  B4D8               	btfsc	status,2,c
  6689  01DDC4  EFE6  F0EE         	goto	u3021
  6690  01DDC8  EFE8  F0EE         	goto	u3020
  6691  01DDCC                     u3021:
  6692  01DDCC  EFF0  F0EE         	goto	l3708
  6693  01DDD0                     u3020:
  6694  01DDD0  5052               	movf	___flmul@bexp^0,w,c
  6695  01DDD2  A4D8               	btfss	status,2,c
  6696  01DDD4  EFEE  F0EE         	goto	u3031
  6697  01DDD8  EFF0  F0EE         	goto	u3030
  6698  01DDDC                     u3031:
  6699  01DDDC  EFFA  F0EE         	goto	l3712
  6700  01DDE0                     u3030:
  6701  01DDE0                     l3708:
  6702  01DDE0  0E00               	movlw	0
  6703  01DDE2  6E40               	movwf	?___flmul^0,c
  6704  01DDE4  0E00               	movlw	0
  6705  01DDE6  6E41               	movwf	(?___flmul+1)^0,c
  6706  01DDE8  0E00               	movlw	0
  6707  01DDEA  6E42               	movwf	(?___flmul+2)^0,c
  6708  01DDEC  0E00               	movlw	0
  6709  01DDEE  6E43               	movwf	(?___flmul+3)^0,c
  6710  01DDF0  EF92  F0F0         	goto	l1219
  6711  01DDF4                     l3712:
  6712  01DDF4  5046               	movf	(___flmul@a+2)^0,w,c
  6713  01DDF6  0240               	mulwf	___flmul@b^0,c
  6714  01DDF8  CFF3 F057          	movff	prodl,___flmul@temp
  6715  01DDFC  CFF4 F058          	movff	prodh,___flmul@temp+1
  6716  01DE00  5057               	movf	___flmul@temp^0,w,c
  6717  01DE02  6E4D               	movwf	___flmul@grs^0,c
  6718  01DE04  6A4E               	clrf	(___flmul@grs+1)^0,c
  6719  01DE06  6A4F               	clrf	(___flmul@grs+2)^0,c
  6720  01DE08  6A50               	clrf	(___flmul@grs+3)^0,c
  6721  01DE0A  5058               	movf	(___flmul@temp+1)^0,w,c
  6722  01DE0C  6E53               	movwf	___flmul@prod^0,c
  6723  01DE0E  6A54               	clrf	(___flmul@prod+1)^0,c
  6724  01DE10  6A55               	clrf	(___flmul@prod+2)^0,c
  6725  01DE12  6A56               	clrf	(___flmul@prod+3)^0,c
  6726  01DE14  5045               	movf	(___flmul@a+1)^0,w,c
  6727  01DE16  0241               	mulwf	(___flmul@b+1)^0,c
  6728  01DE18  CFF3 F057          	movff	prodl,___flmul@temp
  6729  01DE1C  CFF4 F058          	movff	prodh,___flmul@temp+1
  6730  01DE20  5057               	movf	___flmul@temp^0,w,c
  6731  01DE22  264D               	addwf	___flmul@grs^0,f,c
  6732  01DE24  0E00               	movlw	0
  6733  01DE26  224E               	addwfc	(___flmul@grs+1)^0,f,c
  6734  01DE28  224F               	addwfc	(___flmul@grs+2)^0,f,c
  6735  01DE2A  2250               	addwfc	(___flmul@grs+3)^0,f,c
  6736  01DE2C  5058               	movf	(___flmul@temp+1)^0,w,c
  6737  01DE2E  2653               	addwf	___flmul@prod^0,f,c
  6738  01DE30  0E00               	movlw	0
  6739  01DE32  2254               	addwfc	(___flmul@prod+1)^0,f,c
  6740  01DE34  2255               	addwfc	(___flmul@prod+2)^0,f,c
  6741  01DE36  2256               	addwfc	(___flmul@prod+3)^0,f,c
  6742  01DE38  5044               	movf	___flmul@a^0,w,c
  6743  01DE3A  0242               	mulwf	(___flmul@b+2)^0,c
  6744  01DE3C  CFF3 F057          	movff	prodl,___flmul@temp
  6745  01DE40  CFF4 F058          	movff	prodh,___flmul@temp+1
  6746  01DE44  5057               	movf	___flmul@temp^0,w,c
  6747  01DE46  264D               	addwf	___flmul@grs^0,f,c
  6748  01DE48  0E00               	movlw	0
  6749  01DE4A  224E               	addwfc	(___flmul@grs+1)^0,f,c
  6750  01DE4C  224F               	addwfc	(___flmul@grs+2)^0,f,c
  6751  01DE4E  2250               	addwfc	(___flmul@grs+3)^0,f,c
  6752  01DE50  5058               	movf	(___flmul@temp+1)^0,w,c
  6753  01DE52  2653               	addwf	___flmul@prod^0,f,c
  6754  01DE54  0E00               	movlw	0
  6755  01DE56  2254               	addwfc	(___flmul@prod+1)^0,f,c
  6756  01DE58  2255               	addwfc	(___flmul@prod+2)^0,f,c
  6757  01DE5A  2256               	addwfc	(___flmul@prod+3)^0,f,c
  6758  01DE5C  C04F  F050         	movff	___flmul@grs+2,___flmul@grs+3
  6759  01DE60  C04E  F04F         	movff	___flmul@grs+1,___flmul@grs+2
  6760  01DE64  C04D  F04E         	movff	___flmul@grs,___flmul@grs+1
  6761  01DE68  6A4D               	clrf	___flmul@grs^0,c
  6762  01DE6A  5044               	movf	___flmul@a^0,w,c
  6763  01DE6C  0241               	mulwf	(___flmul@b+1)^0,c
  6764  01DE6E  CFF3 F057          	movff	prodl,___flmul@temp
  6765  01DE72  CFF4 F058          	movff	prodh,___flmul@temp+1
  6766  01DE76  5057               	movf	___flmul@temp^0,w,c
  6767  01DE78  264D               	addwf	___flmul@grs^0,f,c
  6768  01DE7A  5058               	movf	(___flmul@temp+1)^0,w,c
  6769  01DE7C  224E               	addwfc	(___flmul@grs+1)^0,f,c
  6770  01DE7E  0E00               	movlw	0
  6771  01DE80  224F               	addwfc	(___flmul@grs+2)^0,f,c
  6772  01DE82  0E00               	movlw	0
  6773  01DE84  2250               	addwfc	(___flmul@grs+3)^0,f,c
  6774  01DE86  5045               	movf	(___flmul@a+1)^0,w,c
  6775  01DE88  0240               	mulwf	___flmul@b^0,c
  6776  01DE8A  CFF3 F057          	movff	prodl,___flmul@temp
  6777  01DE8E  CFF4 F058          	movff	prodh,___flmul@temp+1
  6778  01DE92  5057               	movf	___flmul@temp^0,w,c
  6779  01DE94  264D               	addwf	___flmul@grs^0,f,c
  6780  01DE96  5058               	movf	(___flmul@temp+1)^0,w,c
  6781  01DE98  224E               	addwfc	(___flmul@grs+1)^0,f,c
  6782  01DE9A  0E00               	movlw	0
  6783  01DE9C  224F               	addwfc	(___flmul@grs+2)^0,f,c
  6784  01DE9E  0E00               	movlw	0
  6785  01DEA0  2250               	addwfc	(___flmul@grs+3)^0,f,c
  6786  01DEA2  C04F  F050         	movff	___flmul@grs+2,___flmul@grs+3
  6787  01DEA6  C04E  F04F         	movff	___flmul@grs+1,___flmul@grs+2
  6788  01DEAA  C04D  F04E         	movff	___flmul@grs,___flmul@grs+1
  6789  01DEAE  6A4D               	clrf	___flmul@grs^0,c
  6790  01DEB0  5044               	movf	___flmul@a^0,w,c
  6791  01DEB2  0240               	mulwf	___flmul@b^0,c
  6792  01DEB4  CFF3 F057          	movff	prodl,___flmul@temp
  6793  01DEB8  CFF4 F058          	movff	prodh,___flmul@temp+1
  6794  01DEBC  5057               	movf	___flmul@temp^0,w,c
  6795  01DEBE  264D               	addwf	___flmul@grs^0,f,c
  6796  01DEC0  5058               	movf	(___flmul@temp+1)^0,w,c
  6797  01DEC2  224E               	addwfc	(___flmul@grs+1)^0,f,c
  6798  01DEC4  0E00               	movlw	0
  6799  01DEC6  224F               	addwfc	(___flmul@grs+2)^0,f,c
  6800  01DEC8  0E00               	movlw	0
  6801  01DECA  2250               	addwfc	(___flmul@grs+3)^0,f,c
  6802  01DECC  5046               	movf	(___flmul@a+2)^0,w,c
  6803  01DECE  0241               	mulwf	(___flmul@b+1)^0,c
  6804  01DED0  CFF3 F057          	movff	prodl,___flmul@temp
  6805  01DED4  CFF4 F058          	movff	prodh,___flmul@temp+1
  6806  01DED8  5057               	movf	___flmul@temp^0,w,c
  6807  01DEDA  2653               	addwf	___flmul@prod^0,f,c
  6808  01DEDC  5058               	movf	(___flmul@temp+1)^0,w,c
  6809  01DEDE  2254               	addwfc	(___flmul@prod+1)^0,f,c
  6810  01DEE0  0E00               	movlw	0
  6811  01DEE2  2255               	addwfc	(___flmul@prod+2)^0,f,c
  6812  01DEE4  0E00               	movlw	0
  6813  01DEE6  2256               	addwfc	(___flmul@prod+3)^0,f,c
  6814  01DEE8  5045               	movf	(___flmul@a+1)^0,w,c
  6815  01DEEA  0242               	mulwf	(___flmul@b+2)^0,c
  6816  01DEEC  CFF3 F057          	movff	prodl,___flmul@temp
  6817  01DEF0  CFF4 F058          	movff	prodh,___flmul@temp+1
  6818  01DEF4  5057               	movf	___flmul@temp^0,w,c
  6819  01DEF6  2653               	addwf	___flmul@prod^0,f,c
  6820  01DEF8  5058               	movf	(___flmul@temp+1)^0,w,c
  6821  01DEFA  2254               	addwfc	(___flmul@prod+1)^0,f,c
  6822  01DEFC  0E00               	movlw	0
  6823  01DEFE  2255               	addwfc	(___flmul@prod+2)^0,f,c
  6824  01DF00  0E00               	movlw	0
  6825  01DF02  2256               	addwfc	(___flmul@prod+3)^0,f,c
  6826  01DF04  5046               	movf	(___flmul@a+2)^0,w,c
  6827  01DF06  0242               	mulwf	(___flmul@b+2)^0,c
  6828  01DF08  CFF3 F057          	movff	prodl,___flmul@temp
  6829  01DF0C  CFF4 F058          	movff	prodh,___flmul@temp+1
  6830  01DF10  5057               	movf	___flmul@temp^0,w,c
  6831  01DF12  6E48               	movwf	??___flmul^0,c
  6832  01DF14  5058               	movf	(___flmul@temp+1)^0,w,c
  6833  01DF16  6E49               	movwf	(??___flmul+1)^0,c
  6834  01DF18  6A4A               	clrf	(??___flmul+2)^0,c
  6835  01DF1A  6A4B               	clrf	(??___flmul+3)^0,c
  6836  01DF1C  C04A  F04B         	movff	??___flmul+2,??___flmul+3
  6837  01DF20  C049  F04A         	movff	??___flmul+1,??___flmul+2
  6838  01DF24  C048  F049         	movff	??___flmul,??___flmul+1
  6839  01DF28  6A48               	clrf	??___flmul^0,c
  6840  01DF2A  5048               	movf	??___flmul^0,w,c
  6841  01DF2C  2653               	addwf	___flmul@prod^0,f,c
  6842  01DF2E  5049               	movf	(??___flmul+1)^0,w,c
  6843  01DF30  2254               	addwfc	(___flmul@prod+1)^0,f,c
  6844  01DF32  504A               	movf	(??___flmul+2)^0,w,c
  6845  01DF34  2255               	addwfc	(___flmul@prod+2)^0,f,c
  6846  01DF36  504B               	movf	(??___flmul+3)^0,w,c
  6847  01DF38  2256               	addwfc	(___flmul@prod+3)^0,f,c
  6848  01DF3A  C04D  F048         	movff	___flmul@grs,??___flmul
  6849  01DF3E  C04E  F049         	movff	___flmul@grs+1,??___flmul+1
  6850  01DF42  C04F  F04A         	movff	___flmul@grs+2,??___flmul+2
  6851  01DF46  C050  F04B         	movff	___flmul@grs+3,??___flmul+3
  6852  01DF4A  0E19               	movlw	25
  6853  01DF4C  EFAD  F0EF         	goto	u3040
  6854  01DF50                     u3045:
  6855  01DF50  90D8               	bcf	status,0,c
  6856  01DF52  324B               	rrcf	(??___flmul+3)^0,f,c
  6857  01DF54  324A               	rrcf	(??___flmul+2)^0,f,c
  6858  01DF56  3249               	rrcf	(??___flmul+1)^0,f,c
  6859  01DF58  3248               	rrcf	??___flmul^0,f,c
  6860  01DF5A                     u3040:
  6861  01DF5A  2EE8               	decfsz	wreg,f,c
  6862  01DF5C  EFA8  F0EF         	goto	u3045
  6863  01DF60  5048               	movf	??___flmul^0,w,c
  6864  01DF62  2653               	addwf	___flmul@prod^0,f,c
  6865  01DF64  5049               	movf	(??___flmul+1)^0,w,c
  6866  01DF66  2254               	addwfc	(___flmul@prod+1)^0,f,c
  6867  01DF68  504A               	movf	(??___flmul+2)^0,w,c
  6868  01DF6A  2255               	addwfc	(___flmul@prod+2)^0,f,c
  6869  01DF6C  504B               	movf	(??___flmul+3)^0,w,c
  6870  01DF6E  2256               	addwfc	(___flmul@prod+3)^0,f,c
  6871  01DF70  C04F  F050         	movff	___flmul@grs+2,___flmul@grs+3
  6872  01DF74  C04E  F04F         	movff	___flmul@grs+1,___flmul@grs+2
  6873  01DF78  C04D  F04E         	movff	___flmul@grs,___flmul@grs+1
  6874  01DF7C  6A4D               	clrf	___flmul@grs^0,c
  6875  01DF7E  5051               	movf	___flmul@aexp^0,w,c
  6876  01DF80  C052  F048         	movff	___flmul@bexp,??___flmul
  6877  01DF84  6A49               	clrf	(??___flmul+1)^0,c
  6878  01DF86  2648               	addwf	??___flmul^0,f,c
  6879  01DF88  0E00               	movlw	0
  6880  01DF8A  2249               	addwfc	(??___flmul+1)^0,f,c
  6881  01DF8C  0E82               	movlw	130
  6882  01DF8E  2448               	addwf	??___flmul^0,w,c
  6883  01DF90  6E57               	movwf	___flmul@temp^0,c
  6884  01DF92  0EFF               	movlw	255
  6885  01DF94  2049               	addwfc	(??___flmul+1)^0,w,c
  6886  01DF96  6E58               	movwf	(___flmul@temp+1)^0,c
  6887  01DF98  EFE3  F0EF         	goto	l3760
  6888  01DF9C                     l3754:
  6889  01DF9C  90D8               	bcf	status,0,c
  6890  01DF9E  3653               	rlcf	___flmul@prod^0,f,c
  6891  01DFA0  3654               	rlcf	(___flmul@prod+1)^0,f,c
  6892  01DFA2  3655               	rlcf	(___flmul@prod+2)^0,f,c
  6893  01DFA4  3656               	rlcf	(___flmul@prod+3)^0,f,c
  6894  01DFA6  AE50               	btfss	(___flmul@grs+3)^0,7,c
  6895  01DFA8  EFD8  F0EF         	goto	u3051
  6896  01DFAC  EFDA  F0EF         	goto	u3050
  6897  01DFB0                     u3051:
  6898  01DFB0  EFDB  F0EF         	goto	l1222
  6899  01DFB4                     u3050:
  6900  01DFB4  8053               	bsf	___flmul@prod^0,0,c
  6901  01DFB6                     l1222:
  6902  01DFB6  90D8               	bcf	status,0,c
  6903  01DFB8  364D               	rlcf	___flmul@grs^0,f,c
  6904  01DFBA  364E               	rlcf	(___flmul@grs+1)^0,f,c
  6905  01DFBC  364F               	rlcf	(___flmul@grs+2)^0,f,c
  6906  01DFBE  3650               	rlcf	(___flmul@grs+3)^0,f,c
  6907  01DFC0  0657               	decf	___flmul@temp^0,f,c
  6908  01DFC2  A0D8               	btfss	status,0,c
  6909  01DFC4  0658               	decf	(___flmul@temp+1)^0,f,c
  6910  01DFC6                     l3760:
  6911  01DFC6  AE55               	btfss	(___flmul@prod+2)^0,7,c
  6912  01DFC8  EFE8  F0EF         	goto	u3061
  6913  01DFCC  EFEA  F0EF         	goto	u3060
  6914  01DFD0                     u3061:
  6915  01DFD0  EFCE  F0EF         	goto	l3754
  6916  01DFD4                     u3060:
  6917  01DFD4  0E00               	movlw	0
  6918  01DFD6  6E51               	movwf	___flmul@aexp^0,c
  6919  01DFD8  AE50               	btfss	(___flmul@grs+3)^0,7,c
  6920  01DFDA  EFF1  F0EF         	goto	u3071
  6921  01DFDE  EFF3  F0EF         	goto	u3070
  6922  01DFE2                     u3071:
  6923  01DFE2  EF17  F0F0         	goto	l1224
  6924  01DFE6                     u3070:
  6925  01DFE6  0EFF               	movlw	255
  6926  01DFE8  144D               	andwf	___flmul@grs^0,w,c
  6927  01DFEA  6E48               	movwf	??___flmul^0,c
  6928  01DFEC  0EFF               	movlw	255
  6929  01DFEE  144E               	andwf	(___flmul@grs+1)^0,w,c
  6930  01DFF0  6E49               	movwf	(??___flmul+1)^0,c
  6931  01DFF2  0EFF               	movlw	255
  6932  01DFF4  144F               	andwf	(___flmul@grs+2)^0,w,c
  6933  01DFF6  6E4A               	movwf	(??___flmul+2)^0,c
  6934  01DFF8  0E7F               	movlw	127
  6935  01DFFA  1450               	andwf	(___flmul@grs+3)^0,w,c
  6936  01DFFC  6E4B               	movwf	(??___flmul+3)^0,c
  6937  01DFFE  5048               	movf	??___flmul^0,w,c
  6938  01E000  1049               	iorwf	(??___flmul+1)^0,w,c
  6939  01E002  104A               	iorwf	(??___flmul+2)^0,w,c
  6940  01E004  104B               	iorwf	(??___flmul+3)^0,w,c
  6941  01E006  B4D8               	btfsc	status,2,c
  6942  01E008  EF08  F0F0         	goto	u3081
  6943  01E00C  EF0A  F0F0         	goto	u3080
  6944  01E010                     u3081:
  6945  01E010  EF0E  F0F0         	goto	l1225
  6946  01E014                     u3080:
  6947  01E014                     l3768:
  6948  01E014  0E01               	movlw	1
  6949  01E016  6E51               	movwf	___flmul@aexp^0,c
  6950  01E018  EF17  F0F0         	goto	l1224
  6951  01E01C                     l1225:
  6952  01E01C  A053               	btfss	___flmul@prod^0,0,c
  6953  01E01E  EF13  F0F0         	goto	u3091
  6954  01E022  EF15  F0F0         	goto	u3090
  6955  01E026                     u3091:
  6956  01E026  EF17  F0F0         	goto	l1224
  6957  01E02A                     u3090:
  6958  01E02A  EF0A  F0F0         	goto	l3768
  6959  01E02E                     l1224:
  6960  01E02E  5051               	movf	___flmul@aexp^0,w,c
  6961  01E030  B4D8               	btfsc	status,2,c
  6962  01E032  EF1D  F0F0         	goto	u3101
  6963  01E036  EF1F  F0F0         	goto	u3100
  6964  01E03A                     u3101:
  6965  01E03A  EF43  F0F0         	goto	l3780
  6966  01E03E                     u3100:
  6967  01E03E  0E01               	movlw	1
  6968  01E040  2653               	addwf	___flmul@prod^0,f,c
  6969  01E042  0E00               	movlw	0
  6970  01E044  2254               	addwfc	(___flmul@prod+1)^0,f,c
  6971  01E046  2255               	addwfc	(___flmul@prod+2)^0,f,c
  6972  01E048  2256               	addwfc	(___flmul@prod+3)^0,f,c
  6973  01E04A  A056               	btfss	(___flmul@prod+3)^0,0,c
  6974  01E04C  EF2A  F0F0         	goto	u3111
  6975  01E050  EF2C  F0F0         	goto	u3110
  6976  01E054                     u3111:
  6977  01E054  EF43  F0F0         	goto	l3780
  6978  01E058                     u3110:
  6979  01E058  C053  F048         	movff	___flmul@prod,??___flmul
  6980  01E05C  C054  F049         	movff	___flmul@prod+1,??___flmul+1
  6981  01E060  C055  F04A         	movff	___flmul@prod+2,??___flmul+2
  6982  01E064  C056  F04B         	movff	___flmul@prod+3,??___flmul+3
  6983  01E068  344B               	rlcf	(??___flmul+3)^0,w,c
  6984  01E06A  324B               	rrcf	(??___flmul+3)^0,f,c
  6985  01E06C  324A               	rrcf	(??___flmul+2)^0,f,c
  6986  01E06E  3249               	rrcf	(??___flmul+1)^0,f,c
  6987  01E070  3248               	rrcf	??___flmul^0,f,c
  6988  01E072  C048  F053         	movff	??___flmul,___flmul@prod
  6989  01E076  C049  F054         	movff	??___flmul+1,___flmul@prod+1
  6990  01E07A  C04A  F055         	movff	??___flmul+2,___flmul@prod+2
  6991  01E07E  C04B  F056         	movff	??___flmul+3,___flmul@prod+3
  6992  01E082  4A57               	infsnz	___flmul@temp^0,f,c
  6993  01E084  2A58               	incf	(___flmul@temp+1)^0,f,c
  6994  01E086                     l3780:
  6995  01E086  BE58               	btfsc	(___flmul@temp+1)^0,7,c
  6996  01E088  EF4E  F0F0         	goto	u3121
  6997  01E08C  5058               	movf	(___flmul@temp+1)^0,w,c
  6998  01E08E  E108               	bnz	u3120
  6999  01E090  2857               	incf	___flmul@temp^0,w,c
  7000  01E092  A0D8               	btfss	status,0,c
  7001  01E094  EF4E  F0F0         	goto	u3121
  7002  01E098  EF50  F0F0         	goto	u3120
  7003  01E09C                     u3121:
  7004  01E09C  EF5A  F0F0         	goto	l3784
  7005  01E0A0                     u3120:
  7006  01E0A0  0E00               	movlw	0
  7007  01E0A2  6E53               	movwf	___flmul@prod^0,c
  7008  01E0A4  0E00               	movlw	0
  7009  01E0A6  6E54               	movwf	(___flmul@prod+1)^0,c
  7010  01E0A8  0E80               	movlw	128
  7011  01E0AA  6E55               	movwf	(___flmul@prod+2)^0,c
  7012  01E0AC  0E7F               	movlw	127
  7013  01E0AE  6E56               	movwf	(___flmul@prod+3)^0,c
  7014  01E0B0  EF88  F0F0         	goto	l3796
  7015  01E0B4                     l3784:
  7016  01E0B4  BE58               	btfsc	(___flmul@temp+1)^0,7,c
  7017  01E0B6  EF67  F0F0         	goto	u3130
  7018  01E0BA  5058               	movf	(___flmul@temp+1)^0,w,c
  7019  01E0BC  E106               	bnz	u3131
  7020  01E0BE  0457               	decf	___flmul@temp^0,w,c
  7021  01E0C0  B0D8               	btfsc	status,0,c
  7022  01E0C2  EF65  F0F0         	goto	u3131
  7023  01E0C6  EF67  F0F0         	goto	u3130
  7024  01E0CA                     u3131:
  7025  01E0CA  EF73  F0F0         	goto	l1232
  7026  01E0CE                     u3130:
  7027  01E0CE  0E00               	movlw	0
  7028  01E0D0  6E53               	movwf	___flmul@prod^0,c
  7029  01E0D2  0E00               	movlw	0
  7030  01E0D4  6E54               	movwf	(___flmul@prod+1)^0,c
  7031  01E0D6  0E00               	movlw	0
  7032  01E0D8  6E55               	movwf	(___flmul@prod+2)^0,c
  7033  01E0DA  0E00               	movlw	0
  7034  01E0DC  6E56               	movwf	(___flmul@prod+3)^0,c
  7035  01E0DE  0E00               	movlw	0
  7036  01E0E0  6E4C               	movwf	___flmul@sign^0,c
  7037  01E0E2  EF88  F0F0         	goto	l3796
  7038  01E0E6                     l1232:
  7039  01E0E6  C057  F052         	movff	___flmul@temp,___flmul@bexp
  7040  01E0EA  0EFF               	movlw	255
  7041  01E0EC  1653               	andwf	___flmul@prod^0,f,c
  7042  01E0EE  0EFF               	movlw	255
  7043  01E0F0  1654               	andwf	(___flmul@prod+1)^0,f,c
  7044  01E0F2  0E7F               	movlw	127
  7045  01E0F4  1655               	andwf	(___flmul@prod+2)^0,f,c
  7046  01E0F6  0E00               	movlw	0
  7047  01E0F8  1656               	andwf	(___flmul@prod+3)^0,f,c
  7048  01E0FA  A052               	btfss	___flmul@bexp^0,0,c
  7049  01E0FC  EF82  F0F0         	goto	u3141
  7050  01E100  EF84  F0F0         	goto	u3140
  7051  01E104                     u3141:
  7052  01E104  EF85  F0F0         	goto	l3794
  7053  01E108                     u3140:
  7054  01E108  8E55               	bsf	(___flmul@prod+2)^0,7,c
  7055  01E10A                     l3794:
  7056  01E10A  90D8               	bcf	status,0,c
  7057  01E10C  3052               	rrcf	___flmul@bexp^0,w,c
  7058  01E10E  6E56               	movwf	(___flmul@prod+3)^0,c
  7059  01E110                     l3796:
  7060  01E110  504C               	movf	___flmul@sign^0,w,c
  7061  01E112  1256               	iorwf	(___flmul@prod+3)^0,f,c
  7062  01E114  C053  F040         	movff	___flmul@prod,?___flmul
  7063  01E118  C054  F041         	movff	___flmul@prod+1,?___flmul+1
  7064  01E11C  C055  F042         	movff	___flmul@prod+2,?___flmul+2
  7065  01E120  C056  F043         	movff	___flmul@prod+3,?___flmul+3
  7066  01E124                     l1219:
  7067  01E124  0012               	return		;funcret
  7068  01E126                     __end_of___flmul:
  7069                           	callstack 0
  7070                           
  7071 ;; *************** function ___fldiv *****************
  7072 ;; Defined at:
  7073 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\sprcdiv.c"
  7074 ;; Parameters:    Size  Location     Type
  7075 ;;  b               4   38[COMRAM] unsigned char 
  7076 ;;  a               4   42[COMRAM] unsigned char 
  7077 ;; Auto vars:     Size  Location     Type
  7078 ;;  grs             4   57[COMRAM] unsigned long 
  7079 ;;  rem             4   50[COMRAM] unsigned long 
  7080 ;;  new_exp         2   55[COMRAM] short 
  7081 ;;  aexp            1   62[COMRAM] unsigned char 
  7082 ;;  bexp            1   61[COMRAM] unsigned char 
  7083 ;;  sign            1   54[COMRAM] unsigned char 
  7084 ;; Return value:  Size  Location     Type
  7085 ;;                  4   38[COMRAM] unsigned char 
  7086 ;; Registers used:
  7087 ;;		wreg, status,2, status,0
  7088 ;; Tracked objects:
  7089 ;;		On entry : 0/0
  7090 ;;		On exit  : 0/0
  7091 ;;		Unchanged: 0/0
  7092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7093 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7094 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7095 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7096 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7097 ;;Total ram usage:       25 bytes
  7098 ;; Hardware stack levels used: 1
  7099 ;; This function calls:
  7100 ;;		Nothing
  7101 ;; This function is called by:
  7102 ;;		_convertHSV
  7103 ;;		_findHSV
  7104 ;; This function uses a non-reentrant model
  7105 ;;
  7106                           
  7107                           	psect	text15
  7108  01D962                     __ptext15:
  7109                           	callstack 0
  7110  01D962                     ___fldiv:
  7111                           	callstack 28
  7112  01D962  502A               	movf	(___fldiv@b+3)^0,w,c
  7113  01D964  0B80               	andlw	128
  7114  01D966  6E37               	movwf	___fldiv@sign^0,c
  7115  01D968  502A               	movf	(___fldiv@b+3)^0,w,c
  7116  01D96A  242A               	addwf	(___fldiv@b+3)^0,w,c
  7117  01D96C  6E3E               	movwf	___fldiv@bexp^0,c
  7118  01D96E  AE29               	btfss	(___fldiv@b+2)^0,7,c
  7119  01D970  EFBC  F0EC         	goto	u2731
  7120  01D974  EFBE  F0EC         	goto	u2730
  7121  01D978                     u2731:
  7122  01D978  EFBF  F0EC         	goto	l3540
  7123  01D97C                     u2730:
  7124  01D97C  803E               	bsf	___fldiv@bexp^0,0,c
  7125  01D97E                     l3540:
  7126  01D97E  503E               	movf	___fldiv@bexp^0,w,c
  7127  01D980  B4D8               	btfsc	status,2,c
  7128  01D982  EFC5  F0EC         	goto	u2741
  7129  01D986  EFC7  F0EC         	goto	u2740
  7130  01D98A                     u2741:
  7131  01D98A  EFDC  F0EC         	goto	l3550
  7132  01D98E                     u2740:
  7133  01D98E  283E               	incf	___fldiv@bexp^0,w,c
  7134  01D990  A4D8               	btfss	status,2,c
  7135  01D992  EFCD  F0EC         	goto	u2751
  7136  01D996  EFCF  F0EC         	goto	u2750
  7137  01D99A                     u2751:
  7138  01D99A  EFD7  F0EC         	goto	l3546
  7139  01D99E                     u2750:
  7140  01D99E  0E00               	movlw	0
  7141  01D9A0  6E27               	movwf	___fldiv@b^0,c
  7142  01D9A2  0E00               	movlw	0
  7143  01D9A4  6E28               	movwf	(___fldiv@b+1)^0,c
  7144  01D9A6  0E00               	movlw	0
  7145  01D9A8  6E29               	movwf	(___fldiv@b+2)^0,c
  7146  01D9AA  0E00               	movlw	0
  7147  01D9AC  6E2A               	movwf	(___fldiv@b+3)^0,c
  7148  01D9AE                     l3546:
  7149  01D9AE  8E29               	bsf	(___fldiv@b+2)^0,7,c
  7150  01D9B0  0E00               	movlw	0
  7151  01D9B2  6E2A               	movwf	(___fldiv@b+3)^0,c
  7152  01D9B4  EFE4  F0EC         	goto	l3552
  7153  01D9B8                     l3550:
  7154  01D9B8  0E00               	movlw	0
  7155  01D9BA  6E27               	movwf	___fldiv@b^0,c
  7156  01D9BC  0E00               	movlw	0
  7157  01D9BE  6E28               	movwf	(___fldiv@b+1)^0,c
  7158  01D9C0  0E00               	movlw	0
  7159  01D9C2  6E29               	movwf	(___fldiv@b+2)^0,c
  7160  01D9C4  0E00               	movlw	0
  7161  01D9C6  6E2A               	movwf	(___fldiv@b+3)^0,c
  7162  01D9C8                     l3552:
  7163  01D9C8  502E               	movf	(___fldiv@a+3)^0,w,c
  7164  01D9CA  0B80               	andlw	128
  7165  01D9CC  1A37               	xorwf	___fldiv@sign^0,f,c
  7166  01D9CE  502E               	movf	(___fldiv@a+3)^0,w,c
  7167  01D9D0  242E               	addwf	(___fldiv@a+3)^0,w,c
  7168  01D9D2  6E3F               	movwf	___fldiv@aexp^0,c
  7169  01D9D4  AE2D               	btfss	(___fldiv@a+2)^0,7,c
  7170  01D9D6  EFEF  F0EC         	goto	u2761
  7171  01D9DA  EFF1  F0EC         	goto	u2760
  7172  01D9DE                     u2761:
  7173  01D9DE  EFF2  F0EC         	goto	l3560
  7174  01D9E2                     u2760:
  7175  01D9E2  803F               	bsf	___fldiv@aexp^0,0,c
  7176  01D9E4                     l3560:
  7177  01D9E4  503F               	movf	___fldiv@aexp^0,w,c
  7178  01D9E6  B4D8               	btfsc	status,2,c
  7179  01D9E8  EFF8  F0EC         	goto	u2771
  7180  01D9EC  EFFA  F0EC         	goto	u2770
  7181  01D9F0                     u2771:
  7182  01D9F0  EF0F  F0ED         	goto	l3570
  7183  01D9F4                     u2770:
  7184  01D9F4  283F               	incf	___fldiv@aexp^0,w,c
  7185  01D9F6  A4D8               	btfss	status,2,c
  7186  01D9F8  EF00  F0ED         	goto	u2781
  7187  01D9FC  EF02  F0ED         	goto	u2780
  7188  01DA00                     u2781:
  7189  01DA00  EF0A  F0ED         	goto	l3566
  7190  01DA04                     u2780:
  7191  01DA04  0E00               	movlw	0
  7192  01DA06  6E2B               	movwf	___fldiv@a^0,c
  7193  01DA08  0E00               	movlw	0
  7194  01DA0A  6E2C               	movwf	(___fldiv@a+1)^0,c
  7195  01DA0C  0E00               	movlw	0
  7196  01DA0E  6E2D               	movwf	(___fldiv@a+2)^0,c
  7197  01DA10  0E00               	movlw	0
  7198  01DA12  6E2E               	movwf	(___fldiv@a+3)^0,c
  7199  01DA14                     l3566:
  7200  01DA14  8E2D               	bsf	(___fldiv@a+2)^0,7,c
  7201  01DA16  0E00               	movlw	0
  7202  01DA18  6E2E               	movwf	(___fldiv@a+3)^0,c
  7203  01DA1A  EF17  F0ED         	goto	l3572
  7204  01DA1E                     l3570:
  7205  01DA1E  0E00               	movlw	0
  7206  01DA20  6E2B               	movwf	___fldiv@a^0,c
  7207  01DA22  0E00               	movlw	0
  7208  01DA24  6E2C               	movwf	(___fldiv@a+1)^0,c
  7209  01DA26  0E00               	movlw	0
  7210  01DA28  6E2D               	movwf	(___fldiv@a+2)^0,c
  7211  01DA2A  0E00               	movlw	0
  7212  01DA2C  6E2E               	movwf	(___fldiv@a+3)^0,c
  7213  01DA2E                     l3572:
  7214  01DA2E  502B               	movf	___fldiv@a^0,w,c
  7215  01DA30  102C               	iorwf	(___fldiv@a+1)^0,w,c
  7216  01DA32  102D               	iorwf	(___fldiv@a+2)^0,w,c
  7217  01DA34  102E               	iorwf	(___fldiv@a+3)^0,w,c
  7218  01DA36  A4D8               	btfss	status,2,c
  7219  01DA38  EF20  F0ED         	goto	u2791
  7220  01DA3C  EF22  F0ED         	goto	u2790
  7221  01DA40                     u2791:
  7222  01DA40  EF3A  F0ED         	goto	l3584
  7223  01DA44                     u2790:
  7224  01DA44  0E00               	movlw	0
  7225  01DA46  6E27               	movwf	___fldiv@b^0,c
  7226  01DA48  0E00               	movlw	0
  7227  01DA4A  6E28               	movwf	(___fldiv@b+1)^0,c
  7228  01DA4C  0E00               	movlw	0
  7229  01DA4E  6E29               	movwf	(___fldiv@b+2)^0,c
  7230  01DA50  0E00               	movlw	0
  7231  01DA52  6E2A               	movwf	(___fldiv@b+3)^0,c
  7232  01DA54  0E80               	movlw	128
  7233  01DA56  1229               	iorwf	(___fldiv@b+2)^0,f,c
  7234  01DA58  0E7F               	movlw	127
  7235  01DA5A  122A               	iorwf	(___fldiv@b+3)^0,f,c
  7236  01DA5C                     l3578:
  7237  01DA5C  5037               	movf	___fldiv@sign^0,w,c
  7238  01DA5E  122A               	iorwf	(___fldiv@b+3)^0,f,c
  7239  01DA60  C027  F027         	movff	___fldiv@b,?___fldiv
  7240  01DA64  C028  F028         	movff	___fldiv@b+1,?___fldiv+1
  7241  01DA68  C029  F029         	movff	___fldiv@b+2,?___fldiv+2
  7242  01DA6C  C02A  F02A         	movff	___fldiv@b+3,?___fldiv+3
  7243  01DA70  EF7D  F0EE         	goto	l1183
  7244  01DA74                     l3584:
  7245  01DA74  503E               	movf	___fldiv@bexp^0,w,c
  7246  01DA76  A4D8               	btfss	status,2,c
  7247  01DA78  EF40  F0ED         	goto	u2801
  7248  01DA7C  EF42  F0ED         	goto	u2800
  7249  01DA80                     u2801:
  7250  01DA80  EF4C  F0ED         	goto	l3592
  7251  01DA84                     u2800:
  7252  01DA84  0E00               	movlw	0
  7253  01DA86  6E27               	movwf	?___fldiv^0,c
  7254  01DA88  0E00               	movlw	0
  7255  01DA8A  6E28               	movwf	(?___fldiv+1)^0,c
  7256  01DA8C  0E00               	movlw	0
  7257  01DA8E  6E29               	movwf	(?___fldiv+2)^0,c
  7258  01DA90  0E00               	movlw	0
  7259  01DA92  6E2A               	movwf	(?___fldiv+3)^0,c
  7260  01DA94  EF7D  F0EE         	goto	l1183
  7261  01DA98                     l3592:
  7262  01DA98  503F               	movf	___fldiv@aexp^0,w,c
  7263  01DA9A  C03E  F02F         	movff	___fldiv@bexp,??___fldiv
  7264  01DA9E  6A30               	clrf	(??___fldiv+1)^0,c
  7265  01DAA0  5E2F               	subwf	??___fldiv^0,f,c
  7266  01DAA2  0E00               	movlw	0
  7267  01DAA4  5A30               	subwfb	(??___fldiv+1)^0,f,c
  7268  01DAA6  0E7F               	movlw	127
  7269  01DAA8  242F               	addwf	??___fldiv^0,w,c
  7270  01DAAA  6E38               	movwf	___fldiv@new_exp^0,c
  7271  01DAAC  0E00               	movlw	0
  7272  01DAAE  2030               	addwfc	(??___fldiv+1)^0,w,c
  7273  01DAB0  6E39               	movwf	(___fldiv@new_exp+1)^0,c
  7274  01DAB2  C027  F033         	movff	___fldiv@b,___fldiv@rem
  7275  01DAB6  C028  F034         	movff	___fldiv@b+1,___fldiv@rem+1
  7276  01DABA  C029  F035         	movff	___fldiv@b+2,___fldiv@rem+2
  7277  01DABE  C02A  F036         	movff	___fldiv@b+3,___fldiv@rem+3
  7278  01DAC2  0E00               	movlw	0
  7279  01DAC4  6E27               	movwf	___fldiv@b^0,c
  7280  01DAC6  0E00               	movlw	0
  7281  01DAC8  6E28               	movwf	(___fldiv@b+1)^0,c
  7282  01DACA  0E00               	movlw	0
  7283  01DACC  6E29               	movwf	(___fldiv@b+2)^0,c
  7284  01DACE  0E00               	movlw	0
  7285  01DAD0  6E2A               	movwf	(___fldiv@b+3)^0,c
  7286  01DAD2  0E00               	movlw	0
  7287  01DAD4  6E3A               	movwf	___fldiv@grs^0,c
  7288  01DAD6  0E00               	movlw	0
  7289  01DAD8  6E3B               	movwf	(___fldiv@grs+1)^0,c
  7290  01DADA  0E00               	movlw	0
  7291  01DADC  6E3C               	movwf	(___fldiv@grs+2)^0,c
  7292  01DADE  0E00               	movlw	0
  7293  01DAE0  6E3D               	movwf	(___fldiv@grs+3)^0,c
  7294  01DAE2  0E00               	movlw	0
  7295  01DAE4  6E3F               	movwf	___fldiv@aexp^0,c
  7296  01DAE6  EFAD  F0ED         	goto	l1185
  7297  01DAEA                     l3602:
  7298  01DAEA  503F               	movf	___fldiv@aexp^0,w,c
  7299  01DAEC  B4D8               	btfsc	status,2,c
  7300  01DAEE  EF7B  F0ED         	goto	u2811
  7301  01DAF2  EF7D  F0ED         	goto	u2810
  7302  01DAF6                     u2811:
  7303  01DAF6  EF94  F0ED         	goto	l3610
  7304  01DAFA                     u2810:
  7305  01DAFA  90D8               	bcf	status,0,c
  7306  01DAFC  3633               	rlcf	___fldiv@rem^0,f,c
  7307  01DAFE  3634               	rlcf	(___fldiv@rem+1)^0,f,c
  7308  01DB00  3635               	rlcf	(___fldiv@rem+2)^0,f,c
  7309  01DB02  3636               	rlcf	(___fldiv@rem+3)^0,f,c
  7310  01DB04  90D8               	bcf	status,0,c
  7311  01DB06  3627               	rlcf	___fldiv@b^0,f,c
  7312  01DB08  3628               	rlcf	(___fldiv@b+1)^0,f,c
  7313  01DB0A  3629               	rlcf	(___fldiv@b+2)^0,f,c
  7314  01DB0C  362A               	rlcf	(___fldiv@b+3)^0,f,c
  7315  01DB0E  AE3D               	btfss	(___fldiv@grs+3)^0,7,c
  7316  01DB10  EF8C  F0ED         	goto	u2821
  7317  01DB14  EF8E  F0ED         	goto	u2820
  7318  01DB18                     u2821:
  7319  01DB18  EF8F  F0ED         	goto	l1188
  7320  01DB1C                     u2820:
  7321  01DB1C  8027               	bsf	___fldiv@b^0,0,c
  7322  01DB1E                     l1188:
  7323  01DB1E  90D8               	bcf	status,0,c
  7324  01DB20  363A               	rlcf	___fldiv@grs^0,f,c
  7325  01DB22  363B               	rlcf	(___fldiv@grs+1)^0,f,c
  7326  01DB24  363C               	rlcf	(___fldiv@grs+2)^0,f,c
  7327  01DB26  363D               	rlcf	(___fldiv@grs+3)^0,f,c
  7328  01DB28                     l3610:
  7329  01DB28  502B               	movf	___fldiv@a^0,w,c
  7330  01DB2A  5C33               	subwf	___fldiv@rem^0,w,c
  7331  01DB2C  502C               	movf	(___fldiv@a+1)^0,w,c
  7332  01DB2E  5834               	subwfb	(___fldiv@rem+1)^0,w,c
  7333  01DB30  502D               	movf	(___fldiv@a+2)^0,w,c
  7334  01DB32  5835               	subwfb	(___fldiv@rem+2)^0,w,c
  7335  01DB34  502E               	movf	(___fldiv@a+3)^0,w,c
  7336  01DB36  5836               	subwfb	(___fldiv@rem+3)^0,w,c
  7337  01DB38  A0D8               	btfss	status,0,c
  7338  01DB3A  EFA1  F0ED         	goto	u2831
  7339  01DB3E  EFA3  F0ED         	goto	u2830
  7340  01DB42                     u2831:
  7341  01DB42  EFAC  F0ED         	goto	l3616
  7342  01DB46                     u2830:
  7343  01DB46  8C3D               	bsf	(___fldiv@grs+3)^0,6,c
  7344  01DB48  502B               	movf	___fldiv@a^0,w,c
  7345  01DB4A  5E33               	subwf	___fldiv@rem^0,f,c
  7346  01DB4C  502C               	movf	(___fldiv@a+1)^0,w,c
  7347  01DB4E  5A34               	subwfb	(___fldiv@rem+1)^0,f,c
  7348  01DB50  502D               	movf	(___fldiv@a+2)^0,w,c
  7349  01DB52  5A35               	subwfb	(___fldiv@rem+2)^0,f,c
  7350  01DB54  502E               	movf	(___fldiv@a+3)^0,w,c
  7351  01DB56  5A36               	subwfb	(___fldiv@rem+3)^0,f,c
  7352  01DB58                     l3616:
  7353  01DB58  2A3F               	incf	___fldiv@aexp^0,f,c
  7354  01DB5A                     l1185:
  7355  01DB5A  0E19               	movlw	25
  7356  01DB5C  643F               	cpfsgt	___fldiv@aexp^0,c
  7357  01DB5E  EFB3  F0ED         	goto	u2841
  7358  01DB62  EFB5  F0ED         	goto	u2840
  7359  01DB66                     u2841:
  7360  01DB66  EF75  F0ED         	goto	l3602
  7361  01DB6A                     u2840:
  7362  01DB6A  5033               	movf	___fldiv@rem^0,w,c
  7363  01DB6C  1034               	iorwf	(___fldiv@rem+1)^0,w,c
  7364  01DB6E  1035               	iorwf	(___fldiv@rem+2)^0,w,c
  7365  01DB70  1036               	iorwf	(___fldiv@rem+3)^0,w,c
  7366  01DB72  B4D8               	btfsc	status,2,c
  7367  01DB74  EFBE  F0ED         	goto	u2851
  7368  01DB78  EFC0  F0ED         	goto	u2850
  7369  01DB7C                     u2851:
  7370  01DB7C  EFD8  F0ED         	goto	l3628
  7371  01DB80                     u2850:
  7372  01DB80  803A               	bsf	___fldiv@grs^0,0,c
  7373  01DB82  EFD8  F0ED         	goto	l3628
  7374  01DB86                     l3622:
  7375  01DB86  90D8               	bcf	status,0,c
  7376  01DB88  3627               	rlcf	___fldiv@b^0,f,c
  7377  01DB8A  3628               	rlcf	(___fldiv@b+1)^0,f,c
  7378  01DB8C  3629               	rlcf	(___fldiv@b+2)^0,f,c
  7379  01DB8E  362A               	rlcf	(___fldiv@b+3)^0,f,c
  7380  01DB90  AE3D               	btfss	(___fldiv@grs+3)^0,7,c
  7381  01DB92  EFCD  F0ED         	goto	u2861
  7382  01DB96  EFCF  F0ED         	goto	u2860
  7383  01DB9A                     u2861:
  7384  01DB9A  EFD0  F0ED         	goto	l1194
  7385  01DB9E                     u2860:
  7386  01DB9E  8027               	bsf	___fldiv@b^0,0,c
  7387  01DBA0                     l1194:
  7388  01DBA0  90D8               	bcf	status,0,c
  7389  01DBA2  363A               	rlcf	___fldiv@grs^0,f,c
  7390  01DBA4  363B               	rlcf	(___fldiv@grs+1)^0,f,c
  7391  01DBA6  363C               	rlcf	(___fldiv@grs+2)^0,f,c
  7392  01DBA8  363D               	rlcf	(___fldiv@grs+3)^0,f,c
  7393  01DBAA  0638               	decf	___fldiv@new_exp^0,f,c
  7394  01DBAC  A0D8               	btfss	status,0,c
  7395  01DBAE  0639               	decf	(___fldiv@new_exp+1)^0,f,c
  7396  01DBB0                     l3628:
  7397  01DBB0  AE29               	btfss	(___fldiv@b+2)^0,7,c
  7398  01DBB2  EFDD  F0ED         	goto	u2871
  7399  01DBB6  EFDF  F0ED         	goto	u2870
  7400  01DBBA                     u2871:
  7401  01DBBA  EFC3  F0ED         	goto	l3622
  7402  01DBBE                     u2870:
  7403  01DBBE  0E00               	movlw	0
  7404  01DBC0  6E3F               	movwf	___fldiv@aexp^0,c
  7405  01DBC2  AE3D               	btfss	(___fldiv@grs+3)^0,7,c
  7406  01DBC4  EFE6  F0ED         	goto	u2881
  7407  01DBC8  EFE8  F0ED         	goto	u2880
  7408  01DBCC                     u2881:
  7409  01DBCC  EF0C  F0EE         	goto	l1196
  7410  01DBD0                     u2880:
  7411  01DBD0  0EFF               	movlw	255
  7412  01DBD2  143A               	andwf	___fldiv@grs^0,w,c
  7413  01DBD4  6E2F               	movwf	??___fldiv^0,c
  7414  01DBD6  0EFF               	movlw	255
  7415  01DBD8  143B               	andwf	(___fldiv@grs+1)^0,w,c
  7416  01DBDA  6E30               	movwf	(??___fldiv+1)^0,c
  7417  01DBDC  0EFF               	movlw	255
  7418  01DBDE  143C               	andwf	(___fldiv@grs+2)^0,w,c
  7419  01DBE0  6E31               	movwf	(??___fldiv+2)^0,c
  7420  01DBE2  0E7F               	movlw	127
  7421  01DBE4  143D               	andwf	(___fldiv@grs+3)^0,w,c
  7422  01DBE6  6E32               	movwf	(??___fldiv+3)^0,c
  7423  01DBE8  502F               	movf	??___fldiv^0,w,c
  7424  01DBEA  1030               	iorwf	(??___fldiv+1)^0,w,c
  7425  01DBEC  1031               	iorwf	(??___fldiv+2)^0,w,c
  7426  01DBEE  1032               	iorwf	(??___fldiv+3)^0,w,c
  7427  01DBF0  B4D8               	btfsc	status,2,c
  7428  01DBF2  EFFD  F0ED         	goto	u2891
  7429  01DBF6  EFFF  F0ED         	goto	u2890
  7430  01DBFA                     u2891:
  7431  01DBFA  EF03  F0EE         	goto	l1197
  7432  01DBFE                     u2890:
  7433  01DBFE                     l3636:
  7434  01DBFE  0E01               	movlw	1
  7435  01DC00  6E3F               	movwf	___fldiv@aexp^0,c
  7436  01DC02  EF0C  F0EE         	goto	l1196
  7437  01DC06                     l1197:
  7438  01DC06  A027               	btfss	___fldiv@b^0,0,c
  7439  01DC08  EF08  F0EE         	goto	u2901
  7440  01DC0C  EF0A  F0EE         	goto	u2900
  7441  01DC10                     u2901:
  7442  01DC10  EF0C  F0EE         	goto	l1196
  7443  01DC14                     u2900:
  7444  01DC14  EFFF  F0ED         	goto	l3636
  7445  01DC18                     l1196:
  7446  01DC18  503F               	movf	___fldiv@aexp^0,w,c
  7447  01DC1A  B4D8               	btfsc	status,2,c
  7448  01DC1C  EF12  F0EE         	goto	u2911
  7449  01DC20  EF14  F0EE         	goto	u2910
  7450  01DC24                     u2911:
  7451  01DC24  EF38  F0EE         	goto	l3648
  7452  01DC28                     u2910:
  7453  01DC28  0E01               	movlw	1
  7454  01DC2A  2627               	addwf	___fldiv@b^0,f,c
  7455  01DC2C  0E00               	movlw	0
  7456  01DC2E  2228               	addwfc	(___fldiv@b+1)^0,f,c
  7457  01DC30  2229               	addwfc	(___fldiv@b+2)^0,f,c
  7458  01DC32  222A               	addwfc	(___fldiv@b+3)^0,f,c
  7459  01DC34  A02A               	btfss	(___fldiv@b+3)^0,0,c
  7460  01DC36  EF1F  F0EE         	goto	u2921
  7461  01DC3A  EF21  F0EE         	goto	u2920
  7462  01DC3E                     u2921:
  7463  01DC3E  EF38  F0EE         	goto	l3648
  7464  01DC42                     u2920:
  7465  01DC42  C027  F02F         	movff	___fldiv@b,??___fldiv
  7466  01DC46  C028  F030         	movff	___fldiv@b+1,??___fldiv+1
  7467  01DC4A  C029  F031         	movff	___fldiv@b+2,??___fldiv+2
  7468  01DC4E  C02A  F032         	movff	___fldiv@b+3,??___fldiv+3
  7469  01DC52  3432               	rlcf	(??___fldiv+3)^0,w,c
  7470  01DC54  3232               	rrcf	(??___fldiv+3)^0,f,c
  7471  01DC56  3231               	rrcf	(??___fldiv+2)^0,f,c
  7472  01DC58  3230               	rrcf	(??___fldiv+1)^0,f,c
  7473  01DC5A  322F               	rrcf	??___fldiv^0,f,c
  7474  01DC5C  C02F  F027         	movff	??___fldiv,___fldiv@b
  7475  01DC60  C030  F028         	movff	??___fldiv+1,___fldiv@b+1
  7476  01DC64  C031  F029         	movff	??___fldiv+2,___fldiv@b+2
  7477  01DC68  C032  F02A         	movff	??___fldiv+3,___fldiv@b+3
  7478  01DC6C  4A38               	infsnz	___fldiv@new_exp^0,f,c
  7479  01DC6E  2A39               	incf	(___fldiv@new_exp+1)^0,f,c
  7480  01DC70                     l3648:
  7481  01DC70  BE39               	btfsc	(___fldiv@new_exp+1)^0,7,c
  7482  01DC72  EF43  F0EE         	goto	u2931
  7483  01DC76  5039               	movf	(___fldiv@new_exp+1)^0,w,c
  7484  01DC78  E108               	bnz	u2930
  7485  01DC7A  2838               	incf	___fldiv@new_exp^0,w,c
  7486  01DC7C  A0D8               	btfss	status,0,c
  7487  01DC7E  EF43  F0EE         	goto	u2931
  7488  01DC82  EF45  F0EE         	goto	u2930
  7489  01DC86                     u2931:
  7490  01DC86  EF50  F0EE         	goto	l3652
  7491  01DC8A                     u2930:
  7492  01DC8A  0E00               	movlw	0
  7493  01DC8C  6E39               	movwf	(___fldiv@new_exp+1)^0,c
  7494  01DC8E  6838               	setf	___fldiv@new_exp^0,c
  7495  01DC90  0E00               	movlw	0
  7496  01DC92  6E27               	movwf	___fldiv@b^0,c
  7497  01DC94  0E00               	movlw	0
  7498  01DC96  6E28               	movwf	(___fldiv@b+1)^0,c
  7499  01DC98  0E00               	movlw	0
  7500  01DC9A  6E29               	movwf	(___fldiv@b+2)^0,c
  7501  01DC9C  0E00               	movlw	0
  7502  01DC9E  6E2A               	movwf	(___fldiv@b+3)^0,c
  7503  01DCA0                     l3652:
  7504  01DCA0  BE39               	btfsc	(___fldiv@new_exp+1)^0,7,c
  7505  01DCA2  EF5D  F0EE         	goto	u2940
  7506  01DCA6  5039               	movf	(___fldiv@new_exp+1)^0,w,c
  7507  01DCA8  E106               	bnz	u2941
  7508  01DCAA  0438               	decf	___fldiv@new_exp^0,w,c
  7509  01DCAC  B0D8               	btfsc	status,0,c
  7510  01DCAE  EF5B  F0EE         	goto	u2941
  7511  01DCB2  EF5D  F0EE         	goto	u2940
  7512  01DCB6                     u2941:
  7513  01DCB6  EF6B  F0EE         	goto	l3656
  7514  01DCBA                     u2940:
  7515  01DCBA  0E00               	movlw	0
  7516  01DCBC  6E39               	movwf	(___fldiv@new_exp+1)^0,c
  7517  01DCBE  0E00               	movlw	0
  7518  01DCC0  6E38               	movwf	___fldiv@new_exp^0,c
  7519  01DCC2  0E00               	movlw	0
  7520  01DCC4  6E27               	movwf	___fldiv@b^0,c
  7521  01DCC6  0E00               	movlw	0
  7522  01DCC8  6E28               	movwf	(___fldiv@b+1)^0,c
  7523  01DCCA  0E00               	movlw	0
  7524  01DCCC  6E29               	movwf	(___fldiv@b+2)^0,c
  7525  01DCCE  0E00               	movlw	0
  7526  01DCD0  6E2A               	movwf	(___fldiv@b+3)^0,c
  7527  01DCD2  0E00               	movlw	0
  7528  01DCD4  6E37               	movwf	___fldiv@sign^0,c
  7529  01DCD6                     l3656:
  7530  01DCD6  C038  F03E         	movff	___fldiv@new_exp,___fldiv@bexp
  7531  01DCDA  A03E               	btfss	___fldiv@bexp^0,0,c
  7532  01DCDC  EF72  F0EE         	goto	u2951
  7533  01DCE0  EF74  F0EE         	goto	u2950
  7534  01DCE4                     u2951:
  7535  01DCE4  EF77  F0EE         	goto	l3662
  7536  01DCE8                     u2950:
  7537  01DCE8  8E29               	bsf	(___fldiv@b+2)^0,7,c
  7538  01DCEA  EF78  F0EE         	goto	l3664
  7539  01DCEE                     l3662:
  7540  01DCEE  9E29               	bcf	(___fldiv@b+2)^0,7,c
  7541  01DCF0                     l3664:
  7542  01DCF0  90D8               	bcf	status,0,c
  7543  01DCF2  303E               	rrcf	___fldiv@bexp^0,w,c
  7544  01DCF4  6E2A               	movwf	(___fldiv@b+3)^0,c
  7545  01DCF6  EF2E  F0ED         	goto	l3578
  7546  01DCFA                     l1183:
  7547  01DCFA  0012               	return		;funcret
  7548  01DCFC                     __end_of___fldiv:
  7549                           	callstack 0
  7550                           
  7551 ;; *************** function _color_click_init *****************
  7552 ;; Defined at:
  7553 ;;		line 33 in file "color.c"
  7554 ;; Parameters:    Size  Location     Type
  7555 ;;		None
  7556 ;; Auto vars:     Size  Location     Type
  7557 ;;		None
  7558 ;; Return value:  Size  Location     Type
  7559 ;;                  1    wreg      void 
  7560 ;; Registers used:
  7561 ;;		wreg, status,2, status,0, cstack
  7562 ;; Tracked objects:
  7563 ;;		On entry : 0/0
  7564 ;;		On exit  : 0/0
  7565 ;;		Unchanged: 0/0
  7566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7569 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7570 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7571 ;;Total ram usage:        1 bytes
  7572 ;; Hardware stack levels used: 1
  7573 ;; Hardware stack levels required when called: 3
  7574 ;; This function calls:
  7575 ;;		_I2C_2_Master_Init
  7576 ;;		_color_writetoaddr
  7577 ;; This function is called by:
  7578 ;;		_main
  7579 ;; This function uses a non-reentrant model
  7580 ;;
  7581                           
  7582                           	psect	text16
  7583  01BA9A                     __ptext16:
  7584                           	callstack 0
  7585  01BA9A                     _color_click_init:
  7586                           	callstack 27
  7587  01BA9A                     
  7588                           ;color.c: 36:     I2C_2_Master_Init();
  7589  01BA9A  EC23  F0DD         	call	_I2C_2_Master_Init	;wreg free
  7590  01BA9E                     
  7591                           ;color.c: 39:   color_writetoaddr(0x00, 0x01);
  7592  01BA9E  0E01               	movlw	1
  7593  01BAA0  6E03               	movwf	color_writetoaddr@value^0,c
  7594  01BAA2  0E00               	movlw	0
  7595  01BAA4  ECDB  F0DC         	call	_color_writetoaddr
  7596  01BAA8                     
  7597                           ;color.c: 40:     _delay((unsigned long)((3)*(64000000/4000.0)));
  7598  01BAA8  0E3F               	movlw	63
  7599  01BAAA  6E05               	movwf	??_color_click_init^0,c
  7600  01BAAC  0E55               	movlw	85
  7601  01BAAE                     u4187:
  7602  01BAAE  2EE8               	decfsz	wreg,f,c
  7603  01BAB0  D7FE               	bra	u4187
  7604  01BAB2  2E05               	decfsz	??_color_click_init^0,f,c
  7605  01BAB4  D7FC               	bra	u4187
  7606  01BAB6  F000               	nop	
  7607  01BAB8                     
  7608                           ;color.c: 43:  color_writetoaddr(0x00, 0x03);
  7609  01BAB8  0E03               	movlw	3
  7610  01BABA  6E03               	movwf	color_writetoaddr@value^0,c
  7611  01BABC  0E00               	movlw	0
  7612  01BABE  ECDB  F0DC         	call	_color_writetoaddr
  7613  01BAC2                     
  7614                           ;color.c: 46:  color_writetoaddr(0x01, 0xD5);
  7615  01BAC2  0ED5               	movlw	213
  7616  01BAC4  6E03               	movwf	color_writetoaddr@value^0,c
  7617  01BAC6  0E01               	movlw	1
  7618  01BAC8  ECDB  F0DC         	call	_color_writetoaddr
  7619  01BACC  0012               	return		;funcret
  7620  01BACE                     __end_of_color_click_init:
  7621                           	callstack 0
  7622                           
  7623 ;; *************** function _color_writetoaddr *****************
  7624 ;; Defined at:
  7625 ;;		line 53 in file "color.c"
  7626 ;; Parameters:    Size  Location     Type
  7627 ;;  address         1    wreg     unsigned char 
  7628 ;;  value           1    2[COMRAM] unsigned char 
  7629 ;; Auto vars:     Size  Location     Type
  7630 ;;  address         1    3[COMRAM] unsigned char 
  7631 ;; Return value:  Size  Location     Type
  7632 ;;                  1    wreg      void 
  7633 ;; Registers used:
  7634 ;;		wreg, status,2, status,0, cstack
  7635 ;; Tracked objects:
  7636 ;;		On entry : 0/0
  7637 ;;		On exit  : 0/0
  7638 ;;		Unchanged: 0/0
  7639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7640 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7641 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7643 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7644 ;;Total ram usage:        2 bytes
  7645 ;; Hardware stack levels used: 1
  7646 ;; Hardware stack levels required when called: 2
  7647 ;; This function calls:
  7648 ;;		_I2C_2_Master_Start
  7649 ;;		_I2C_2_Master_Stop
  7650 ;;		_I2C_2_Master_Write
  7651 ;; This function is called by:
  7652 ;;		_color_click_init
  7653 ;; This function uses a non-reentrant model
  7654 ;;
  7655                           
  7656                           	psect	text17
  7657  01B9B6                     __ptext17:
  7658                           	callstack 0
  7659  01B9B6                     _color_writetoaddr:
  7660                           	callstack 27
  7661                           
  7662                           ;incstack = 0
  7663                           ;color_writetoaddr@address stored from wreg
  7664  01B9B6  6E04               	movwf	color_writetoaddr@address^0,c
  7665  01B9B8                     
  7666                           ;color.c: 54:     I2C_2_Master_Start();
  7667  01B9B8  ECB4  F0DC         	call	_I2C_2_Master_Start	;wreg free
  7668                           
  7669                           ;color.c: 55:     I2C_2_Master_Write(0x52 | 0x00);
  7670  01B9BC  0E52               	movlw	82
  7671  01B9BE  ECBE  F0DC         	call	_I2C_2_Master_Write
  7672                           
  7673                           ;color.c: 56:     I2C_2_Master_Write(0x80 | address);
  7674  01B9C2  5004               	movf	color_writetoaddr@address^0,w,c
  7675  01B9C4  0980               	iorlw	128
  7676  01B9C6  ECBE  F0DC         	call	_I2C_2_Master_Write
  7677                           
  7678                           ;color.c: 57:     I2C_2_Master_Write(value);
  7679  01B9CA  5003               	movf	color_writetoaddr@value^0,w,c
  7680  01B9CC  ECBE  F0DC         	call	_I2C_2_Master_Write
  7681                           
  7682                           ;color.c: 58:     I2C_2_Master_Stop();
  7683  01B9D0  ECB9  F0DC         	call	_I2C_2_Master_Stop	;wreg free
  7684  01B9D4  0012               	return		;funcret
  7685  01B9D6                     __end_of_color_writetoaddr:
  7686                           	callstack 0
  7687                           
  7688 ;; *************** function _I2C_2_Master_Init *****************
  7689 ;; Defined at:
  7690 ;;		line 4 in file "i2c.c"
  7691 ;; Parameters:    Size  Location     Type
  7692 ;;		None
  7693 ;; Auto vars:     Size  Location     Type
  7694 ;;		None
  7695 ;; Return value:  Size  Location     Type
  7696 ;;                  1    wreg      void 
  7697 ;; Registers used:
  7698 ;;		wreg, status,2
  7699 ;; Tracked objects:
  7700 ;;		On entry : 0/0
  7701 ;;		On exit  : 0/0
  7702 ;;		Unchanged: 0/0
  7703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7708 ;;Total ram usage:        0 bytes
  7709 ;; Hardware stack levels used: 1
  7710 ;; This function calls:
  7711 ;;		Nothing
  7712 ;; This function is called by:
  7713 ;;		_main
  7714 ;;		_color_click_init
  7715 ;; This function uses a non-reentrant model
  7716 ;;
  7717                           
  7718                           	psect	text18
  7719  01BA46                     __ptext18:
  7720                           	callstack 0
  7721  01BA46                     _I2C_2_Master_Init:
  7722                           	callstack 29
  7723  01BA46                     
  7724                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  7725  01BA46  010E               	movlb	14	; () banked
  7726  01BA48  51D9               	movf	217,w,b	;volatile
  7727  01BA4A  0BF0               	andlw	-16
  7728  01BA4C  0908               	iorlw	8
  7729  01BA4E  6FD9               	movwf	217,b	;volatile
  7730  01BA50                     
  7731                           ; BSR set to: 14
  7732                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  7733  01BA50  8BD9               	bsf	217,5,b	;volatile
  7734                           
  7735                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  7736  01BA52  0E9F               	movlw	159
  7737  01BA54  6FD6               	movwf	214,b	;volatile
  7738  01BA56                     
  7739                           ; BSR set to: 14
  7740                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  7741  01BA56  8A84               	bsf	132,5,c	;volatile
  7742  01BA58                     
  7743                           ; BSR set to: 14
  7744                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  7745  01BA58  8C84               	bsf	132,6,c	;volatile
  7746  01BA5A                     
  7747                           ; BSR set to: 14
  7748                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  7749  01BA5A  9BA7               	bcf	167,5,b	;volatile
  7750  01BA5C                     
  7751                           ; BSR set to: 14
  7752                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  7753  01BA5C  9DA7               	bcf	167,6,b	;volatile
  7754                           
  7755                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  7756  01BA5E  0E1D               	movlw	29
  7757  01BA60  6F1D               	movwf	29,b	;volatile
  7758                           
  7759                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  7760  01BA62  0E1E               	movlw	30
  7761  01BA64  6F1C               	movwf	28,b	;volatile
  7762                           
  7763                           ;i2c.c: 18:   RD5PPS=0x1C;
  7764  01BA66  0E1C               	movlw	28
  7765  01BA68  6F6F               	movwf	111,b	;volatile
  7766                           
  7767                           ;i2c.c: 19:   RD6PPS=0x1B;
  7768  01BA6A  0E1B               	movlw	27
  7769  01BA6C  6F70               	movwf	112,b	;volatile
  7770  01BA6E                     
  7771                           ; BSR set to: 14
  7772  01BA6E  0012               	return		;funcret
  7773  01BA70                     __end_of_I2C_2_Master_Init:
  7774                           	callstack 0
  7775                           
  7776 ;; *************** function _calibrateColor *****************
  7777 ;; Defined at:
  7778 ;;		line 300 in file "color.c"
  7779 ;; Parameters:    Size  Location     Type
  7780 ;;  sc              2   11[COMRAM] PTR struct storecolor
  7781 ;;		 -> main@sc(120), 
  7782 ;; Auto vars:     Size  Location     Type
  7783 ;;		None
  7784 ;; Return value:  Size  Location     Type
  7785 ;;                  1    wreg      void 
  7786 ;; Registers used:
  7787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7788 ;; Tracked objects:
  7789 ;;		On entry : 0/0
  7790 ;;		On exit  : 0/0
  7791 ;;		Unchanged: 0/0
  7792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7793 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7795 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7796 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7797 ;;Total ram usage:        4 bytes
  7798 ;; Hardware stack levels used: 1
  7799 ;; Hardware stack levels required when called: 3
  7800 ;; This function calls:
  7801 ;;		_color_read_Blue
  7802 ;;		_color_read_Clear
  7803 ;;		_color_read_Green
  7804 ;;		_color_read_Red
  7805 ;;		_turnonLED
  7806 ;; This function is called by:
  7807 ;;		_main
  7808 ;; This function uses a non-reentrant model
  7809 ;;
  7810                           
  7811                           	psect	text19
  7812  01CCD0                     __ptext19:
  7813                           	callstack 0
  7814  01CCD0                     _calibrateColor:
  7815                           	callstack 27
  7816  01CCD0                     
  7817                           ;color.c: 301:     static char i = 0;;color.c: 303:     turnonLED (1,1,1);
  7818  01CCD0  0E00               	movlw	0
  7819  01CCD2  6E02               	movwf	(turnonLED@RL+1)^0,c
  7820  01CCD4  0E01               	movlw	1
  7821  01CCD6  6E01               	movwf	turnonLED@RL^0,c
  7822  01CCD8  0E00               	movlw	0
  7823  01CCDA  6E04               	movwf	(turnonLED@GL+1)^0,c
  7824  01CCDC  0E01               	movlw	1
  7825  01CCDE  6E03               	movwf	turnonLED@GL^0,c
  7826  01CCE0  0E00               	movlw	0
  7827  01CCE2  6E06               	movwf	(turnonLED@BL+1)^0,c
  7828  01CCE4  0E01               	movlw	1
  7829  01CCE6  6E05               	movwf	turnonLED@BL^0,c
  7830  01CCE8  EC94  F0DE         	call	_turnonLED	;wreg free
  7831  01CCEC                     
  7832                           ;color.c: 304:     _delay((unsigned long)((500)*(64000000/4000.0)));
  7833  01CCEC  0E29               	movlw	41
  7834  01CCEE  6E0F               	movwf	(??_calibrateColor+1)^0,c
  7835  01CCF0  0E96               	movlw	150
  7836  01CCF2  6E0E               	movwf	??_calibrateColor^0,c
  7837  01CCF4  0E7F               	movlw	127
  7838  01CCF6                     u4197:
  7839  01CCF6  2EE8               	decfsz	wreg,f,c
  7840  01CCF8  D7FE               	bra	u4197
  7841  01CCFA  2E0E               	decfsz	??_calibrateColor^0,f,c
  7842  01CCFC  D7FC               	bra	u4197
  7843  01CCFE  2E0F               	decfsz	(??_calibrateColor+1)^0,f,c
  7844  01CD00  D7FA               	bra	u4197
  7845  01CD02  F000               	nop	
  7846  01CD04                     
  7847                           ;color.c: 306:     sc->C[i] = color_read_Clear();
  7848  01CD04  ECF3  F0DD         	call	_color_read_Clear	;wreg free
  7849  01CD08  0100               	movlb	0	; () banked
  7850  01CD0A  51EE               	movf	calibrateColor@i& (0+255),w,b
  7851  01CD0C  0D02               	mullw	2
  7852  01CD0E  C00C  F00E         	movff	calibrateColor@sc,??_calibrateColor
  7853  01CD12  C00D  F00F         	movff	calibrateColor@sc+1,??_calibrateColor+1
  7854  01CD16  50F3               	movf	243,w,c
  7855  01CD18  260E               	addwf	??_calibrateColor^0,f,c
  7856  01CD1A  50F4               	movf	244,w,c
  7857  01CD1C  220F               	addwfc	(??_calibrateColor+1)^0,f,c
  7858  01CD1E  0E5A               	movlw	90
  7859  01CD20  240E               	addwf	??_calibrateColor^0,w,c
  7860  01CD22  6ED9               	movwf	fsr2l,c
  7861  01CD24  0E00               	movlw	0
  7862  01CD26  200F               	addwfc	(??_calibrateColor+1)^0,w,c
  7863  01CD28  6EDA               	movwf	fsr2h,c
  7864  01CD2A  C005  FFDE         	movff	?_color_read_Clear,postinc2
  7865  01CD2E  C006  FFDD         	movff	?_color_read_Clear+1,postdec2
  7866  01CD32                     
  7867                           ; BSR set to: 0
  7868                           ;color.c: 307:     sc->R[i] = color_read_Red();
  7869  01CD32  EC43  F0DE         	call	_color_read_Red	;wreg free
  7870  01CD36  0100               	movlb	0	; () banked
  7871  01CD38  51EE               	movf	calibrateColor@i& (0+255),w,b
  7872  01CD3A  0D02               	mullw	2
  7873  01CD3C  CFF3 F00E          	movff	prodl,??_calibrateColor
  7874  01CD40  CFF4 F00F          	movff	prodh,??_calibrateColor+1
  7875  01CD44  500E               	movf	??_calibrateColor^0,w,c
  7876  01CD46  240C               	addwf	calibrateColor@sc^0,w,c
  7877  01CD48  6ED9               	movwf	fsr2l,c
  7878  01CD4A  500F               	movf	(??_calibrateColor+1)^0,w,c
  7879  01CD4C  200D               	addwfc	(calibrateColor@sc+1)^0,w,c
  7880  01CD4E  6EDA               	movwf	fsr2h,c
  7881  01CD50  C005  FFDE         	movff	?_color_read_Red,postinc2
  7882  01CD54  C006  FFDD         	movff	?_color_read_Red+1,postdec2
  7883  01CD58                     
  7884                           ; BSR set to: 0
  7885                           ;color.c: 308:     sc->G[i] = color_read_Green();
  7886  01CD58  EC1B  F0DE         	call	_color_read_Green	;wreg free
  7887  01CD5C  0100               	movlb	0	; () banked
  7888  01CD5E  51EE               	movf	calibrateColor@i& (0+255),w,b
  7889  01CD60  0D02               	mullw	2
  7890  01CD62  C00C  F00E         	movff	calibrateColor@sc,??_calibrateColor
  7891  01CD66  C00D  F00F         	movff	calibrateColor@sc+1,??_calibrateColor+1
  7892  01CD6A  50F3               	movf	243,w,c
  7893  01CD6C  260E               	addwf	??_calibrateColor^0,f,c
  7894  01CD6E  50F4               	movf	244,w,c
  7895  01CD70  220F               	addwfc	(??_calibrateColor+1)^0,f,c
  7896  01CD72  0E1E               	movlw	30
  7897  01CD74  240E               	addwf	??_calibrateColor^0,w,c
  7898  01CD76  6ED9               	movwf	fsr2l,c
  7899  01CD78  0E00               	movlw	0
  7900  01CD7A  200F               	addwfc	(??_calibrateColor+1)^0,w,c
  7901  01CD7C  6EDA               	movwf	fsr2h,c
  7902  01CD7E  C005  FFDE         	movff	?_color_read_Green,postinc2
  7903  01CD82  C006  FFDD         	movff	?_color_read_Green+1,postdec2
  7904  01CD86                     
  7905                           ; BSR set to: 0
  7906                           ;color.c: 309:     sc->B[i] = color_read_Blue();
  7907  01CD86  ECCB  F0DD         	call	_color_read_Blue	;wreg free
  7908  01CD8A  0100               	movlb	0	; () banked
  7909  01CD8C  51EE               	movf	calibrateColor@i& (0+255),w,b
  7910  01CD8E  0D02               	mullw	2
  7911  01CD90  C00C  F00E         	movff	calibrateColor@sc,??_calibrateColor
  7912  01CD94  C00D  F00F         	movff	calibrateColor@sc+1,??_calibrateColor+1
  7913  01CD98  50F3               	movf	243,w,c
  7914  01CD9A  260E               	addwf	??_calibrateColor^0,f,c
  7915  01CD9C  50F4               	movf	244,w,c
  7916  01CD9E  220F               	addwfc	(??_calibrateColor+1)^0,f,c
  7917  01CDA0  0E3C               	movlw	60
  7918  01CDA2  240E               	addwf	??_calibrateColor^0,w,c
  7919  01CDA4  6ED9               	movwf	fsr2l,c
  7920  01CDA6  0E00               	movlw	0
  7921  01CDA8  200F               	addwfc	(??_calibrateColor+1)^0,w,c
  7922  01CDAA  6EDA               	movwf	fsr2h,c
  7923  01CDAC  C005  FFDE         	movff	?_color_read_Blue,postinc2
  7924  01CDB0  C006  FFDD         	movff	?_color_read_Blue+1,postdec2
  7925  01CDB4                     
  7926                           ; BSR set to: 0
  7927                           ;color.c: 311:     i++;
  7928  01CDB4  2BEE               	incf	calibrateColor@i& (0+255),f,b
  7929  01CDB6                     
  7930                           ; BSR set to: 0
  7931                           ;color.c: 312:     turnonLED (0,0,0);
  7932  01CDB6  0E00               	movlw	0
  7933  01CDB8  6E02               	movwf	(turnonLED@RL+1)^0,c
  7934  01CDBA  0E00               	movlw	0
  7935  01CDBC  6E01               	movwf	turnonLED@RL^0,c
  7936  01CDBE  0E00               	movlw	0
  7937  01CDC0  6E04               	movwf	(turnonLED@GL+1)^0,c
  7938  01CDC2  0E00               	movlw	0
  7939  01CDC4  6E03               	movwf	turnonLED@GL^0,c
  7940  01CDC6  0E00               	movlw	0
  7941  01CDC8  6E06               	movwf	(turnonLED@BL+1)^0,c
  7942  01CDCA  0E00               	movlw	0
  7943  01CDCC  6E05               	movwf	turnonLED@BL^0,c
  7944  01CDCE  EC94  F0DE         	call	_turnonLED	;wreg free
  7945                           
  7946                           ;color.c: 313:     if (i == 15) {
  7947  01CDD2  0E0F               	movlw	15
  7948  01CDD4  0100               	movlb	0	; () banked
  7949  01CDD6  19EE               	xorwf	calibrateColor@i& (0+255),w,b
  7950  01CDD8  A4D8               	btfss	status,2,c
  7951  01CDDA  EFF1  F0E6         	goto	u3501
  7952  01CDDE  EFF3  F0E6         	goto	u3500
  7953  01CDE2                     u3501:
  7954  01CDE2  EFF4  F0E6         	goto	l227
  7955  01CDE6                     u3500:
  7956  01CDE6                     
  7957                           ; BSR set to: 0
  7958                           ;color.c: 314:          LATDbits.LATD7 = 1;
  7959  01CDE6  8E7C               	bsf	124,7,c	;volatile
  7960  01CDE8                     l227:
  7961                           
  7962                           ; BSR set to: 0
  7963  01CDE8  0012               	return		;funcret
  7964  01CDEA                     __end_of_calibrateColor:
  7965                           	callstack 0
  7966                           
  7967 ;; *************** function _turnonLED *****************
  7968 ;; Defined at:
  7969 ;;		line 136 in file "color.c"
  7970 ;; Parameters:    Size  Location     Type
  7971 ;;  RL              2    0[COMRAM] unsigned int 
  7972 ;;  GL              2    2[COMRAM] unsigned int 
  7973 ;;  BL              2    4[COMRAM] unsigned int 
  7974 ;; Auto vars:     Size  Location     Type
  7975 ;;		None
  7976 ;; Return value:  Size  Location     Type
  7977 ;;                  1    wreg      void 
  7978 ;; Registers used:
  7979 ;;		wreg, status,2, status,0
  7980 ;; Tracked objects:
  7981 ;;		On entry : 0/0
  7982 ;;		On exit  : 0/0
  7983 ;;		Unchanged: 0/0
  7984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7985 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7988 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7989 ;;Total ram usage:        6 bytes
  7990 ;; Hardware stack levels used: 1
  7991 ;; This function calls:
  7992 ;;		Nothing
  7993 ;; This function is called by:
  7994 ;;		_calibrateColor
  7995 ;;		_scanColor
  7996 ;;		_findcolor
  7997 ;; This function uses a non-reentrant model
  7998 ;;
  7999                           
  8000                           	psect	text20
  8001  01BD28                     __ptext20:
  8002                           	callstack 0
  8003  01BD28                     _turnonLED:
  8004                           	callstack 29
  8005  01BD28                     
  8006                           ;color.c: 136: void turnonLED (unsigned int RL, unsigned int GL, unsigned int BL);color.
      +                          c: 137: {;color.c: 139:     TRISGbits.TRISG1=0;
  8007  01BD28  9287               	bcf	135,1,c	;volatile
  8008                           
  8009                           ;color.c: 140:     TRISAbits.TRISA4=0;
  8010  01BD2A  9881               	bcf	129,4,c	;volatile
  8011                           
  8012                           ;color.c: 141:     TRISFbits.TRISF7=0;
  8013  01BD2C  9E86               	bcf	134,7,c	;volatile
  8014  01BD2E                     
  8015                           ;color.c: 143:     if (RL == 1){
  8016  01BD2E  0401               	decf	turnonLED@RL^0,w,c
  8017  01BD30  1002               	iorwf	(turnonLED@RL+1)^0,w,c
  8018  01BD32  A4D8               	btfss	status,2,c
  8019  01BD34  EF9E  F0DE         	goto	u3321
  8020  01BD38  EFA0  F0DE         	goto	u3320
  8021  01BD3C                     u3321:
  8022  01BD3C  EFA3  F0DE         	goto	l149
  8023  01BD40                     u3320:
  8024  01BD40                     
  8025                           ;color.c: 144:    LATGbits.LATG1=1;
  8026  01BD40  827F               	bsf	127,1,c	;volatile
  8027                           
  8028                           ;color.c: 145:     }
  8029  01BD42  EFA4  F0DE         	goto	l3972
  8030  01BD46                     l149:
  8031                           
  8032                           ;color.c: 147:     LATGbits.LATG1=0;
  8033  01BD46  927F               	bcf	127,1,c	;volatile
  8034  01BD48                     l3972:
  8035                           
  8036                           ;color.c: 150:     if (GL==1){
  8037  01BD48  0403               	decf	turnonLED@GL^0,w,c
  8038  01BD4A  1004               	iorwf	(turnonLED@GL+1)^0,w,c
  8039  01BD4C  A4D8               	btfss	status,2,c
  8040  01BD4E  EFAB  F0DE         	goto	u3331
  8041  01BD52  EFAD  F0DE         	goto	u3330
  8042  01BD56                     u3331:
  8043  01BD56  EFB0  F0DE         	goto	l151
  8044  01BD5A                     u3330:
  8045  01BD5A                     
  8046                           ;color.c: 151:     LATAbits.LATA4=1;
  8047  01BD5A  8879               	bsf	121,4,c	;volatile
  8048                           
  8049                           ;color.c: 152:     }
  8050  01BD5C  EFB1  F0DE         	goto	l3976
  8051  01BD60                     l151:
  8052                           
  8053                           ;color.c: 154:     LATAbits.LATA4=0;
  8054  01BD60  9879               	bcf	121,4,c	;volatile
  8055  01BD62                     l3976:
  8056                           
  8057                           ;color.c: 158:     if (BL==1){
  8058  01BD62  0405               	decf	turnonLED@BL^0,w,c
  8059  01BD64  1006               	iorwf	(turnonLED@BL+1)^0,w,c
  8060  01BD66  A4D8               	btfss	status,2,c
  8061  01BD68  EFB8  F0DE         	goto	u3341
  8062  01BD6C  EFBA  F0DE         	goto	u3340
  8063  01BD70                     u3341:
  8064  01BD70  EFBD  F0DE         	goto	l153
  8065  01BD74                     u3340:
  8066  01BD74                     
  8067                           ;color.c: 159:     LATFbits.LATF7=1;
  8068  01BD74  8E7E               	bsf	126,7,c	;volatile
  8069                           
  8070                           ;color.c: 160:     }
  8071  01BD76  EFBE  F0DE         	goto	l155
  8072  01BD7A                     l153:
  8073                           
  8074                           ;color.c: 162:     LATFbits.LATF7=0;
  8075  01BD7A  9E7E               	bcf	126,7,c	;volatile
  8076  01BD7C                     l155:
  8077  01BD7C  0012               	return		;funcret
  8078  01BD7E                     __end_of_turnonLED:
  8079                           	callstack 0
  8080                           
  8081 ;; *************** function _color_read_Red *****************
  8082 ;; Defined at:
  8083 ;;		line 64 in file "color.c"
  8084 ;; Parameters:    Size  Location     Type
  8085 ;;		None
  8086 ;; Auto vars:     Size  Location     Type
  8087 ;;  tmp             2    9[COMRAM] unsigned int 
  8088 ;; Return value:  Size  Location     Type
  8089 ;;                  2    4[COMRAM] unsigned int 
  8090 ;; Registers used:
  8091 ;;		wreg, status,2, status,0, cstack
  8092 ;; Tracked objects:
  8093 ;;		On entry : 0/0
  8094 ;;		On exit  : 0/0
  8095 ;;		Unchanged: 0/0
  8096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8097 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8098 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8099 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8100 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8101 ;;Total ram usage:        7 bytes
  8102 ;; Hardware stack levels used: 1
  8103 ;; Hardware stack levels required when called: 2
  8104 ;; This function calls:
  8105 ;;		_I2C_2_Master_Read
  8106 ;;		_I2C_2_Master_RepStart
  8107 ;;		_I2C_2_Master_Start
  8108 ;;		_I2C_2_Master_Stop
  8109 ;;		_I2C_2_Master_Write
  8110 ;; This function is called by:
  8111 ;;		_calibrateColor
  8112 ;;		_findcolor
  8113 ;; This function uses a non-reentrant model
  8114 ;;
  8115                           
  8116                           	psect	text21
  8117  01BC86                     __ptext21:
  8118                           	callstack 0
  8119  01BC86                     _color_read_Red:
  8120                           	callstack 27
  8121  01BC86                     
  8122                           ;color.c: 66:  unsigned int tmp;;color.c: 67:  I2C_2_Master_Start();
  8123  01BC86  ECB4  F0DC         	call	_I2C_2_Master_Start	;wreg free
  8124                           
  8125                           ;color.c: 68:  I2C_2_Master_Write(0x52 | 0x00);
  8126  01BC8A  0E52               	movlw	82
  8127  01BC8C  ECBE  F0DC         	call	_I2C_2_Master_Write
  8128                           
  8129                           ;color.c: 69:  I2C_2_Master_Write(0xA0 | 0x16);
  8130  01BC90  0EB6               	movlw	182
  8131  01BC92  ECBE  F0DC         	call	_I2C_2_Master_Write
  8132                           
  8133                           ;color.c: 70:  I2C_2_Master_RepStart();
  8134  01BC96  ECAF  F0DC         	call	_I2C_2_Master_RepStart	;wreg free
  8135                           
  8136                           ;color.c: 71:  I2C_2_Master_Write(0x52 | 0x01);
  8137  01BC9A  0E53               	movlw	83
  8138  01BC9C  ECBE  F0DC         	call	_I2C_2_Master_Write
  8139                           
  8140                           ;color.c: 72:  tmp=I2C_2_Master_Read(1);
  8141  01BCA0  0E01               	movlw	1
  8142  01BCA2  EC87  F0DD         	call	_I2C_2_Master_Read
  8143  01BCA6  6E07               	movwf	??_color_read_Red^0,c
  8144  01BCA8  5007               	movf	??_color_read_Red^0,w,c
  8145  01BCAA  6E0A               	movwf	color_read_Red@tmp^0,c
  8146  01BCAC  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  8147                           
  8148                           ;color.c: 73:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8149  01BCAE  0E00               	movlw	0
  8150  01BCB0  EC87  F0DD         	call	_I2C_2_Master_Read
  8151  01BCB4  6E07               	movwf	??_color_read_Red^0,c
  8152  01BCB6  5007               	movf	??_color_read_Red^0,w,c
  8153  01BCB8  6E09               	movwf	(??_color_read_Red+2)^0,c
  8154  01BCBA  6A08               	clrf	(??_color_read_Red+1)^0,c
  8155  01BCBC  500A               	movf	color_read_Red@tmp^0,w,c
  8156  01BCBE  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  8157  01BCC0  6E0A               	movwf	color_read_Red@tmp^0,c
  8158  01BCC2  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  8159  01BCC4  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  8160  01BCC6  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  8161                           
  8162                           ;color.c: 74:  I2C_2_Master_Stop();
  8163  01BCC8  ECB9  F0DC         	call	_I2C_2_Master_Stop	;wreg free
  8164  01BCCC                     
  8165                           ;color.c: 75:  return tmp;
  8166  01BCCC  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  8167  01BCD0  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  8168  01BCD4  0012               	return		;funcret
  8169  01BCD6                     __end_of_color_read_Red:
  8170                           	callstack 0
  8171                           
  8172 ;; *************** function _color_read_Green *****************
  8173 ;; Defined at:
  8174 ;;		line 81 in file "color.c"
  8175 ;; Parameters:    Size  Location     Type
  8176 ;;		None
  8177 ;; Auto vars:     Size  Location     Type
  8178 ;;  tmp             2    9[COMRAM] unsigned int 
  8179 ;; Return value:  Size  Location     Type
  8180 ;;                  2    4[COMRAM] unsigned int 
  8181 ;; Registers used:
  8182 ;;		wreg, status,2, status,0, cstack
  8183 ;; Tracked objects:
  8184 ;;		On entry : 0/0
  8185 ;;		On exit  : 0/0
  8186 ;;		Unchanged: 0/0
  8187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8188 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8189 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8190 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8191 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8192 ;;Total ram usage:        7 bytes
  8193 ;; Hardware stack levels used: 1
  8194 ;; Hardware stack levels required when called: 2
  8195 ;; This function calls:
  8196 ;;		_I2C_2_Master_Read
  8197 ;;		_I2C_2_Master_RepStart
  8198 ;;		_I2C_2_Master_Start
  8199 ;;		_I2C_2_Master_Stop
  8200 ;;		_I2C_2_Master_Write
  8201 ;; This function is called by:
  8202 ;;		_calibrateColor
  8203 ;;		_findcolor
  8204 ;; This function uses a non-reentrant model
  8205 ;;
  8206                           
  8207                           	psect	text22
  8208  01BC36                     __ptext22:
  8209                           	callstack 0
  8210  01BC36                     _color_read_Green:
  8211                           	callstack 27
  8212  01BC36                     
  8213                           ;color.c: 83:  unsigned int tmp;;color.c: 84:  I2C_2_Master_Start();
  8214  01BC36  ECB4  F0DC         	call	_I2C_2_Master_Start	;wreg free
  8215                           
  8216                           ;color.c: 85:  I2C_2_Master_Write(0x52 | 0x00);
  8217  01BC3A  0E52               	movlw	82
  8218  01BC3C  ECBE  F0DC         	call	_I2C_2_Master_Write
  8219                           
  8220                           ;color.c: 86:  I2C_2_Master_Write(0xA0 | 0x18);
  8221  01BC40  0EB8               	movlw	184
  8222  01BC42  ECBE  F0DC         	call	_I2C_2_Master_Write
  8223                           
  8224                           ;color.c: 87:  I2C_2_Master_RepStart();
  8225  01BC46  ECAF  F0DC         	call	_I2C_2_Master_RepStart	;wreg free
  8226                           
  8227                           ;color.c: 88:  I2C_2_Master_Write(0x52 | 0x01);
  8228  01BC4A  0E53               	movlw	83
  8229  01BC4C  ECBE  F0DC         	call	_I2C_2_Master_Write
  8230                           
  8231                           ;color.c: 89:  tmp=I2C_2_Master_Read(1);
  8232  01BC50  0E01               	movlw	1
  8233  01BC52  EC87  F0DD         	call	_I2C_2_Master_Read
  8234  01BC56  6E07               	movwf	??_color_read_Green^0,c
  8235  01BC58  5007               	movf	??_color_read_Green^0,w,c
  8236  01BC5A  6E0A               	movwf	color_read_Green@tmp^0,c
  8237  01BC5C  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  8238                           
  8239                           ;color.c: 90:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8240  01BC5E  0E00               	movlw	0
  8241  01BC60  EC87  F0DD         	call	_I2C_2_Master_Read
  8242  01BC64  6E07               	movwf	??_color_read_Green^0,c
  8243  01BC66  5007               	movf	??_color_read_Green^0,w,c
  8244  01BC68  6E09               	movwf	(??_color_read_Green+2)^0,c
  8245  01BC6A  6A08               	clrf	(??_color_read_Green+1)^0,c
  8246  01BC6C  500A               	movf	color_read_Green@tmp^0,w,c
  8247  01BC6E  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  8248  01BC70  6E0A               	movwf	color_read_Green@tmp^0,c
  8249  01BC72  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  8250  01BC74  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  8251  01BC76  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  8252                           
  8253                           ;color.c: 91:  I2C_2_Master_Stop();
  8254  01BC78  ECB9  F0DC         	call	_I2C_2_Master_Stop	;wreg free
  8255  01BC7C                     
  8256                           ;color.c: 92:  return tmp;
  8257  01BC7C  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  8258  01BC80  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  8259  01BC84  0012               	return		;funcret
  8260  01BC86                     __end_of_color_read_Green:
  8261                           	callstack 0
  8262                           
  8263 ;; *************** function _color_read_Clear *****************
  8264 ;; Defined at:
  8265 ;;		line 115 in file "color.c"
  8266 ;; Parameters:    Size  Location     Type
  8267 ;;		None
  8268 ;; Auto vars:     Size  Location     Type
  8269 ;;  tmp             2    9[COMRAM] unsigned int 
  8270 ;; Return value:  Size  Location     Type
  8271 ;;                  2    4[COMRAM] unsigned int 
  8272 ;; Registers used:
  8273 ;;		wreg, status,2, status,0, cstack
  8274 ;; Tracked objects:
  8275 ;;		On entry : 0/0
  8276 ;;		On exit  : 0/0
  8277 ;;		Unchanged: 0/0
  8278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8279 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8280 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8281 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8282 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8283 ;;Total ram usage:        7 bytes
  8284 ;; Hardware stack levels used: 1
  8285 ;; Hardware stack levels required when called: 2
  8286 ;; This function calls:
  8287 ;;		_I2C_2_Master_Read
  8288 ;;		_I2C_2_Master_RepStart
  8289 ;;		_I2C_2_Master_Start
  8290 ;;		_I2C_2_Master_Stop
  8291 ;;		_I2C_2_Master_Write
  8292 ;; This function is called by:
  8293 ;;		_calibrateColor
  8294 ;;		_scanColor
  8295 ;; This function uses a non-reentrant model
  8296 ;;
  8297                           
  8298                           	psect	text23
  8299  01BBE6                     __ptext23:
  8300                           	callstack 0
  8301  01BBE6                     _color_read_Clear:
  8302                           	callstack 27
  8303  01BBE6                     
  8304                           ;color.c: 117:  unsigned int tmp;;color.c: 118:  I2C_2_Master_Start();
  8305  01BBE6  ECB4  F0DC         	call	_I2C_2_Master_Start	;wreg free
  8306                           
  8307                           ;color.c: 119:  I2C_2_Master_Write(0x52 | 0x00);
  8308  01BBEA  0E52               	movlw	82
  8309  01BBEC  ECBE  F0DC         	call	_I2C_2_Master_Write
  8310                           
  8311                           ;color.c: 120:  I2C_2_Master_Write(0xA0 | 0x14);
  8312  01BBF0  0EB4               	movlw	180
  8313  01BBF2  ECBE  F0DC         	call	_I2C_2_Master_Write
  8314                           
  8315                           ;color.c: 121:  I2C_2_Master_RepStart();
  8316  01BBF6  ECAF  F0DC         	call	_I2C_2_Master_RepStart	;wreg free
  8317                           
  8318                           ;color.c: 122:  I2C_2_Master_Write(0x52 | 0x01);
  8319  01BBFA  0E53               	movlw	83
  8320  01BBFC  ECBE  F0DC         	call	_I2C_2_Master_Write
  8321                           
  8322                           ;color.c: 123:  tmp=I2C_2_Master_Read(1);
  8323  01BC00  0E01               	movlw	1
  8324  01BC02  EC87  F0DD         	call	_I2C_2_Master_Read
  8325  01BC06  6E07               	movwf	??_color_read_Clear^0,c
  8326  01BC08  5007               	movf	??_color_read_Clear^0,w,c
  8327  01BC0A  6E0A               	movwf	color_read_Clear@tmp^0,c
  8328  01BC0C  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  8329                           
  8330                           ;color.c: 124:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8331  01BC0E  0E00               	movlw	0
  8332  01BC10  EC87  F0DD         	call	_I2C_2_Master_Read
  8333  01BC14  6E07               	movwf	??_color_read_Clear^0,c
  8334  01BC16  5007               	movf	??_color_read_Clear^0,w,c
  8335  01BC18  6E09               	movwf	(??_color_read_Clear+2)^0,c
  8336  01BC1A  6A08               	clrf	(??_color_read_Clear+1)^0,c
  8337  01BC1C  500A               	movf	color_read_Clear@tmp^0,w,c
  8338  01BC1E  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  8339  01BC20  6E0A               	movwf	color_read_Clear@tmp^0,c
  8340  01BC22  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  8341  01BC24  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  8342  01BC26  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  8343                           
  8344                           ;color.c: 125:  I2C_2_Master_Stop();
  8345  01BC28  ECB9  F0DC         	call	_I2C_2_Master_Stop	;wreg free
  8346  01BC2C                     
  8347                           ;color.c: 126:  return tmp;
  8348  01BC2C  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  8349  01BC30  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  8350  01BC34  0012               	return		;funcret
  8351  01BC36                     __end_of_color_read_Clear:
  8352                           	callstack 0
  8353                           
  8354 ;; *************** function _color_read_Blue *****************
  8355 ;; Defined at:
  8356 ;;		line 98 in file "color.c"
  8357 ;; Parameters:    Size  Location     Type
  8358 ;;		None
  8359 ;; Auto vars:     Size  Location     Type
  8360 ;;  tmp             2    9[COMRAM] unsigned int 
  8361 ;; Return value:  Size  Location     Type
  8362 ;;                  2    4[COMRAM] unsigned int 
  8363 ;; Registers used:
  8364 ;;		wreg, status,2, status,0, cstack
  8365 ;; Tracked objects:
  8366 ;;		On entry : 0/0
  8367 ;;		On exit  : 0/0
  8368 ;;		Unchanged: 0/0
  8369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8370 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8371 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8372 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8373 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8374 ;;Total ram usage:        7 bytes
  8375 ;; Hardware stack levels used: 1
  8376 ;; Hardware stack levels required when called: 2
  8377 ;; This function calls:
  8378 ;;		_I2C_2_Master_Read
  8379 ;;		_I2C_2_Master_RepStart
  8380 ;;		_I2C_2_Master_Start
  8381 ;;		_I2C_2_Master_Stop
  8382 ;;		_I2C_2_Master_Write
  8383 ;; This function is called by:
  8384 ;;		_calibrateColor
  8385 ;;		_findcolor
  8386 ;; This function uses a non-reentrant model
  8387 ;;
  8388                           
  8389                           	psect	text24
  8390  01BB96                     __ptext24:
  8391                           	callstack 0
  8392  01BB96                     _color_read_Blue:
  8393                           	callstack 27
  8394  01BB96                     
  8395                           ;color.c: 100:  unsigned int tmp;;color.c: 101:  I2C_2_Master_Start();
  8396  01BB96  ECB4  F0DC         	call	_I2C_2_Master_Start	;wreg free
  8397                           
  8398                           ;color.c: 102:  I2C_2_Master_Write(0x52 | 0x00);
  8399  01BB9A  0E52               	movlw	82
  8400  01BB9C  ECBE  F0DC         	call	_I2C_2_Master_Write
  8401                           
  8402                           ;color.c: 103:  I2C_2_Master_Write(0xA0 | 0x1A);
  8403  01BBA0  0EBA               	movlw	186
  8404  01BBA2  ECBE  F0DC         	call	_I2C_2_Master_Write
  8405                           
  8406                           ;color.c: 104:  I2C_2_Master_RepStart();
  8407  01BBA6  ECAF  F0DC         	call	_I2C_2_Master_RepStart	;wreg free
  8408                           
  8409                           ;color.c: 105:  I2C_2_Master_Write(0x52 | 0x01);
  8410  01BBAA  0E53               	movlw	83
  8411  01BBAC  ECBE  F0DC         	call	_I2C_2_Master_Write
  8412                           
  8413                           ;color.c: 106:  tmp=I2C_2_Master_Read(1);
  8414  01BBB0  0E01               	movlw	1
  8415  01BBB2  EC87  F0DD         	call	_I2C_2_Master_Read
  8416  01BBB6  6E07               	movwf	??_color_read_Blue^0,c
  8417  01BBB8  5007               	movf	??_color_read_Blue^0,w,c
  8418  01BBBA  6E0A               	movwf	color_read_Blue@tmp^0,c
  8419  01BBBC  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  8420                           
  8421                           ;color.c: 107:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  8422  01BBBE  0E00               	movlw	0
  8423  01BBC0  EC87  F0DD         	call	_I2C_2_Master_Read
  8424  01BBC4  6E07               	movwf	??_color_read_Blue^0,c
  8425  01BBC6  5007               	movf	??_color_read_Blue^0,w,c
  8426  01BBC8  6E09               	movwf	(??_color_read_Blue+2)^0,c
  8427  01BBCA  6A08               	clrf	(??_color_read_Blue+1)^0,c
  8428  01BBCC  500A               	movf	color_read_Blue@tmp^0,w,c
  8429  01BBCE  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  8430  01BBD0  6E0A               	movwf	color_read_Blue@tmp^0,c
  8431  01BBD2  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  8432  01BBD4  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  8433  01BBD6  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  8434                           
  8435                           ;color.c: 108:  I2C_2_Master_Stop();
  8436  01BBD8  ECB9  F0DC         	call	_I2C_2_Master_Stop	;wreg free
  8437  01BBDC                     
  8438                           ;color.c: 109:  return tmp;
  8439  01BBDC  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  8440  01BBE0  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  8441  01BBE4  0012               	return		;funcret
  8442  01BBE6                     __end_of_color_read_Blue:
  8443                           	callstack 0
  8444                           
  8445 ;; *************** function _I2C_2_Master_Write *****************
  8446 ;; Defined at:
  8447 ;;		line 45 in file "i2c.c"
  8448 ;; Parameters:    Size  Location     Type
  8449 ;;  data_byte       1    wreg     unsigned char 
  8450 ;; Auto vars:     Size  Location     Type
  8451 ;;  data_byte       1    1[COMRAM] unsigned char 
  8452 ;; Return value:  Size  Location     Type
  8453 ;;                  1    wreg      void 
  8454 ;; Registers used:
  8455 ;;		wreg, status,2, status,0, cstack
  8456 ;; Tracked objects:
  8457 ;;		On entry : 0/0
  8458 ;;		On exit  : 0/0
  8459 ;;		Unchanged: 0/0
  8460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8462 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8464 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8465 ;;Total ram usage:        1 bytes
  8466 ;; Hardware stack levels used: 1
  8467 ;; Hardware stack levels required when called: 1
  8468 ;; This function calls:
  8469 ;;		_I2C_2_Master_Idle
  8470 ;; This function is called by:
  8471 ;;		_color_writetoaddr
  8472 ;;		_color_read_Red
  8473 ;;		_color_read_Green
  8474 ;;		_color_read_Blue
  8475 ;;		_color_read_Clear
  8476 ;; This function uses a non-reentrant model
  8477 ;;
  8478                           
  8479                           	psect	text25
  8480  01B97C                     __ptext25:
  8481                           	callstack 0
  8482  01B97C                     _I2C_2_Master_Write:
  8483                           	callstack 27
  8484                           
  8485                           ;incstack = 0
  8486                           ;I2C_2_Master_Write@data_byte stored from wreg
  8487  01B97C  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  8488  01B97E                     
  8489                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  8490  01B97E  EC0F  F0DD         	call	_I2C_2_Master_Idle	;wreg free
  8491  01B982                     
  8492                           ;i2c.c: 48:   SSP2BUF = data_byte;
  8493  01B982  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  8494  01B986  0012               	return		;funcret
  8495  01B988                     __end_of_I2C_2_Master_Write:
  8496                           	callstack 0
  8497                           
  8498 ;; *************** function _I2C_2_Master_Stop *****************
  8499 ;; Defined at:
  8500 ;;		line 39 in file "i2c.c"
  8501 ;; Parameters:    Size  Location     Type
  8502 ;;		None
  8503 ;; Auto vars:     Size  Location     Type
  8504 ;;		None
  8505 ;; Return value:  Size  Location     Type
  8506 ;;                  1    wreg      void 
  8507 ;; Registers used:
  8508 ;;		wreg, status,2, status,0, cstack
  8509 ;; Tracked objects:
  8510 ;;		On entry : 0/0
  8511 ;;		On exit  : 0/0
  8512 ;;		Unchanged: 0/0
  8513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8517 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8518 ;;Total ram usage:        0 bytes
  8519 ;; Hardware stack levels used: 1
  8520 ;; Hardware stack levels required when called: 1
  8521 ;; This function calls:
  8522 ;;		_I2C_2_Master_Idle
  8523 ;; This function is called by:
  8524 ;;		_color_writetoaddr
  8525 ;;		_color_read_Red
  8526 ;;		_color_read_Green
  8527 ;;		_color_read_Blue
  8528 ;;		_color_read_Clear
  8529 ;; This function uses a non-reentrant model
  8530 ;;
  8531                           
  8532                           	psect	text26
  8533  01B972                     __ptext26:
  8534                           	callstack 0
  8535  01B972                     _I2C_2_Master_Stop:
  8536                           	callstack 27
  8537  01B972                     
  8538                           ;i2c.c: 41:   I2C_2_Master_Idle();
  8539  01B972  EC0F  F0DD         	call	_I2C_2_Master_Idle	;wreg free
  8540  01B976                     
  8541                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  8542  01B976  010E               	movlb	14	; () banked
  8543  01B978  85DA               	bsf	218,2,b	;volatile
  8544  01B97A                     
  8545                           ; BSR set to: 14
  8546  01B97A  0012               	return		;funcret
  8547  01B97C                     __end_of_I2C_2_Master_Stop:
  8548                           	callstack 0
  8549                           
  8550 ;; *************** function _I2C_2_Master_Start *****************
  8551 ;; Defined at:
  8552 ;;		line 27 in file "i2c.c"
  8553 ;; Parameters:    Size  Location     Type
  8554 ;;		None
  8555 ;; Auto vars:     Size  Location     Type
  8556 ;;		None
  8557 ;; Return value:  Size  Location     Type
  8558 ;;                  1    wreg      void 
  8559 ;; Registers used:
  8560 ;;		wreg, status,2, status,0, cstack
  8561 ;; Tracked objects:
  8562 ;;		On entry : 0/0
  8563 ;;		On exit  : 0/0
  8564 ;;		Unchanged: 0/0
  8565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8569 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8570 ;;Total ram usage:        0 bytes
  8571 ;; Hardware stack levels used: 1
  8572 ;; Hardware stack levels required when called: 1
  8573 ;; This function calls:
  8574 ;;		_I2C_2_Master_Idle
  8575 ;; This function is called by:
  8576 ;;		_color_writetoaddr
  8577 ;;		_color_read_Red
  8578 ;;		_color_read_Green
  8579 ;;		_color_read_Blue
  8580 ;;		_color_read_Clear
  8581 ;; This function uses a non-reentrant model
  8582 ;;
  8583                           
  8584                           	psect	text27
  8585  01B968                     __ptext27:
  8586                           	callstack 0
  8587  01B968                     _I2C_2_Master_Start:
  8588                           	callstack 27
  8589  01B968                     
  8590                           ;i2c.c: 29:   I2C_2_Master_Idle();
  8591  01B968  EC0F  F0DD         	call	_I2C_2_Master_Idle	;wreg free
  8592  01B96C                     
  8593                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  8594  01B96C  010E               	movlb	14	; () banked
  8595  01B96E  81DA               	bsf	218,0,b	;volatile
  8596  01B970                     
  8597                           ; BSR set to: 14
  8598  01B970  0012               	return		;funcret
  8599  01B972                     __end_of_I2C_2_Master_Start:
  8600                           	callstack 0
  8601                           
  8602 ;; *************** function _I2C_2_Master_RepStart *****************
  8603 ;; Defined at:
  8604 ;;		line 33 in file "i2c.c"
  8605 ;; Parameters:    Size  Location     Type
  8606 ;;		None
  8607 ;; Auto vars:     Size  Location     Type
  8608 ;;		None
  8609 ;; Return value:  Size  Location     Type
  8610 ;;                  1    wreg      void 
  8611 ;; Registers used:
  8612 ;;		wreg, status,2, status,0, cstack
  8613 ;; Tracked objects:
  8614 ;;		On entry : 0/0
  8615 ;;		On exit  : 0/0
  8616 ;;		Unchanged: 0/0
  8617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8622 ;;Total ram usage:        0 bytes
  8623 ;; Hardware stack levels used: 1
  8624 ;; Hardware stack levels required when called: 1
  8625 ;; This function calls:
  8626 ;;		_I2C_2_Master_Idle
  8627 ;; This function is called by:
  8628 ;;		_color_read_Red
  8629 ;;		_color_read_Green
  8630 ;;		_color_read_Blue
  8631 ;;		_color_read_Clear
  8632 ;; This function uses a non-reentrant model
  8633 ;;
  8634                           
  8635                           	psect	text28
  8636  01B95E                     __ptext28:
  8637                           	callstack 0
  8638  01B95E                     _I2C_2_Master_RepStart:
  8639                           	callstack 27
  8640  01B95E                     
  8641                           ;i2c.c: 35:   I2C_2_Master_Idle();
  8642  01B95E  EC0F  F0DD         	call	_I2C_2_Master_Idle	;wreg free
  8643  01B962                     
  8644                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  8645  01B962  010E               	movlb	14	; () banked
  8646  01B964  83DA               	bsf	218,1,b	;volatile
  8647  01B966                     
  8648                           ; BSR set to: 14
  8649  01B966  0012               	return		;funcret
  8650  01B968                     __end_of_I2C_2_Master_RepStart:
  8651                           	callstack 0
  8652                           
  8653 ;; *************** function _I2C_2_Master_Read *****************
  8654 ;; Defined at:
  8655 ;;		line 51 in file "i2c.c"
  8656 ;; Parameters:    Size  Location     Type
  8657 ;;  ack             1    wreg     unsigned char 
  8658 ;; Auto vars:     Size  Location     Type
  8659 ;;  ack             1    2[COMRAM] unsigned char 
  8660 ;;  tmp             1    3[COMRAM] unsigned char 
  8661 ;; Return value:  Size  Location     Type
  8662 ;;                  1    wreg      unsigned char 
  8663 ;; Registers used:
  8664 ;;		wreg, status,2, status,0, cstack
  8665 ;; Tracked objects:
  8666 ;;		On entry : 0/0
  8667 ;;		On exit  : 0/0
  8668 ;;		Unchanged: 0/0
  8669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8671 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8672 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8673 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8674 ;;Total ram usage:        3 bytes
  8675 ;; Hardware stack levels used: 1
  8676 ;; Hardware stack levels required when called: 1
  8677 ;; This function calls:
  8678 ;;		_I2C_2_Master_Idle
  8679 ;; This function is called by:
  8680 ;;		_color_read_Red
  8681 ;;		_color_read_Green
  8682 ;;		_color_read_Blue
  8683 ;;		_color_read_Clear
  8684 ;; This function uses a non-reentrant model
  8685 ;;
  8686                           
  8687                           	psect	text29
  8688  01BB0E                     __ptext29:
  8689                           	callstack 0
  8690  01BB0E                     _I2C_2_Master_Read:
  8691                           	callstack 27
  8692                           
  8693                           ; BSR set to: 14
  8694                           ;incstack = 0
  8695                           ;I2C_2_Master_Read@ack stored from wreg
  8696  01BB0E  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  8697  01BB10                     
  8698                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  8699  01BB10  EC0F  F0DD         	call	_I2C_2_Master_Idle	;wreg free
  8700  01BB14                     
  8701                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  8702  01BB14  010E               	movlb	14	; () banked
  8703  01BB16  87DA               	bsf	218,3,b	;volatile
  8704                           
  8705                           ;i2c.c: 56:   I2C_2_Master_Idle();
  8706  01BB18  EC0F  F0DD         	call	_I2C_2_Master_Idle	;wreg free
  8707  01BB1C                     
  8708                           ;i2c.c: 57:   tmp = SSP2BUF;
  8709  01BB1C  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  8710                           
  8711                           ;i2c.c: 58:   I2C_2_Master_Idle();
  8712  01BB20  EC0F  F0DD         	call	_I2C_2_Master_Idle	;wreg free
  8713  01BB24                     
  8714                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  8715  01BB24  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  8716  01BB26  B4D8               	btfsc	status,2,c
  8717  01BB28  EF98  F0DD         	goto	u2631
  8718  01BB2C  EF9C  F0DD         	goto	u2630
  8719  01BB30                     u2631:
  8720  01BB30  6A02               	clrf	??_I2C_2_Master_Read^0,c
  8721  01BB32  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  8722  01BB34  EF9D  F0DD         	goto	u2648
  8723  01BB38                     u2630:
  8724  01BB38  6A02               	clrf	??_I2C_2_Master_Read^0,c
  8725  01BB3A                     u2648:
  8726  01BB3A  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  8727  01BB3C  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  8728  01BB3E  010E               	movlb	14	; () banked
  8729  01BB40  51DA               	movf	218,w,b	;volatile
  8730  01BB42  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  8731  01BB44  0BDF               	andlw	-33
  8732  01BB46  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  8733  01BB48  6FDA               	movwf	218,b	;volatile
  8734  01BB4A                     
  8735                           ; BSR set to: 14
  8736                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  8737  01BB4A  89DA               	bsf	218,4,b	;volatile
  8738  01BB4C                     
  8739                           ; BSR set to: 14
  8740                           ;i2c.c: 61:   return tmp;
  8741  01BB4C  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  8742  01BB4E                     
  8743                           ; BSR set to: 14
  8744  01BB4E  0012               	return		;funcret
  8745  01BB50                     __end_of_I2C_2_Master_Read:
  8746                           	callstack 0
  8747                           
  8748 ;; *************** function _I2C_2_Master_Idle *****************
  8749 ;; Defined at:
  8750 ;;		line 22 in file "i2c.c"
  8751 ;; Parameters:    Size  Location     Type
  8752 ;;		None
  8753 ;; Auto vars:     Size  Location     Type
  8754 ;;		None
  8755 ;; Return value:  Size  Location     Type
  8756 ;;                  1    wreg      void 
  8757 ;; Registers used:
  8758 ;;		wreg, status,2, status,0
  8759 ;; Tracked objects:
  8760 ;;		On entry : 0/0
  8761 ;;		On exit  : 0/0
  8762 ;;		Unchanged: 0/0
  8763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8766 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8767 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8768 ;;Total ram usage:        1 bytes
  8769 ;; Hardware stack levels used: 1
  8770 ;; This function calls:
  8771 ;;		Nothing
  8772 ;; This function is called by:
  8773 ;;		_I2C_2_Master_Start
  8774 ;;		_I2C_2_Master_RepStart
  8775 ;;		_I2C_2_Master_Stop
  8776 ;;		_I2C_2_Master_Write
  8777 ;;		_I2C_2_Master_Read
  8778 ;; This function uses a non-reentrant model
  8779 ;;
  8780                           
  8781                           	psect	text30
  8782  01BA1E                     __ptext30:
  8783                           	callstack 0
  8784  01BA1E                     _I2C_2_Master_Idle:
  8785                           	callstack 27
  8786  01BA1E                     l304:
  8787  01BA1E  010E               	movlb	14	; () banked
  8788  01BA20  B5D8               	btfsc	216,2,b	;volatile
  8789  01BA22  EF15  F0DD         	goto	u2141
  8790  01BA26  EF17  F0DD         	goto	u2140
  8791  01BA2A                     u2141:
  8792  01BA2A  EF0F  F0DD         	goto	l304
  8793  01BA2E                     u2140:
  8794  01BA2E                     
  8795                           ; BSR set to: 14
  8796  01BA2E  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  8797  01BA32  0E1F               	movlw	31
  8798  01BA34  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  8799  01BA36  A4D8               	btfss	status,2,c
  8800  01BA38  EF20  F0DD         	goto	u2151
  8801  01BA3C  EF22  F0DD         	goto	u2150
  8802  01BA40                     u2151:
  8803  01BA40  EF0F  F0DD         	goto	l304
  8804  01BA44                     u2150:
  8805  01BA44                     
  8806                           ; BSR set to: 14
  8807  01BA44  0012               	return		;funcret
  8808  01BA46                     __end_of_I2C_2_Master_Idle:
  8809                           	callstack 0
  8810                           
  8811 ;; *************** function _backToStart *****************
  8812 ;; Defined at:
  8813 ;;		line 35 in file "scan.c"
  8814 ;; Parameters:    Size  Location     Type
  8815 ;;  lenRead         2   49[COMRAM] PTR unsigned char 
  8816 ;;		 -> main@lenRead(1), 
  8817 ;;  actArr          2   51[COMRAM] PTR unsigned int 
  8818 ;;		 -> main@actArr(50), 
  8819 ;;  fwdTime         2   53[COMRAM] PTR unsigned int 
  8820 ;;		 -> main@fwdTime(2), 
  8821 ;;  fwdArr          2   55[COMRAM] PTR unsigned int 
  8822 ;;		 -> main@fwdArr(50), 
  8823 ;;  reverse         1   57[COMRAM] unsigned char 
  8824 ;;  mL              2   58[COMRAM] PTR struct motor
  8825 ;;		 -> main@motorL(9), 
  8826 ;;  mR              2   60[COMRAM] PTR struct motor
  8827 ;;		 -> main@motorR(9), 
  8828 ;; Auto vars:     Size  Location     Type
  8829 ;;  k               1   69[COMRAM] unsigned char 
  8830 ;;  val             1   68[COMRAM] unsigned char 
  8831 ;; Return value:  Size  Location     Type
  8832 ;;                  1    wreg      void 
  8833 ;; Registers used:
  8834 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8835 ;; Tracked objects:
  8836 ;;		On entry : 0/0
  8837 ;;		On exit  : 0/0
  8838 ;;		Unchanged: 0/0
  8839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8840 ;;      Params:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8841 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8842 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8843 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8844 ;;Total ram usage:       21 bytes
  8845 ;; Hardware stack levels used: 1
  8846 ;; Hardware stack levels required when called: 6
  8847 ;; This function calls:
  8848 ;;		_colorCase
  8849 ;;		_forward
  8850 ;; This function is called by:
  8851 ;;		_main
  8852 ;; This function uses a non-reentrant model
  8853 ;;
  8854                           
  8855                           	psect	text31
  8856  01C8CC                     __ptext31:
  8857                           	callstack 0
  8858  01C8CC                     _backToStart:
  8859                           	callstack 24
  8860  01C8CC                     
  8861                           ;scan.c: 36:         unsigned char val;;scan.c: 37:        *fwdTime = 0;
  8862  01C8CC  C036  FFD9         	movff	backToStart@fwdTime,fsr2l
  8863  01C8D0  C037  FFDA         	movff	backToStart@fwdTime+1,fsr2h
  8864  01C8D4  0E00               	movlw	0
  8865  01C8D6  6EDE               	movwf	postinc2,c
  8866  01C8D8  0E00               	movlw	0
  8867  01C8DA  6EDD               	movwf	postdec2,c
  8868  01C8DC                     
  8869                           ;scan.c: 39:         for (char k=(*lenRead-1);k>=0;k--){
  8870  01C8DC  C032  FFD9         	movff	backToStart@lenRead,fsr2l
  8871  01C8E0  C033  FFDA         	movff	backToStart@lenRead+1,fsr2h
  8872  01C8E4  50DF               	movf	indf2,w,c
  8873  01C8E6  6E3F               	movwf	??_backToStart^0,c
  8874  01C8E8  043F               	decf	??_backToStart^0,w,c
  8875  01C8EA  6E46               	movwf	backToStart@k^0,c
  8876  01C8EC                     l4516:
  8877                           
  8878                           ;scan.c: 40:                 val = *(actArr+k-1);
  8879  01C8EC  5046               	movf	backToStart@k^0,w,c
  8880  01C8EE  6E3F               	movwf	??_backToStart^0,c
  8881  01C8F0  6A40               	clrf	(??_backToStart+1)^0,c
  8882  01C8F2  90D8               	bcf	status,0,c
  8883  01C8F4  363F               	rlcf	??_backToStart^0,f,c
  8884  01C8F6  3640               	rlcf	(??_backToStart+1)^0,f,c
  8885  01C8F8  C034  F041         	movff	backToStart@actArr,??_backToStart+2
  8886  01C8FC  C035  F042         	movff	backToStart@actArr+1,??_backToStart+3
  8887  01C900  503F               	movf	??_backToStart^0,w,c
  8888  01C902  2641               	addwf	(??_backToStart+2)^0,f,c
  8889  01C904  5040               	movf	(??_backToStart+1)^0,w,c
  8890  01C906  2242               	addwfc	(??_backToStart+3)^0,f,c
  8891  01C908  0EFE               	movlw	254
  8892  01C90A  2441               	addwf	(??_backToStart+2)^0,w,c
  8893  01C90C  6ED9               	movwf	fsr2l,c
  8894  01C90E  0EFF               	movlw	255
  8895  01C910  2042               	addwfc	(??_backToStart+3)^0,w,c
  8896  01C912  6EDA               	movwf	fsr2h,c
  8897  01C914  50DF               	movf	indf2,w,c
  8898  01C916  6E45               	movwf	backToStart@val^0,c
  8899                           
  8900                           ;scan.c: 41:             while(*fwdTime < *(fwdArr+k)){
  8901  01C918  EFAC  F0E4         	goto	l4522
  8902  01C91C                     l4518:
  8903                           
  8904                           ;scan.c: 42:                 forward(mL,mR);
  8905  01C91C  C03B  F01D         	movff	backToStart@mL,forward@mL
  8906  01C920  C03C  F01E         	movff	backToStart@mL+1,forward@mL+1
  8907  01C924  C03D  F01F         	movff	backToStart@mR,forward@mR
  8908  01C928  C03E  F020         	movff	backToStart@mR+1,forward@mR+1
  8909  01C92C  EC05  F0E0         	call	_forward	;wreg free
  8910  01C930                     
  8911                           ;scan.c: 43:                 *fwdTime = *fwdTime + 1;
  8912  01C930  C036  FFD9         	movff	backToStart@fwdTime,fsr2l
  8913  01C934  C037  FFDA         	movff	backToStart@fwdTime+1,fsr2h
  8914  01C938  CFDE F03F          	movff	postinc2,??_backToStart
  8915  01C93C  CFDD F040          	movff	postdec2,??_backToStart+1
  8916  01C940  0E01               	movlw	1
  8917  01C942  263F               	addwf	??_backToStart^0,f,c
  8918  01C944  0E00               	movlw	0
  8919  01C946  2240               	addwfc	(??_backToStart+1)^0,f,c
  8920  01C948  C036  FFD9         	movff	backToStart@fwdTime,fsr2l
  8921  01C94C  C037  FFDA         	movff	backToStart@fwdTime+1,fsr2h
  8922  01C950  C03F  FFDE         	movff	??_backToStart,postinc2
  8923  01C954  C040  FFDD         	movff	??_backToStart+1,postdec2
  8924  01C958                     l4522:
  8925                           
  8926                           ;scan.c: 41:             while(*fwdTime < *(fwdArr+k)){
  8927  01C958  5046               	movf	backToStart@k^0,w,c
  8928  01C95A  6E3F               	movwf	??_backToStart^0,c
  8929  01C95C  6A40               	clrf	(??_backToStart+1)^0,c
  8930  01C95E  90D8               	bcf	status,0,c
  8931  01C960  363F               	rlcf	??_backToStart^0,f,c
  8932  01C962  3640               	rlcf	(??_backToStart+1)^0,f,c
  8933  01C964  503F               	movf	??_backToStart^0,w,c
  8934  01C966  2438               	addwf	backToStart@fwdArr^0,w,c
  8935  01C968  6ED9               	movwf	fsr2l,c
  8936  01C96A  5040               	movf	(??_backToStart+1)^0,w,c
  8937  01C96C  2039               	addwfc	(backToStart@fwdArr+1)^0,w,c
  8938  01C96E  6EDA               	movwf	fsr2h,c
  8939  01C970  C036  FFE1         	movff	backToStart@fwdTime,fsr1l
  8940  01C974  C037  FFE2         	movff	backToStart@fwdTime+1,fsr1h
  8941  01C978  50DE               	movf	postinc2,w,c
  8942  01C97A  5CE6               	subwf	postinc1,w,c
  8943  01C97C  50DE               	movf	postinc2,w,c
  8944  01C97E  58E6               	subwfb	postinc1,w,c
  8945  01C980  A0D8               	btfss	status,0,c
  8946  01C982  EFC5  F0E4         	goto	u3931
  8947  01C986  EFC7  F0E4         	goto	u3930
  8948  01C98A                     u3931:
  8949  01C98A  EF8E  F0E4         	goto	l4518
  8950  01C98E                     u3930:
  8951  01C98E                     
  8952                           ;scan.c: 45:             colorCase(val,reverse,mL,mR);
  8953  01C98E  C03A  F02A         	movff	backToStart@reverse,colorCase@reverse
  8954  01C992  C03B  F02B         	movff	backToStart@mL,colorCase@mL
  8955  01C996  C03C  F02C         	movff	backToStart@mL+1,colorCase@mL+1
  8956  01C99A  C03D  F02D         	movff	backToStart@mR,colorCase@mR
  8957  01C99E  C03E  F02E         	movff	backToStart@mR+1,colorCase@mR+1
  8958  01C9A2  5045               	movf	backToStart@val^0,w,c
  8959  01C9A4  ECA3  F0E7         	call	_colorCase
  8960  01C9A8                     
  8961                           ;scan.c: 46:             *fwdTime = 0;
  8962  01C9A8  C036  FFD9         	movff	backToStart@fwdTime,fsr2l
  8963  01C9AC  C037  FFDA         	movff	backToStart@fwdTime+1,fsr2h
  8964  01C9B0  0E00               	movlw	0
  8965  01C9B2  6EDE               	movwf	postinc2,c
  8966  01C9B4  0E00               	movlw	0
  8967  01C9B6  6EDD               	movwf	postdec2,c
  8968  01C9B8                     
  8969                           ;scan.c: 47:         }
  8970  01C9B8  0646               	decf	backToStart@k^0,f,c
  8971  01C9BA  EF76  F0E4         	goto	l4516
  8972  01C9BE  0012               	return		;funcret
  8973  01C9C0                     __end_of_backToStart:
  8974                           	callstack 0
  8975                           
  8976 ;; *************** function _forward *****************
  8977 ;; Defined at:
  8978 ;;		line 149 in file "motor.c"
  8979 ;; Parameters:    Size  Location     Type
  8980 ;;  mL              2   28[COMRAM] PTR struct motor
  8981 ;;		 -> main@motorL(9), 
  8982 ;;  mR              2   30[COMRAM] PTR struct motor
  8983 ;;		 -> main@motorR(9), 
  8984 ;; Auto vars:     Size  Location     Type
  8985 ;;		None
  8986 ;; Return value:  Size  Location     Type
  8987 ;;                  1    wreg      void 
  8988 ;; Registers used:
  8989 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8990 ;; Tracked objects:
  8991 ;;		On entry : 0/0
  8992 ;;		On exit  : 0/0
  8993 ;;		Unchanged: 0/0
  8994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8995 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8997 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8998 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8999 ;;Total ram usage:        5 bytes
  9000 ;; Hardware stack levels used: 1
  9001 ;; Hardware stack levels required when called: 3
  9002 ;; This function calls:
  9003 ;;		_setMotorPWM
  9004 ;;		_stop
  9005 ;; This function is called by:
  9006 ;;		_scanColor
  9007 ;;		_backToStart
  9008 ;; This function uses a non-reentrant model
  9009 ;;
  9010                           
  9011                           	psect	text32
  9012  01C00A                     __ptext32:
  9013                           	callstack 0
  9014  01C00A                     _forward:
  9015                           	callstack 26
  9016  01C00A                     
  9017                           ;motor.c: 149: void forward(struct motor *mL, struct motor *mR);motor.c: 150: { mL->powe
      +                          r = 23;
  9018  01C00A  C01D  FFD9         	movff	forward@mL,fsr2l
  9019  01C00E  C01E  FFDA         	movff	forward@mL+1,fsr2h
  9020  01C012  0E17               	movlw	23
  9021  01C014  6EDF               	movwf	indf2,c
  9022                           
  9023                           ;motor.c: 151:     mR->power = 23;
  9024  01C016  C01F  FFD9         	movff	forward@mR,fsr2l
  9025  01C01A  C020  FFDA         	movff	forward@mR+1,fsr2h
  9026  01C01E  0E17               	movlw	23
  9027  01C020  6EDF               	movwf	indf2,c
  9028  01C022                     
  9029                           ;motor.c: 152:     mL->direction = 1;
  9030  01C022  EE20 F001          	lfsr	2,1
  9031  01C026  501D               	movf	forward@mL^0,w,c
  9032  01C028  26D9               	addwf	fsr2l,f,c
  9033  01C02A  501E               	movf	(forward@mL+1)^0,w,c
  9034  01C02C  22DA               	addwfc	fsr2h,f,c
  9035  01C02E  0E01               	movlw	1
  9036  01C030  6EDF               	movwf	indf2,c
  9037  01C032                     
  9038                           ;motor.c: 153:     mR->direction = 1;
  9039  01C032  EE20 F001          	lfsr	2,1
  9040  01C036  501F               	movf	forward@mR^0,w,c
  9041  01C038  26D9               	addwf	fsr2l,f,c
  9042  01C03A  5020               	movf	(forward@mR+1)^0,w,c
  9043  01C03C  22DA               	addwfc	fsr2h,f,c
  9044  01C03E  0E01               	movlw	1
  9045  01C040  6EDF               	movwf	indf2,c
  9046                           
  9047                           ;motor.c: 156:     while (mL->power<24 && mR->power<24){
  9048  01C042  EF40  F0E0         	goto	l410
  9049  01C046                     l4100:
  9050                           
  9051                           ;motor.c: 158:         mR->power = mR-> power ++;
  9052  01C046  C01D  FFD9         	movff	forward@mL,fsr2l
  9053  01C04A  C01E  FFDA         	movff	forward@mL+1,fsr2h
  9054  01C04E  2ADF               	incf	indf2,f,c
  9055  01C050  C01F  FFD9         	movff	forward@mR,fsr2l
  9056  01C054  C020  FFDA         	movff	forward@mR+1,fsr2h
  9057  01C058  2ADF               	incf	indf2,f,c
  9058  01C05A                     
  9059                           ;motor.c: 159:         setMotorPWM(mL);
  9060  01C05A  C01D  F00E         	movff	forward@mL,setMotorPWM@m
  9061  01C05E  C01E  F00F         	movff	forward@mL+1,setMotorPWM@m+1
  9062  01C062  ECBE  F0EA         	call	_setMotorPWM	;wreg free
  9063  01C066                     
  9064                           ;motor.c: 160:         setMotorPWM(mR);
  9065  01C066  C01F  F00E         	movff	forward@mR,setMotorPWM@m
  9066  01C06A  C020  F00F         	movff	forward@mR+1,setMotorPWM@m+1
  9067  01C06E  ECBE  F0EA         	call	_setMotorPWM	;wreg free
  9068  01C072                     
  9069                           ;motor.c: 161:         _delay((unsigned long)((10)*(64000000/4000.0)));
  9070  01C072  0ED0               	movlw	208
  9071  01C074  6E21               	movwf	??_forward^0,c
  9072  01C076  0ECA               	movlw	202
  9073  01C078                     u4207:
  9074  01C078  2EE8               	decfsz	wreg,f,c
  9075  01C07A  D7FE               	bra	u4207
  9076  01C07C  2E21               	decfsz	??_forward^0,f,c
  9077  01C07E  D7FC               	bra	u4207
  9078  01C080                     l410:
  9079                           
  9080                           ;motor.c: 156:     while (mL->power<24 && mR->power<24){
  9081  01C080  C01D  FFD9         	movff	forward@mL,fsr2l
  9082  01C084  C01E  FFDA         	movff	forward@mL+1,fsr2h
  9083  01C088  0E18               	movlw	24
  9084  01C08A  60DF               	cpfslt	indf2,c
  9085  01C08C  EF4A  F0E0         	goto	u3481
  9086  01C090  EF4C  F0E0         	goto	u3480
  9087  01C094                     u3481:
  9088  01C094  EF58  F0E0         	goto	l4110
  9089  01C098                     u3480:
  9090  01C098  C01F  FFD9         	movff	forward@mR,fsr2l
  9091  01C09C  C020  FFDA         	movff	forward@mR+1,fsr2h
  9092  01C0A0  0E17               	movlw	23
  9093  01C0A2  64DF               	cpfsgt	indf2,c
  9094  01C0A4  EF56  F0E0         	goto	u3491
  9095  01C0A8  EF58  F0E0         	goto	u3490
  9096  01C0AC                     u3491:
  9097  01C0AC  EF23  F0E0         	goto	l4100
  9098  01C0B0                     u3490:
  9099  01C0B0                     l4110:
  9100                           
  9101                           ;motor.c: 163:     stop(mL,mR);
  9102  01C0B0  C01D  F019         	movff	forward@mL,stop@mL
  9103  01C0B4  C01E  F01A         	movff	forward@mL+1,stop@mL+1
  9104  01C0B8  C01F  F01B         	movff	forward@mR,stop@mR
  9105  01C0BC  C020  F01C         	movff	forward@mR+1,stop@mR+1
  9106  01C0C0  EC8C  F0E2         	call	_stop	;wreg free
  9107  01C0C4  0012               	return		;funcret
  9108  01C0C6                     __end_of_forward:
  9109                           	callstack 0
  9110                           
  9111 ;; *************** function _colorCase *****************
  9112 ;; Defined at:
  9113 ;;		line 9 in file "case.c"
  9114 ;; Parameters:    Size  Location     Type
  9115 ;;  val             1    wreg     unsigned char 
  9116 ;;  reverse         1   41[COMRAM] unsigned char 
  9117 ;;  mL              2   42[COMRAM] PTR struct motor
  9118 ;;		 -> main@motorL(9), 
  9119 ;;  mR              2   44[COMRAM] PTR struct motor
  9120 ;;		 -> main@motorR(9), 
  9121 ;; Auto vars:     Size  Location     Type
  9122 ;;  val             1   48[COMRAM] unsigned char 
  9123 ;; Return value:  Size  Location     Type
  9124 ;;                  1    wreg      void 
  9125 ;; Registers used:
  9126 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9127 ;; Tracked objects:
  9128 ;;		On entry : 0/0
  9129 ;;		On exit  : 0/0
  9130 ;;		Unchanged: 0/0
  9131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9132 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9133 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9134 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9135 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9136 ;;Total ram usage:        8 bytes
  9137 ;; Hardware stack levels used: 1
  9138 ;; Hardware stack levels required when called: 5
  9139 ;; This function calls:
  9140 ;;		_blackAction
  9141 ;;		_blueAction
  9142 ;;		_greenAction
  9143 ;;		_lightBlueAction
  9144 ;;		_nullAction
  9145 ;;		_orangeAction
  9146 ;;		_pinkAction
  9147 ;;		_redAction
  9148 ;;		_whiteAction
  9149 ;;		_yellowAction
  9150 ;; This function is called by:
  9151 ;;		_main
  9152 ;;		_backToStart
  9153 ;; This function uses a non-reentrant model
  9154 ;;
  9155                           
  9156                           	psect	text33
  9157  01CF46                     __ptext33:
  9158                           	callstack 0
  9159  01CF46                     _colorCase:
  9160                           	callstack 25
  9161                           
  9162                           ;incstack = 0
  9163                           ;colorCase@val stored from wreg
  9164  01CF46  6E31               	movwf	colorCase@val^0,c
  9165  01CF48                     
  9166                           ;case.c: 10:         switch(val){
  9167  01CF48  EF27  F0E8         	goto	l3934
  9168  01CF4C                     l3912:
  9169                           
  9170                           ;case.c: 12:                 nullAction(mL,mR);
  9171  01CF4C  C02B  F01D         	movff	colorCase@mL,nullAction@mL
  9172  01CF50  C02C  F01E         	movff	colorCase@mL+1,nullAction@mL+1
  9173  01CF54  C02D  F01F         	movff	colorCase@mR,nullAction@mR
  9174  01CF58  C02E  F020         	movff	colorCase@mR+1,nullAction@mR+1
  9175  01CF5C  ECC4  F0DC         	call	_nullAction	;wreg free
  9176                           
  9177                           ;case.c: 13:                 break;
  9178  01CF60  EF5C  F0E8         	goto	l551
  9179  01CF64                     l3914:
  9180                           
  9181                           ;case.c: 15:                 redAction(reverse,mL,mR);
  9182  01CF64  C02B  F023         	movff	colorCase@mL,redAction@mL
  9183  01CF68  C02C  F024         	movff	colorCase@mL+1,redAction@mL+1
  9184  01CF6C  C02D  F025         	movff	colorCase@mR,redAction@mR
  9185  01CF70  C02E  F026         	movff	colorCase@mR+1,redAction@mR+1
  9186  01CF74  502A               	movf	colorCase@reverse^0,w,c
  9187  01CF76  ECEE  F0E3         	call	_redAction
  9188                           
  9189                           ;case.c: 16:                 break;
  9190  01CF7A  EF5C  F0E8         	goto	l551
  9191  01CF7E                     l3916:
  9192                           
  9193                           ;case.c: 18:                 greenAction(reverse,mL,mR);
  9194  01CF7E  C02B  F023         	movff	colorCase@mL,greenAction@mL
  9195  01CF82  C02C  F024         	movff	colorCase@mL+1,greenAction@mL+1
  9196  01CF86  C02D  F025         	movff	colorCase@mR,greenAction@mR
  9197  01CF8A  C02E  F026         	movff	colorCase@mR+1,greenAction@mR+1
  9198  01CF8E  502A               	movf	colorCase@reverse^0,w,c
  9199  01CF90  EC76  F0E3         	call	_greenAction
  9200                           
  9201                           ;case.c: 19:                 break;
  9202  01CF94  EF5C  F0E8         	goto	l551
  9203  01CF98                     l3918:
  9204                           
  9205                           ;case.c: 21:                 blueAction(reverse,mL,mR);
  9206  01CF98  C02B  F023         	movff	colorCase@mL,blueAction@mL
  9207  01CF9C  C02C  F024         	movff	colorCase@mL+1,blueAction@mL+1
  9208  01CFA0  C02D  F025         	movff	colorCase@mR,blueAction@mR
  9209  01CFA4  C02E  F026         	movff	colorCase@mR+1,blueAction@mR+1
  9210  01CFA8  502A               	movf	colorCase@reverse^0,w,c
  9211  01CFAA  ECBF  F0DE         	call	_blueAction
  9212                           
  9213                           ;case.c: 22:                 break;
  9214  01CFAE  EF5C  F0E8         	goto	l551
  9215  01CFB2                     l3920:
  9216                           
  9217                           ;case.c: 24:                 yellowAction(reverse,mL,mR);
  9218  01CFB2  C02B  F023         	movff	colorCase@mL,yellowAction@mL
  9219  01CFB6  C02C  F024         	movff	colorCase@mL+1,yellowAction@mL+1
  9220  01CFBA  C02D  F025         	movff	colorCase@mR,yellowAction@mR
  9221  01CFBE  C02E  F026         	movff	colorCase@mR+1,yellowAction@mR+1
  9222  01CFC2  502A               	movf	colorCase@reverse^0,w,c
  9223  01CFC4  ECF5  F0E6         	call	_yellowAction
  9224                           
  9225                           ;case.c: 25:                 break;
  9226  01CFC8  EF5C  F0E8         	goto	l551
  9227  01CFCC                     l3922:
  9228                           
  9229                           ;case.c: 27:                 pinkAction(reverse,mL,mR);
  9230  01CFCC  C02B  F023         	movff	colorCase@mL,pinkAction@mL
  9231  01CFD0  C02C  F024         	movff	colorCase@mL+1,pinkAction@mL+1
  9232  01CFD4  C02D  F025         	movff	colorCase@mR,pinkAction@mR
  9233  01CFD8  C02E  F026         	movff	colorCase@mR+1,pinkAction@mR+1
  9234  01CFDC  502A               	movf	colorCase@reverse^0,w,c
  9235  01CFDE  EC5D  F0E8         	call	_pinkAction
  9236                           
  9237                           ;case.c: 28:                 break;
  9238  01CFE2  EF5C  F0E8         	goto	l551
  9239  01CFE6                     l3924:
  9240                           
  9241                           ;case.c: 30:                 orangeAction(reverse,mL,mR);
  9242  01CFE6  C02B  F023         	movff	colorCase@mL,orangeAction@mL
  9243  01CFEA  C02C  F024         	movff	colorCase@mL+1,orangeAction@mL+1
  9244  01CFEE  C02D  F025         	movff	colorCase@mR,orangeAction@mR
  9245  01CFF2  C02E  F026         	movff	colorCase@mR+1,orangeAction@mR+1
  9246  01CFF6  502A               	movf	colorCase@reverse^0,w,c
  9247  01CFF8  EC62  F0E5         	call	_orangeAction
  9248                           
  9249                           ;case.c: 31:                 break;
  9250  01CFFC  EF5C  F0E8         	goto	l551
  9251  01D000                     l3926:
  9252                           
  9253                           ;case.c: 33:                 lightBlueAction(reverse,mL,mR);
  9254  01D000  C02B  F023         	movff	colorCase@mL,lightBlueAction@mL
  9255  01D004  C02C  F024         	movff	colorCase@mL+1,lightBlueAction@mL+1
  9256  01D008  C02D  F025         	movff	colorCase@mR,lightBlueAction@mR
  9257  01D00C  C02E  F026         	movff	colorCase@mR+1,lightBlueAction@mR+1
  9258  01D010  502A               	movf	colorCase@reverse^0,w,c
  9259  01D012  ECE0  F0E4         	call	_lightBlueAction
  9260                           
  9261                           ;case.c: 34:                 break;
  9262  01D016  EF5C  F0E8         	goto	l551
  9263  01D01A                     l3928:
  9264                           
  9265                           ;case.c: 36:                 whiteAction(reverse, mL, mR);
  9266  01D01A  C02B  F023         	movff	colorCase@mL,whiteAction@mL
  9267  01D01E  C02C  F024         	movff	colorCase@mL+1,whiteAction@mL+1
  9268  01D022  C02D  F025         	movff	colorCase@mR,whiteAction@mR
  9269  01D026  C02E  F026         	movff	colorCase@mR+1,whiteAction@mR+1
  9270  01D02A  502A               	movf	colorCase@reverse^0,w,c
  9271  01D02C  ECBB  F0DF         	call	_whiteAction
  9272                           
  9273                           ;case.c: 37:                 break;
  9274  01D030  EF5C  F0E8         	goto	l551
  9275  01D034                     l3930:
  9276                           
  9277                           ;case.c: 39:                 blackAction(reverse, mL, mR);
  9278  01D034  C02B  F023         	movff	colorCase@mL,blackAction@mL
  9279  01D038  C02C  F024         	movff	colorCase@mL+1,blackAction@mL+1
  9280  01D03C  C02D  F025         	movff	colorCase@mR,blackAction@mR
  9281  01D040  C02E  F026         	movff	colorCase@mR+1,blackAction@mR+1
  9282  01D044  502A               	movf	colorCase@reverse^0,w,c
  9283  01D046  EC71  F0DF         	call	_blackAction
  9284                           
  9285                           ;case.c: 40:                 break;
  9286  01D04A  EF5C  F0E8         	goto	l551
  9287  01D04E                     l3934:
  9288  01D04E  5031               	movf	colorCase@val^0,w,c
  9289  01D050  6E2F               	movwf	??_colorCase^0,c
  9290  01D052  6A30               	clrf	(??_colorCase+1)^0,c
  9291                           
  9292                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9293                           ; Switch size 1, requested type "simple"
  9294                           ; Number of cases is 1, Range of values is 0 to 0
  9295                           ; switch strategies available:
  9296                           ; Name         Instructions Cycles
  9297                           ; simple_byte            4     3 (average)
  9298                           ;	Chosen strategy is simple_byte
  9299  01D054  5030               	movf	(??_colorCase+1)^0,w,c
  9300  01D056  0A00               	xorlw	0	; case 0
  9301  01D058  B4D8               	btfsc	status,2,c
  9302  01D05A  EF31  F0E8         	goto	l4650
  9303  01D05E  EF5C  F0E8         	goto	l551
  9304  01D062                     l4650:
  9305                           
  9306                           ; Switch size 1, requested type "simple"
  9307                           ; Number of cases is 10, Range of values is 0 to 9
  9308                           ; switch strategies available:
  9309                           ; Name         Instructions Cycles
  9310                           ; simple_byte           31    16 (average)
  9311                           ;	Chosen strategy is simple_byte
  9312  01D062  502F               	movf	??_colorCase^0,w,c
  9313  01D064  0A00               	xorlw	0	; case 0
  9314  01D066  B4D8               	btfsc	status,2,c
  9315  01D068  EFA6  F0E7         	goto	l3912
  9316  01D06C  0A01               	xorlw	1	; case 1
  9317  01D06E  B4D8               	btfsc	status,2,c
  9318  01D070  EFB2  F0E7         	goto	l3914
  9319  01D074  0A03               	xorlw	3	; case 2
  9320  01D076  B4D8               	btfsc	status,2,c
  9321  01D078  EFBF  F0E7         	goto	l3916
  9322  01D07C  0A01               	xorlw	1	; case 3
  9323  01D07E  B4D8               	btfsc	status,2,c
  9324  01D080  EFCC  F0E7         	goto	l3918
  9325  01D084  0A07               	xorlw	7	; case 4
  9326  01D086  B4D8               	btfsc	status,2,c
  9327  01D088  EFD9  F0E7         	goto	l3920
  9328  01D08C  0A01               	xorlw	1	; case 5
  9329  01D08E  B4D8               	btfsc	status,2,c
  9330  01D090  EFE6  F0E7         	goto	l3922
  9331  01D094  0A03               	xorlw	3	; case 6
  9332  01D096  B4D8               	btfsc	status,2,c
  9333  01D098  EFF3  F0E7         	goto	l3924
  9334  01D09C  0A01               	xorlw	1	; case 7
  9335  01D09E  B4D8               	btfsc	status,2,c
  9336  01D0A0  EF00  F0E8         	goto	l3926
  9337  01D0A4  0A0F               	xorlw	15	; case 8
  9338  01D0A6  B4D8               	btfsc	status,2,c
  9339  01D0A8  EF0D  F0E8         	goto	l3928
  9340  01D0AC  0A01               	xorlw	1	; case 9
  9341  01D0AE  B4D8               	btfsc	status,2,c
  9342  01D0B0  EF1A  F0E8         	goto	l3930
  9343  01D0B4  EF5C  F0E8         	goto	l551
  9344  01D0B8                     l551:
  9345  01D0B8  0012               	return		;funcret
  9346  01D0BA                     __end_of_colorCase:
  9347                           	callstack 0
  9348                           
  9349 ;; *************** function _yellowAction *****************
  9350 ;; Defined at:
  9351 ;;		line 70 in file "action.c"
  9352 ;; Parameters:    Size  Location     Type
  9353 ;;  reverse         1    wreg     unsigned char 
  9354 ;;  mL              2   34[COMRAM] PTR struct motor
  9355 ;;		 -> main@motorL(9), 
  9356 ;;  mR              2   36[COMRAM] PTR struct motor
  9357 ;;		 -> main@motorR(9), 
  9358 ;; Auto vars:     Size  Location     Type
  9359 ;;  reverse         1   40[COMRAM] unsigned char 
  9360 ;; Return value:  Size  Location     Type
  9361 ;;                  1    wreg      void 
  9362 ;; Registers used:
  9363 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9364 ;; Tracked objects:
  9365 ;;		On entry : 0/0
  9366 ;;		On exit  : 0/0
  9367 ;;		Unchanged: 0/0
  9368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9369 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9370 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9371 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9372 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9373 ;;Total ram usage:        7 bytes
  9374 ;; Hardware stack levels used: 1
  9375 ;; Hardware stack levels required when called: 4
  9376 ;; This function calls:
  9377 ;;		_adjustbackward
  9378 ;;		_backward
  9379 ;;		_turnACW45
  9380 ;;		_turnCW45
  9381 ;; This function is called by:
  9382 ;;		_colorCase
  9383 ;; This function uses a non-reentrant model
  9384 ;;
  9385                           
  9386                           	psect	text34
  9387  01CDEA                     __ptext34:
  9388                           	callstack 0
  9389  01CDEA                     _yellowAction:
  9390                           	callstack 25
  9391                           
  9392                           ;incstack = 0
  9393                           ;yellowAction@reverse stored from wreg
  9394  01CDEA  6E29               	movwf	yellowAction@reverse^0,c
  9395  01CDEC                     
  9396                           ;action.c: 71:     if (reverse == 0){
  9397  01CDEC  5029               	movf	yellowAction@reverse^0,w,c
  9398  01CDEE  A4D8               	btfss	status,2,c
  9399  01CDF0  EFFC  F0E6         	goto	u2671
  9400  01CDF4  EFFE  F0E6         	goto	u2670
  9401  01CDF8                     u2671:
  9402  01CDF8  EF58  F0E7         	goto	l3430
  9403  01CDFC                     u2670:
  9404  01CDFC                     
  9405                           ;action.c: 72:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  9406  01CDFC  0E52               	movlw	82
  9407  01CDFE  6E28               	movwf	(??_yellowAction+1)^0,c
  9408  01CE00  0E2B               	movlw	43
  9409  01CE02  6E27               	movwf	??_yellowAction^0,c
  9410  01CE04  0E00               	movlw	0
  9411  01CE06                     u4217:
  9412  01CE06  2EE8               	decfsz	wreg,f,c
  9413  01CE08  D7FE               	bra	u4217
  9414  01CE0A  2E27               	decfsz	??_yellowAction^0,f,c
  9415  01CE0C  D7FC               	bra	u4217
  9416  01CE0E  2E28               	decfsz	(??_yellowAction+1)^0,f,c
  9417  01CE10  D7FA               	bra	u4217
  9418  01CE12  D000               	nop2	
  9419  01CE14                     
  9420                           ;action.c: 73:         adjustbackward(mL,mR);
  9421  01CE14  C023  F01D         	movff	yellowAction@mL,adjustbackward@mL
  9422  01CE18  C024  F01E         	movff	yellowAction@mL+1,adjustbackward@mL+1
  9423  01CE1C  C025  F01F         	movff	yellowAction@mR,adjustbackward@mR
  9424  01CE20  C026  F020         	movff	yellowAction@mR+1,adjustbackward@mR+1
  9425  01CE24  EC32  F0DF         	call	_adjustbackward	;wreg free
  9426  01CE28                     
  9427                           ;action.c: 74:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  9428  01CE28  0E52               	movlw	82
  9429  01CE2A  6E28               	movwf	(??_yellowAction+1)^0,c
  9430  01CE2C  0E2B               	movlw	43
  9431  01CE2E  6E27               	movwf	??_yellowAction^0,c
  9432  01CE30  0E00               	movlw	0
  9433  01CE32                     u4227:
  9434  01CE32  2EE8               	decfsz	wreg,f,c
  9435  01CE34  D7FE               	bra	u4227
  9436  01CE36  2E27               	decfsz	??_yellowAction^0,f,c
  9437  01CE38  D7FC               	bra	u4227
  9438  01CE3A  2E28               	decfsz	(??_yellowAction+1)^0,f,c
  9439  01CE3C  D7FA               	bra	u4227
  9440  01CE3E  D000               	nop2	
  9441  01CE40                     
  9442                           ;action.c: 75:         backward(mL,mR);
  9443  01CE40  C023  F01D         	movff	yellowAction@mL,backward@mL
  9444  01CE44  C024  F01E         	movff	yellowAction@mL+1,backward@mL+1
  9445  01CE48  C025  F01F         	movff	yellowAction@mR,backward@mR
  9446  01CE4C  C026  F020         	movff	yellowAction@mR+1,backward@mR+1
  9447  01CE50  ECAE  F0E1         	call	_backward	;wreg free
  9448  01CE54                     
  9449                           ;action.c: 76:         _delay((unsigned long)((500)*(64000000/4000.0)));
  9450  01CE54  0E29               	movlw	41
  9451  01CE56  6E28               	movwf	(??_yellowAction+1)^0,c
  9452  01CE58  0E96               	movlw	150
  9453  01CE5A  6E27               	movwf	??_yellowAction^0,c
  9454  01CE5C  0E7F               	movlw	127
  9455  01CE5E                     u4237:
  9456  01CE5E  2EE8               	decfsz	wreg,f,c
  9457  01CE60  D7FE               	bra	u4237
  9458  01CE62  2E27               	decfsz	??_yellowAction^0,f,c
  9459  01CE64  D7FC               	bra	u4237
  9460  01CE66  2E28               	decfsz	(??_yellowAction+1)^0,f,c
  9461  01CE68  D7FA               	bra	u4237
  9462  01CE6A  F000               	nop	
  9463  01CE6C                     
  9464                           ;action.c: 77:         turnCW45(mL,mR);
  9465  01CE6C  C023  F01D         	movff	yellowAction@mL,turnCW45@mL
  9466  01CE70  C024  F01E         	movff	yellowAction@mL+1,turnCW45@mL+1
  9467  01CE74  C025  F01F         	movff	yellowAction@mR,turnCW45@mR
  9468  01CE78  C026  F020         	movff	yellowAction@mR+1,turnCW45@mR+1
  9469  01CE7C  ECD1  F0E0         	call	_turnCW45	;wreg free
  9470  01CE80                     
  9471                           ;action.c: 78:         turnCW45(mL,mR);
  9472  01CE80  C023  F01D         	movff	yellowAction@mL,turnCW45@mL
  9473  01CE84  C024  F01E         	movff	yellowAction@mL+1,turnCW45@mL+1
  9474  01CE88  C025  F01F         	movff	yellowAction@mR,turnCW45@mR
  9475  01CE8C  C026  F020         	movff	yellowAction@mR+1,turnCW45@mR+1
  9476  01CE90  ECD1  F0E0         	call	_turnCW45	;wreg free
  9477  01CE94                     
  9478                           ;action.c: 79:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  9479  01CE94  0E52               	movlw	82
  9480  01CE96  6E28               	movwf	(??_yellowAction+1)^0,c
  9481  01CE98  0E2B               	movlw	43
  9482  01CE9A  6E27               	movwf	??_yellowAction^0,c
  9483  01CE9C  0E00               	movlw	0
  9484  01CE9E                     u4247:
  9485  01CE9E  2EE8               	decfsz	wreg,f,c
  9486  01CEA0  D7FE               	bra	u4247
  9487  01CEA2  2E27               	decfsz	??_yellowAction^0,f,c
  9488  01CEA4  D7FC               	bra	u4247
  9489  01CEA6  2E28               	decfsz	(??_yellowAction+1)^0,f,c
  9490  01CEA8  D7FA               	bra	u4247
  9491  01CEAA  D000               	nop2	
  9492                           
  9493                           ;action.c: 80:     }
  9494  01CEAC  EFA2  F0E7         	goto	l469
  9495  01CEB0                     l3430:
  9496                           
  9497                           ;action.c: 82:         turnACW45(mL,mR);
  9498  01CEB0  C023  F01D         	movff	yellowAction@mL,turnACW45@mL
  9499  01CEB4  C024  F01E         	movff	yellowAction@mL+1,turnACW45@mL+1
  9500  01CEB8  C025  F01F         	movff	yellowAction@mR,turnACW45@mR
  9501  01CEBC  C026  F020         	movff	yellowAction@mR+1,turnACW45@mR+1
  9502  01CEC0  EC63  F0E0         	call	_turnACW45	;wreg free
  9503                           
  9504                           ;action.c: 83:         turnACW45(mL,mR);
  9505  01CEC4  C023  F01D         	movff	yellowAction@mL,turnACW45@mL
  9506  01CEC8  C024  F01E         	movff	yellowAction@mL+1,turnACW45@mL+1
  9507  01CECC  C025  F01F         	movff	yellowAction@mR,turnACW45@mR
  9508  01CED0  C026  F020         	movff	yellowAction@mR+1,turnACW45@mR+1
  9509  01CED4  EC63  F0E0         	call	_turnACW45	;wreg free
  9510  01CED8                     
  9511                           ;action.c: 84:         _delay((unsigned long)((100)*(64000000/4000.0)));
  9512  01CED8  0E09               	movlw	9
  9513  01CEDA  6E28               	movwf	(??_yellowAction+1)^0,c
  9514  01CEDC  0E1E               	movlw	30
  9515  01CEDE  6E27               	movwf	??_yellowAction^0,c
  9516  01CEE0  0EE4               	movlw	228
  9517  01CEE2                     u4257:
  9518  01CEE2  2EE8               	decfsz	wreg,f,c
  9519  01CEE4  D7FE               	bra	u4257
  9520  01CEE6  2E27               	decfsz	??_yellowAction^0,f,c
  9521  01CEE8  D7FC               	bra	u4257
  9522  01CEEA  2E28               	decfsz	(??_yellowAction+1)^0,f,c
  9523  01CEEC  D7FA               	bra	u4257
  9524  01CEEE  D000               	nop2	
  9525  01CEF0                     
  9526                           ;action.c: 85:         backward(mL,mR);
  9527  01CEF0  C023  F01D         	movff	yellowAction@mL,backward@mL
  9528  01CEF4  C024  F01E         	movff	yellowAction@mL+1,backward@mL+1
  9529  01CEF8  C025  F01F         	movff	yellowAction@mR,backward@mR
  9530  01CEFC  C026  F020         	movff	yellowAction@mR+1,backward@mR+1
  9531  01CF00  ECAE  F0E1         	call	_backward	;wreg free
  9532  01CF04                     
  9533                           ;action.c: 86:         adjustbackward(mL,mR);
  9534  01CF04  C023  F01D         	movff	yellowAction@mL,adjustbackward@mL
  9535  01CF08  C024  F01E         	movff	yellowAction@mL+1,adjustbackward@mL+1
  9536  01CF0C  C025  F01F         	movff	yellowAction@mR,adjustbackward@mR
  9537  01CF10  C026  F020         	movff	yellowAction@mR+1,adjustbackward@mR+1
  9538  01CF14  EC32  F0DF         	call	_adjustbackward	;wreg free
  9539  01CF18                     
  9540                           ;action.c: 87:         adjustbackward(mL,mR);
  9541  01CF18  C023  F01D         	movff	yellowAction@mL,adjustbackward@mL
  9542  01CF1C  C024  F01E         	movff	yellowAction@mL+1,adjustbackward@mL+1
  9543  01CF20  C025  F01F         	movff	yellowAction@mR,adjustbackward@mR
  9544  01CF24  C026  F020         	movff	yellowAction@mR+1,adjustbackward@mR+1
  9545  01CF28  EC32  F0DF         	call	_adjustbackward	;wreg free
  9546                           
  9547                           ;action.c: 88:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  9548  01CF2C  0E52               	movlw	82
  9549  01CF2E  6E28               	movwf	(??_yellowAction+1)^0,c
  9550  01CF30  0E2B               	movlw	43
  9551  01CF32  6E27               	movwf	??_yellowAction^0,c
  9552  01CF34  0E00               	movlw	0
  9553  01CF36                     u4267:
  9554  01CF36  2EE8               	decfsz	wreg,f,c
  9555  01CF38  D7FE               	bra	u4267
  9556  01CF3A  2E27               	decfsz	??_yellowAction^0,f,c
  9557  01CF3C  D7FC               	bra	u4267
  9558  01CF3E  2E28               	decfsz	(??_yellowAction+1)^0,f,c
  9559  01CF40  D7FA               	bra	u4267
  9560  01CF42  D000               	nop2	
  9561  01CF44                     l469:
  9562  01CF44  0012               	return		;funcret
  9563  01CF46                     __end_of_yellowAction:
  9564                           	callstack 0
  9565                           
  9566 ;; *************** function _whiteAction *****************
  9567 ;; Defined at:
  9568 ;;		line 168 in file "action.c"
  9569 ;; Parameters:    Size  Location     Type
  9570 ;;  reverse         1    wreg     unsigned char 
  9571 ;;  mL              2   34[COMRAM] PTR struct motor
  9572 ;;		 -> main@motorL(9), 
  9573 ;;  mR              2   36[COMRAM] PTR struct motor
  9574 ;;		 -> main@motorR(9), 
  9575 ;; Auto vars:     Size  Location     Type
  9576 ;;  reverse         1   40[COMRAM] unsigned char 
  9577 ;; Return value:  Size  Location     Type
  9578 ;;                  1    wreg      void 
  9579 ;; Registers used:
  9580 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9581 ;; Tracked objects:
  9582 ;;		On entry : 0/0
  9583 ;;		On exit  : 0/0
  9584 ;;		Unchanged: 0/0
  9585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9586 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9587 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9588 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9589 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9590 ;;Total ram usage:        7 bytes
  9591 ;; Hardware stack levels used: 1
  9592 ;; Hardware stack levels required when called: 4
  9593 ;; This function calls:
  9594 ;;		_adjustbackward
  9595 ;;		_turn180
  9596 ;; This function is called by:
  9597 ;;		_colorCase
  9598 ;; This function uses a non-reentrant model
  9599 ;;
  9600                           
  9601                           	psect	text35
  9602  01BF76                     __ptext35:
  9603                           	callstack 0
  9604  01BF76                     _whiteAction:
  9605                           	callstack 25
  9606                           
  9607                           ;incstack = 0
  9608                           ;whiteAction@reverse stored from wreg
  9609  01BF76  6E29               	movwf	whiteAction@reverse^0,c
  9610  01BF78                     
  9611                           ;action.c: 169:     if (reverse==0){
  9612  01BF78  5029               	movf	whiteAction@reverse^0,w,c
  9613  01BF7A  A4D8               	btfss	status,2,c
  9614  01BF7C  EFC2  F0DF         	goto	u2711
  9615  01BF80  EFC4  F0DF         	goto	u2710
  9616  01BF84                     u2711:
  9617  01BF84  EF04  F0E0         	goto	l488
  9618  01BF88                     u2710:
  9619  01BF88                     
  9620                           ;action.c: 170:         adjustbackward(mL,mR);
  9621  01BF88  C023  F01D         	movff	whiteAction@mL,adjustbackward@mL
  9622  01BF8C  C024  F01E         	movff	whiteAction@mL+1,adjustbackward@mL+1
  9623  01BF90  C025  F01F         	movff	whiteAction@mR,adjustbackward@mR
  9624  01BF94  C026  F020         	movff	whiteAction@mR+1,adjustbackward@mR+1
  9625  01BF98  EC32  F0DF         	call	_adjustbackward	;wreg free
  9626  01BF9C                     
  9627                           ;action.c: 171:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  9628  01BF9C  0E52               	movlw	82
  9629  01BF9E  6E28               	movwf	(??_whiteAction+1)^0,c
  9630  01BFA0  0E2B               	movlw	43
  9631  01BFA2  6E27               	movwf	??_whiteAction^0,c
  9632  01BFA4  0E00               	movlw	0
  9633  01BFA6                     u4277:
  9634  01BFA6  2EE8               	decfsz	wreg,f,c
  9635  01BFA8  D7FE               	bra	u4277
  9636  01BFAA  2E27               	decfsz	??_whiteAction^0,f,c
  9637  01BFAC  D7FC               	bra	u4277
  9638  01BFAE  2E28               	decfsz	(??_whiteAction+1)^0,f,c
  9639  01BFB0  D7FA               	bra	u4277
  9640  01BFB2  D000               	nop2	
  9641  01BFB4                     
  9642                           ;action.c: 172:         turn180(mL,mR);
  9643  01BFB4  C023  F01D         	movff	whiteAction@mL,turn180@mL
  9644  01BFB8  C024  F01E         	movff	whiteAction@mL+1,turn180@mL+1
  9645  01BFBC  C025  F01F         	movff	whiteAction@mR,turn180@mR
  9646  01BFC0  C026  F020         	movff	whiteAction@mR+1,turn180@mR+1
  9647  01BFC4  EC3F  F0E1         	call	_turn180	;wreg free
  9648                           
  9649                           ;action.c: 173:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  9650  01BFC8  0E52               	movlw	82
  9651  01BFCA  6E28               	movwf	(??_whiteAction+1)^0,c
  9652  01BFCC  0E2B               	movlw	43
  9653  01BFCE  6E27               	movwf	??_whiteAction^0,c
  9654  01BFD0  0E00               	movlw	0
  9655  01BFD2                     u4287:
  9656  01BFD2  2EE8               	decfsz	wreg,f,c
  9657  01BFD4  D7FE               	bra	u4287
  9658  01BFD6  2E27               	decfsz	??_whiteAction^0,f,c
  9659  01BFD8  D7FC               	bra	u4287
  9660  01BFDA  2E28               	decfsz	(??_whiteAction+1)^0,f,c
  9661  01BFDC  D7FA               	bra	u4287
  9662  01BFDE  D000               	nop2	
  9663  01BFE0                     
  9664                           ;action.c: 174:         adjustbackward(mL,mR);
  9665  01BFE0  C023  F01D         	movff	whiteAction@mL,adjustbackward@mL
  9666  01BFE4  C024  F01E         	movff	whiteAction@mL+1,adjustbackward@mL+1
  9667  01BFE8  C025  F01F         	movff	whiteAction@mR,adjustbackward@mR
  9668  01BFEC  C026  F020         	movff	whiteAction@mR+1,adjustbackward@mR+1
  9669  01BFF0  EC32  F0DF         	call	_adjustbackward	;wreg free
  9670  01BFF4                     
  9671                           ;action.c: 175:         adjustbackward(mL,mR);
  9672  01BFF4  C023  F01D         	movff	whiteAction@mL,adjustbackward@mL
  9673  01BFF8  C024  F01E         	movff	whiteAction@mL+1,adjustbackward@mL+1
  9674  01BFFC  C025  F01F         	movff	whiteAction@mR,adjustbackward@mR
  9675  01C000  C026  F020         	movff	whiteAction@mR+1,adjustbackward@mR+1
  9676  01C004  EC32  F0DF         	call	_adjustbackward	;wreg free
  9677  01C008                     l488:
  9678  01C008  0012               	return		;funcret
  9679  01C00A                     __end_of_whiteAction:
  9680                           	callstack 0
  9681                           
  9682 ;; *************** function _redAction *****************
  9683 ;; Defined at:
  9684 ;;		line 18 in file "action.c"
  9685 ;; Parameters:    Size  Location     Type
  9686 ;;  reverse         1    wreg     unsigned char 
  9687 ;;  mL              2   34[COMRAM] PTR struct motor
  9688 ;;		 -> main@motorL(9), 
  9689 ;;  mR              2   36[COMRAM] PTR struct motor
  9690 ;;		 -> main@motorR(9), 
  9691 ;; Auto vars:     Size  Location     Type
  9692 ;;  reverse         1   40[COMRAM] unsigned char 
  9693 ;; Return value:  Size  Location     Type
  9694 ;;                  1    wreg      void 
  9695 ;; Registers used:
  9696 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9697 ;; Tracked objects:
  9698 ;;		On entry : 0/0
  9699 ;;		On exit  : 0/0
  9700 ;;		Unchanged: 0/0
  9701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9702 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9703 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9704 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9705 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9706 ;;Total ram usage:        7 bytes
  9707 ;; Hardware stack levels used: 1
  9708 ;; Hardware stack levels required when called: 4
  9709 ;; This function calls:
  9710 ;;		_adjustbackward
  9711 ;;		_turnACW45
  9712 ;;		_turnCW45
  9713 ;; This function is called by:
  9714 ;;		_colorCase
  9715 ;; This function uses a non-reentrant model
  9716 ;;
  9717                           
  9718                           	psect	text36
  9719  01C7DC                     __ptext36:
  9720                           	callstack 0
  9721  01C7DC                     _redAction:
  9722                           	callstack 25
  9723                           
  9724                           ;incstack = 0
  9725                           ;redAction@reverse stored from wreg
  9726  01C7DC  6E29               	movwf	redAction@reverse^0,c
  9727  01C7DE                     
  9728                           ;action.c: 19:     if (reverse==0){
  9729  01C7DE  5029               	movf	redAction@reverse^0,w,c
  9730  01C7E0  A4D8               	btfss	status,2,c
  9731  01C7E2  EFF5  F0E3         	goto	u2651
  9732  01C7E6  EFF7  F0E3         	goto	u2650
  9733  01C7EA                     u2651:
  9734  01C7EA  EF3B  F0E4         	goto	l3380
  9735  01C7EE                     u2650:
  9736  01C7EE                     
  9737                           ;action.c: 20:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  9738  01C7EE  0E52               	movlw	82
  9739  01C7F0  6E28               	movwf	(??_redAction+1)^0,c
  9740  01C7F2  0E2B               	movlw	43
  9741  01C7F4  6E27               	movwf	??_redAction^0,c
  9742  01C7F6  0E00               	movlw	0
  9743  01C7F8                     u4297:
  9744  01C7F8  2EE8               	decfsz	wreg,f,c
  9745  01C7FA  D7FE               	bra	u4297
  9746  01C7FC  2E27               	decfsz	??_redAction^0,f,c
  9747  01C7FE  D7FC               	bra	u4297
  9748  01C800  2E28               	decfsz	(??_redAction+1)^0,f,c
  9749  01C802  D7FA               	bra	u4297
  9750  01C804  D000               	nop2	
  9751  01C806                     
  9752                           ;action.c: 21:         adjustbackward(mL,mR);
  9753  01C806  C023  F01D         	movff	redAction@mL,adjustbackward@mL
  9754  01C80A  C024  F01E         	movff	redAction@mL+1,adjustbackward@mL+1
  9755  01C80E  C025  F01F         	movff	redAction@mR,adjustbackward@mR
  9756  01C812  C026  F020         	movff	redAction@mR+1,adjustbackward@mR+1
  9757  01C816  EC32  F0DF         	call	_adjustbackward	;wreg free
  9758  01C81A                     
  9759                           ;action.c: 22:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  9760  01C81A  0E52               	movlw	82
  9761  01C81C  6E28               	movwf	(??_redAction+1)^0,c
  9762  01C81E  0E2B               	movlw	43
  9763  01C820  6E27               	movwf	??_redAction^0,c
  9764  01C822  0E00               	movlw	0
  9765  01C824                     u4307:
  9766  01C824  2EE8               	decfsz	wreg,f,c
  9767  01C826  D7FE               	bra	u4307
  9768  01C828  2E27               	decfsz	??_redAction^0,f,c
  9769  01C82A  D7FC               	bra	u4307
  9770  01C82C  2E28               	decfsz	(??_redAction+1)^0,f,c
  9771  01C82E  D7FA               	bra	u4307
  9772  01C830  D000               	nop2	
  9773  01C832                     
  9774                           ;action.c: 23:         turnCW45(mL,mR);
  9775  01C832  C023  F01D         	movff	redAction@mL,turnCW45@mL
  9776  01C836  C024  F01E         	movff	redAction@mL+1,turnCW45@mL+1
  9777  01C83A  C025  F01F         	movff	redAction@mR,turnCW45@mR
  9778  01C83E  C026  F020         	movff	redAction@mR+1,turnCW45@mR+1
  9779  01C842  ECD1  F0E0         	call	_turnCW45	;wreg free
  9780  01C846                     
  9781                           ;action.c: 24:         turnCW45(mL,mR);
  9782  01C846  C023  F01D         	movff	redAction@mL,turnCW45@mL
  9783  01C84A  C024  F01E         	movff	redAction@mL+1,turnCW45@mL+1
  9784  01C84E  C025  F01F         	movff	redAction@mR,turnCW45@mR
  9785  01C852  C026  F020         	movff	redAction@mR+1,turnCW45@mR+1
  9786  01C856  ECD1  F0E0         	call	_turnCW45	;wreg free
  9787  01C85A                     l3378:
  9788                           
  9789                           ;action.c: 25:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  9790  01C85A  0E52               	movlw	82
  9791  01C85C  6E28               	movwf	(??_redAction+1)^0,c
  9792  01C85E  0E2B               	movlw	43
  9793  01C860  6E27               	movwf	??_redAction^0,c
  9794  01C862  0E00               	movlw	0
  9795  01C864                     u4317:
  9796  01C864  2EE8               	decfsz	wreg,f,c
  9797  01C866  D7FE               	bra	u4317
  9798  01C868  2E27               	decfsz	??_redAction^0,f,c
  9799  01C86A  D7FC               	bra	u4317
  9800  01C86C  2E28               	decfsz	(??_redAction+1)^0,f,c
  9801  01C86E  D7FA               	bra	u4317
  9802  01C870  D000               	nop2	
  9803                           
  9804                           ;action.c: 26:     }
  9805  01C872  EF65  F0E4         	goto	l456
  9806  01C876                     l3380:
  9807                           
  9808                           ;action.c: 28:         turnACW45(mL,mR);
  9809  01C876  C023  F01D         	movff	redAction@mL,turnACW45@mL
  9810  01C87A  C024  F01E         	movff	redAction@mL+1,turnACW45@mL+1
  9811  01C87E  C025  F01F         	movff	redAction@mR,turnACW45@mR
  9812  01C882  C026  F020         	movff	redAction@mR+1,turnACW45@mR+1
  9813  01C886  EC63  F0E0         	call	_turnACW45	;wreg free
  9814                           
  9815                           ;action.c: 29:         turnACW45(mL,mR);
  9816  01C88A  C023  F01D         	movff	redAction@mL,turnACW45@mL
  9817  01C88E  C024  F01E         	movff	redAction@mL+1,turnACW45@mL+1
  9818  01C892  C025  F01F         	movff	redAction@mR,turnACW45@mR
  9819  01C896  C026  F020         	movff	redAction@mR+1,turnACW45@mR+1
  9820  01C89A  EC63  F0E0         	call	_turnACW45	;wreg free
  9821                           
  9822                           ;action.c: 30:         adjustbackward(mL,mR);
  9823  01C89E  C023  F01D         	movff	redAction@mL,adjustbackward@mL
  9824  01C8A2  C024  F01E         	movff	redAction@mL+1,adjustbackward@mL+1
  9825  01C8A6  C025  F01F         	movff	redAction@mR,adjustbackward@mR
  9826  01C8AA  C026  F020         	movff	redAction@mR+1,adjustbackward@mR+1
  9827  01C8AE  EC32  F0DF         	call	_adjustbackward	;wreg free
  9828                           
  9829                           ;action.c: 31:         adjustbackward(mL,mR);
  9830  01C8B2  C023  F01D         	movff	redAction@mL,adjustbackward@mL
  9831  01C8B6  C024  F01E         	movff	redAction@mL+1,adjustbackward@mL+1
  9832  01C8BA  C025  F01F         	movff	redAction@mR,adjustbackward@mR
  9833  01C8BE  C026  F020         	movff	redAction@mR+1,adjustbackward@mR+1
  9834  01C8C2  EC32  F0DF         	call	_adjustbackward	;wreg free
  9835  01C8C6  EF2D  F0E4         	goto	l3378
  9836  01C8CA                     l456:
  9837  01C8CA  0012               	return		;funcret
  9838  01C8CC                     __end_of_redAction:
  9839                           	callstack 0
  9840                           
  9841 ;; *************** function _pinkAction *****************
  9842 ;; Defined at:
  9843 ;;		line 96 in file "action.c"
  9844 ;; Parameters:    Size  Location     Type
  9845 ;;  reverse         1    wreg     unsigned char 
  9846 ;;  mL              2   34[COMRAM] PTR struct motor
  9847 ;;		 -> main@motorL(9), 
  9848 ;;  mR              2   36[COMRAM] PTR struct motor
  9849 ;;		 -> main@motorR(9), 
  9850 ;; Auto vars:     Size  Location     Type
  9851 ;;  reverse         1   40[COMRAM] unsigned char 
  9852 ;; Return value:  Size  Location     Type
  9853 ;;                  1    wreg      void 
  9854 ;; Registers used:
  9855 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9856 ;; Tracked objects:
  9857 ;;		On entry : 0/0
  9858 ;;		On exit  : 0/0
  9859 ;;		Unchanged: 0/0
  9860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  9861 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9862 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9863 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9864 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9865 ;;Total ram usage:        7 bytes
  9866 ;; Hardware stack levels used: 1
  9867 ;; Hardware stack levels required when called: 4
  9868 ;; This function calls:
  9869 ;;		_adjustbackward
  9870 ;;		_backward
  9871 ;;		_turnACW45
  9872 ;;		_turnCW45
  9873 ;; This function is called by:
  9874 ;;		_colorCase
  9875 ;; This function uses a non-reentrant model
  9876 ;;
  9877                           
  9878                           	psect	text37
  9879  01D0BA                     __ptext37:
  9880                           	callstack 0
  9881  01D0BA                     _pinkAction:
  9882                           	callstack 25
  9883                           
  9884                           ;incstack = 0
  9885                           ;pinkAction@reverse stored from wreg
  9886  01D0BA  6E29               	movwf	pinkAction@reverse^0,c
  9887  01D0BC                     
  9888                           ;action.c: 97:     if (reverse == 0){
  9889  01D0BC  5029               	movf	pinkAction@reverse^0,w,c
  9890  01D0BE  A4D8               	btfss	status,2,c
  9891  01D0C0  EF64  F0E8         	goto	u2681
  9892  01D0C4  EF66  F0E8         	goto	u2680
  9893  01D0C8                     u2681:
  9894  01D0C8  EFC0  F0E8         	goto	l3458
  9895  01D0CC                     u2680:
  9896  01D0CC                     
  9897                           ;action.c: 98:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  9898  01D0CC  0E52               	movlw	82
  9899  01D0CE  6E28               	movwf	(??_pinkAction+1)^0,c
  9900  01D0D0  0E2B               	movlw	43
  9901  01D0D2  6E27               	movwf	??_pinkAction^0,c
  9902  01D0D4  0E00               	movlw	0
  9903  01D0D6                     u4327:
  9904  01D0D6  2EE8               	decfsz	wreg,f,c
  9905  01D0D8  D7FE               	bra	u4327
  9906  01D0DA  2E27               	decfsz	??_pinkAction^0,f,c
  9907  01D0DC  D7FC               	bra	u4327
  9908  01D0DE  2E28               	decfsz	(??_pinkAction+1)^0,f,c
  9909  01D0E0  D7FA               	bra	u4327
  9910  01D0E2  D000               	nop2	
  9911  01D0E4                     
  9912                           ;action.c: 99:         adjustbackward(mL,mR);
  9913  01D0E4  C023  F01D         	movff	pinkAction@mL,adjustbackward@mL
  9914  01D0E8  C024  F01E         	movff	pinkAction@mL+1,adjustbackward@mL+1
  9915  01D0EC  C025  F01F         	movff	pinkAction@mR,adjustbackward@mR
  9916  01D0F0  C026  F020         	movff	pinkAction@mR+1,adjustbackward@mR+1
  9917  01D0F4  EC32  F0DF         	call	_adjustbackward	;wreg free
  9918  01D0F8                     
  9919                           ;action.c: 100:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  9920  01D0F8  0E52               	movlw	82
  9921  01D0FA  6E28               	movwf	(??_pinkAction+1)^0,c
  9922  01D0FC  0E2B               	movlw	43
  9923  01D0FE  6E27               	movwf	??_pinkAction^0,c
  9924  01D100  0E00               	movlw	0
  9925  01D102                     u4337:
  9926  01D102  2EE8               	decfsz	wreg,f,c
  9927  01D104  D7FE               	bra	u4337
  9928  01D106  2E27               	decfsz	??_pinkAction^0,f,c
  9929  01D108  D7FC               	bra	u4337
  9930  01D10A  2E28               	decfsz	(??_pinkAction+1)^0,f,c
  9931  01D10C  D7FA               	bra	u4337
  9932  01D10E  D000               	nop2	
  9933  01D110                     
  9934                           ;action.c: 101:         backward(mL,mR);
  9935  01D110  C023  F01D         	movff	pinkAction@mL,backward@mL
  9936  01D114  C024  F01E         	movff	pinkAction@mL+1,backward@mL+1
  9937  01D118  C025  F01F         	movff	pinkAction@mR,backward@mR
  9938  01D11C  C026  F020         	movff	pinkAction@mR+1,backward@mR+1
  9939  01D120  ECAE  F0E1         	call	_backward	;wreg free
  9940  01D124                     
  9941                           ;action.c: 102:         _delay((unsigned long)((500)*(64000000/4000.0)));
  9942  01D124  0E29               	movlw	41
  9943  01D126  6E28               	movwf	(??_pinkAction+1)^0,c
  9944  01D128  0E96               	movlw	150
  9945  01D12A  6E27               	movwf	??_pinkAction^0,c
  9946  01D12C  0E7F               	movlw	127
  9947  01D12E                     u4347:
  9948  01D12E  2EE8               	decfsz	wreg,f,c
  9949  01D130  D7FE               	bra	u4347
  9950  01D132  2E27               	decfsz	??_pinkAction^0,f,c
  9951  01D134  D7FC               	bra	u4347
  9952  01D136  2E28               	decfsz	(??_pinkAction+1)^0,f,c
  9953  01D138  D7FA               	bra	u4347
  9954  01D13A  F000               	nop	
  9955  01D13C                     
  9956                           ;action.c: 103:         turnACW45(mL,mR);
  9957  01D13C  C023  F01D         	movff	pinkAction@mL,turnACW45@mL
  9958  01D140  C024  F01E         	movff	pinkAction@mL+1,turnACW45@mL+1
  9959  01D144  C025  F01F         	movff	pinkAction@mR,turnACW45@mR
  9960  01D148  C026  F020         	movff	pinkAction@mR+1,turnACW45@mR+1
  9961  01D14C  EC63  F0E0         	call	_turnACW45	;wreg free
  9962  01D150                     
  9963                           ;action.c: 104:         turnACW45(mL,mR);
  9964  01D150  C023  F01D         	movff	pinkAction@mL,turnACW45@mL
  9965  01D154  C024  F01E         	movff	pinkAction@mL+1,turnACW45@mL+1
  9966  01D158  C025  F01F         	movff	pinkAction@mR,turnACW45@mR
  9967  01D15C  C026  F020         	movff	pinkAction@mR+1,turnACW45@mR+1
  9968  01D160  EC63  F0E0         	call	_turnACW45	;wreg free
  9969  01D164                     l3456:
  9970                           
  9971                           ;action.c: 105:         _delay((unsigned long)((1000)*(64000000/4000.0)));
  9972  01D164  0E52               	movlw	82
  9973  01D166  6E28               	movwf	(??_pinkAction+1)^0,c
  9974  01D168  0E2B               	movlw	43
  9975  01D16A  6E27               	movwf	??_pinkAction^0,c
  9976  01D16C  0E00               	movlw	0
  9977  01D16E                     u4357:
  9978  01D16E  2EE8               	decfsz	wreg,f,c
  9979  01D170  D7FE               	bra	u4357
  9980  01D172  2E27               	decfsz	??_pinkAction^0,f,c
  9981  01D174  D7FC               	bra	u4357
  9982  01D176  2E28               	decfsz	(??_pinkAction+1)^0,f,c
  9983  01D178  D7FA               	bra	u4357
  9984  01D17A  D000               	nop2	
  9985                           
  9986                           ;action.c: 106:     }
  9987  01D17C  EF18  F0E9         	goto	l474
  9988  01D180                     l3458:
  9989                           
  9990                           ;action.c: 108:         turnCW45(mL,mR);
  9991  01D180  C023  F01D         	movff	pinkAction@mL,turnCW45@mL
  9992  01D184  C024  F01E         	movff	pinkAction@mL+1,turnCW45@mL+1
  9993  01D188  C025  F01F         	movff	pinkAction@mR,turnCW45@mR
  9994  01D18C  C026  F020         	movff	pinkAction@mR+1,turnCW45@mR+1
  9995  01D190  ECD1  F0E0         	call	_turnCW45	;wreg free
  9996                           
  9997                           ;action.c: 109:         turnCW45(mL,mR);
  9998  01D194  C023  F01D         	movff	pinkAction@mL,turnCW45@mL
  9999  01D198  C024  F01E         	movff	pinkAction@mL+1,turnCW45@mL+1
 10000  01D19C  C025  F01F         	movff	pinkAction@mR,turnCW45@mR
 10001  01D1A0  C026  F020         	movff	pinkAction@mR+1,turnCW45@mR+1
 10002  01D1A4  ECD1  F0E0         	call	_turnCW45	;wreg free
 10003  01D1A8                     
 10004                           ;action.c: 110:         _delay((unsigned long)((1000)*(64000000/4000.0)));
 10005  01D1A8  0E52               	movlw	82
 10006  01D1AA  6E28               	movwf	(??_pinkAction+1)^0,c
 10007  01D1AC  0E2B               	movlw	43
 10008  01D1AE  6E27               	movwf	??_pinkAction^0,c
 10009  01D1B0  0E00               	movlw	0
 10010  01D1B2                     u4367:
 10011  01D1B2  2EE8               	decfsz	wreg,f,c
 10012  01D1B4  D7FE               	bra	u4367
 10013  01D1B6  2E27               	decfsz	??_pinkAction^0,f,c
 10014  01D1B8  D7FC               	bra	u4367
 10015  01D1BA  2E28               	decfsz	(??_pinkAction+1)^0,f,c
 10016  01D1BC  D7FA               	bra	u4367
 10017  01D1BE  D000               	nop2	
 10018  01D1C0                     
 10019                           ;action.c: 111:         backward(mL,mR);
 10020  01D1C0  C023  F01D         	movff	pinkAction@mL,backward@mL
 10021  01D1C4  C024  F01E         	movff	pinkAction@mL+1,backward@mL+1
 10022  01D1C8  C025  F01F         	movff	pinkAction@mR,backward@mR
 10023  01D1CC  C026  F020         	movff	pinkAction@mR+1,backward@mR+1
 10024  01D1D0  ECAE  F0E1         	call	_backward	;wreg free
 10025                           
 10026                           ;action.c: 112:         _delay((unsigned long)((500)*(64000000/4000.0)));
 10027  01D1D4  0E29               	movlw	41
 10028  01D1D6  6E28               	movwf	(??_pinkAction+1)^0,c
 10029  01D1D8  0E96               	movlw	150
 10030  01D1DA  6E27               	movwf	??_pinkAction^0,c
 10031  01D1DC  0E7F               	movlw	127
 10032  01D1DE                     u4377:
 10033  01D1DE  2EE8               	decfsz	wreg,f,c
 10034  01D1E0  D7FE               	bra	u4377
 10035  01D1E2  2E27               	decfsz	??_pinkAction^0,f,c
 10036  01D1E4  D7FC               	bra	u4377
 10037  01D1E6  2E28               	decfsz	(??_pinkAction+1)^0,f,c
 10038  01D1E8  D7FA               	bra	u4377
 10039  01D1EA  F000               	nop	
 10040  01D1EC                     
 10041                           ;action.c: 113:         adjustbackward(mL,mR);
 10042  01D1EC  C023  F01D         	movff	pinkAction@mL,adjustbackward@mL
 10043  01D1F0  C024  F01E         	movff	pinkAction@mL+1,adjustbackward@mL+1
 10044  01D1F4  C025  F01F         	movff	pinkAction@mR,adjustbackward@mR
 10045  01D1F8  C026  F020         	movff	pinkAction@mR+1,adjustbackward@mR+1
 10046  01D1FC  EC32  F0DF         	call	_adjustbackward	;wreg free
 10047  01D200                     
 10048                           ;action.c: 114:         _delay((unsigned long)((1000)*(64000000/4000.0)));
 10049  01D200  0E52               	movlw	82
 10050  01D202  6E28               	movwf	(??_pinkAction+1)^0,c
 10051  01D204  0E2B               	movlw	43
 10052  01D206  6E27               	movwf	??_pinkAction^0,c
 10053  01D208  0E00               	movlw	0
 10054  01D20A                     u4387:
 10055  01D20A  2EE8               	decfsz	wreg,f,c
 10056  01D20C  D7FE               	bra	u4387
 10057  01D20E  2E27               	decfsz	??_pinkAction^0,f,c
 10058  01D210  D7FC               	bra	u4387
 10059  01D212  2E28               	decfsz	(??_pinkAction+1)^0,f,c
 10060  01D214  D7FA               	bra	u4387
 10061  01D216  D000               	nop2	
 10062                           
 10063                           ;action.c: 115:         adjustbackward(mL,mR);
 10064  01D218  C023  F01D         	movff	pinkAction@mL,adjustbackward@mL
 10065  01D21C  C024  F01E         	movff	pinkAction@mL+1,adjustbackward@mL+1
 10066  01D220  C025  F01F         	movff	pinkAction@mR,adjustbackward@mR
 10067  01D224  C026  F020         	movff	pinkAction@mR+1,adjustbackward@mR+1
 10068  01D228  EC32  F0DF         	call	_adjustbackward	;wreg free
 10069  01D22C  EFB2  F0E8         	goto	l3456
 10070  01D230                     l474:
 10071  01D230  0012               	return		;funcret
 10072  01D232                     __end_of_pinkAction:
 10073                           	callstack 0
 10074                           
 10075 ;; *************** function _backward *****************
 10076 ;; Defined at:
 10077 ;;		line 167 in file "motor.c"
 10078 ;; Parameters:    Size  Location     Type
 10079 ;;  mL              2   28[COMRAM] PTR struct motor
 10080 ;;		 -> main@motorL(9), 
 10081 ;;  mR              2   30[COMRAM] PTR struct motor
 10082 ;;		 -> main@motorR(9), 
 10083 ;; Auto vars:     Size  Location     Type
 10084 ;;		None
 10085 ;; Return value:  Size  Location     Type
 10086 ;;                  1    wreg      void 
 10087 ;; Registers used:
 10088 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10089 ;; Tracked objects:
 10090 ;;		On entry : 0/0
 10091 ;;		On exit  : 0/0
 10092 ;;		Unchanged: 0/0
 10093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10094 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10096 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10097 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10098 ;;Total ram usage:        6 bytes
 10099 ;; Hardware stack levels used: 1
 10100 ;; Hardware stack levels required when called: 3
 10101 ;; This function calls:
 10102 ;;		_setMotorPWM
 10103 ;;		_stop
 10104 ;; This function is called by:
 10105 ;;		_yellowAction
 10106 ;;		_pinkAction
 10107 ;; This function uses a non-reentrant model
 10108 ;;
 10109                           
 10110                           	psect	text38
 10111  01C35C                     __ptext38:
 10112                           	callstack 0
 10113  01C35C                     _backward:
 10114                           	callstack 25
 10115  01C35C                     
 10116                           ;motor.c: 168:     mL->power = 70;
 10117  01C35C  C01D  FFD9         	movff	backward@mL,fsr2l
 10118  01C360  C01E  FFDA         	movff	backward@mL+1,fsr2h
 10119  01C364  0E46               	movlw	70
 10120  01C366  6EDF               	movwf	indf2,c
 10121                           
 10122                           ;motor.c: 169:     mR->power = 73;
 10123  01C368  C01F  FFD9         	movff	backward@mR,fsr2l
 10124  01C36C  C020  FFDA         	movff	backward@mR+1,fsr2h
 10125  01C370  0E49               	movlw	73
 10126  01C372  6EDF               	movwf	indf2,c
 10127  01C374                     
 10128                           ;motor.c: 170:     mL->direction = 0;
 10129  01C374  EE20 F001          	lfsr	2,1
 10130  01C378  501D               	movf	backward@mL^0,w,c
 10131  01C37A  26D9               	addwf	fsr2l,f,c
 10132  01C37C  501E               	movf	(backward@mL+1)^0,w,c
 10133  01C37E  22DA               	addwfc	fsr2h,f,c
 10134  01C380  0E00               	movlw	0
 10135  01C382  6EDF               	movwf	indf2,c
 10136  01C384                     
 10137                           ;motor.c: 171:     mR->direction = 0;
 10138  01C384  EE20 F001          	lfsr	2,1
 10139  01C388  501F               	movf	backward@mR^0,w,c
 10140  01C38A  26D9               	addwf	fsr2l,f,c
 10141  01C38C  5020               	movf	(backward@mR+1)^0,w,c
 10142  01C38E  22DA               	addwfc	fsr2h,f,c
 10143  01C390  0E00               	movlw	0
 10144  01C392  6EDF               	movwf	indf2,c
 10145                           
 10146                           ;motor.c: 174:    while (mL->power<90 && mR->power<90){
 10147  01C394  EFFA  F0E1         	goto	l3112
 10148  01C398                     l3104:
 10149                           
 10150                           ;motor.c: 175:         mL->power = mL-> power +10 ;
 10151  01C398  C01D  FFD9         	movff	backward@mL,fsr2l
 10152  01C39C  C01E  FFDA         	movff	backward@mL+1,fsr2h
 10153  01C3A0  50DF               	movf	indf2,w,c
 10154  01C3A2  0F0A               	addlw	10
 10155  01C3A4  C01D  FFD9         	movff	backward@mL,fsr2l
 10156  01C3A8  C01E  FFDA         	movff	backward@mL+1,fsr2h
 10157  01C3AC  6EDF               	movwf	indf2,c
 10158                           
 10159                           ;motor.c: 176:         mR->power = mR-> power +10;
 10160  01C3AE  C01F  FFD9         	movff	backward@mR,fsr2l
 10161  01C3B2  C020  FFDA         	movff	backward@mR+1,fsr2h
 10162  01C3B6  50DF               	movf	indf2,w,c
 10163  01C3B8  0F0A               	addlw	10
 10164  01C3BA  C01F  FFD9         	movff	backward@mR,fsr2l
 10165  01C3BE  C020  FFDA         	movff	backward@mR+1,fsr2h
 10166  01C3C2  6EDF               	movwf	indf2,c
 10167  01C3C4                     
 10168                           ;motor.c: 177:         setMotorPWM(mL);
 10169  01C3C4  C01D  F00E         	movff	backward@mL,setMotorPWM@m
 10170  01C3C8  C01E  F00F         	movff	backward@mL+1,setMotorPWM@m+1
 10171  01C3CC  ECBE  F0EA         	call	_setMotorPWM	;wreg free
 10172  01C3D0                     
 10173                           ;motor.c: 178:         setMotorPWM(mR);
 10174  01C3D0  C01F  F00E         	movff	backward@mR,setMotorPWM@m
 10175  01C3D4  C020  F00F         	movff	backward@mR+1,setMotorPWM@m+1
 10176  01C3D8  ECBE  F0EA         	call	_setMotorPWM	;wreg free
 10177  01C3DC                     
 10178                           ;motor.c: 179:         _delay((unsigned long)((250)*(64000000/4000.0)));
 10179  01C3DC  0E15               	movlw	21
 10180  01C3DE  6E22               	movwf	(??_backward+1)^0,c
 10181  01C3E0  0E4B               	movlw	75
 10182  01C3E2  6E21               	movwf	??_backward^0,c
 10183  01C3E4  0EBE               	movlw	190
 10184  01C3E6                     u4397:
 10185  01C3E6  2EE8               	decfsz	wreg,f,c
 10186  01C3E8  D7FE               	bra	u4397
 10187  01C3EA  2E21               	decfsz	??_backward^0,f,c
 10188  01C3EC  D7FC               	bra	u4397
 10189  01C3EE  2E22               	decfsz	(??_backward+1)^0,f,c
 10190  01C3F0  D7FA               	bra	u4397
 10191  01C3F2  D000               	nop2	
 10192  01C3F4                     l3112:
 10193                           
 10194                           ;motor.c: 174:    while (mL->power<90 && mR->power<90){
 10195  01C3F4  C01D  FFD9         	movff	backward@mL,fsr2l
 10196  01C3F8  C01E  FFDA         	movff	backward@mL+1,fsr2h
 10197  01C3FC  0E5A               	movlw	90
 10198  01C3FE  60DF               	cpfslt	indf2,c
 10199  01C400  EF04  F0E2         	goto	u2221
 10200  01C404  EF06  F0E2         	goto	u2220
 10201  01C408                     u2221:
 10202  01C408  EF12  F0E2         	goto	l3116
 10203  01C40C                     u2220:
 10204  01C40C  C01F  FFD9         	movff	backward@mR,fsr2l
 10205  01C410  C020  FFDA         	movff	backward@mR+1,fsr2h
 10206  01C414  0E59               	movlw	89
 10207  01C416  64DF               	cpfsgt	indf2,c
 10208  01C418  EF10  F0E2         	goto	u2231
 10209  01C41C  EF12  F0E2         	goto	u2230
 10210  01C420                     u2231:
 10211  01C420  EFCC  F0E1         	goto	l3104
 10212  01C424                     u2230:
 10213  01C424                     l3116:
 10214                           
 10215                           ;motor.c: 181:     stop(mL,mR);
 10216  01C424  C01D  F019         	movff	backward@mL,stop@mL
 10217  01C428  C01E  F01A         	movff	backward@mL+1,stop@mL+1
 10218  01C42C  C01F  F01B         	movff	backward@mR,stop@mR
 10219  01C430  C020  F01C         	movff	backward@mR+1,stop@mR+1
 10220  01C434  EC8C  F0E2         	call	_stop	;wreg free
 10221  01C438  0012               	return		;funcret
 10222  01C43A                     __end_of_backward:
 10223                           	callstack 0
 10224                           
 10225 ;; *************** function _orangeAction *****************
 10226 ;; Defined at:
 10227 ;;		line 123 in file "action.c"
 10228 ;; Parameters:    Size  Location     Type
 10229 ;;  reverse         1    wreg     unsigned char 
 10230 ;;  mL              2   34[COMRAM] PTR struct motor
 10231 ;;		 -> main@motorL(9), 
 10232 ;;  mR              2   36[COMRAM] PTR struct motor
 10233 ;;		 -> main@motorR(9), 
 10234 ;; Auto vars:     Size  Location     Type
 10235 ;;  reverse         1   40[COMRAM] unsigned char 
 10236 ;; Return value:  Size  Location     Type
 10237 ;;                  1    wreg      void 
 10238 ;; Registers used:
 10239 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10240 ;; Tracked objects:
 10241 ;;		On entry : 0/0
 10242 ;;		On exit  : 0/0
 10243 ;;		Unchanged: 0/0
 10244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10245 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10246 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10247 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10248 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10249 ;;Total ram usage:        7 bytes
 10250 ;; Hardware stack levels used: 1
 10251 ;; Hardware stack levels required when called: 4
 10252 ;; This function calls:
 10253 ;;		_adjustbackward
 10254 ;;		_turnACW45
 10255 ;;		_turnCW45
 10256 ;; This function is called by:
 10257 ;;		_colorCase
 10258 ;; This function uses a non-reentrant model
 10259 ;;
 10260                           
 10261                           	psect	text39
 10262  01CAC4                     __ptext39:
 10263                           	callstack 0
 10264  01CAC4                     _orangeAction:
 10265                           	callstack 25
 10266                           
 10267                           ;incstack = 0
 10268                           ;orangeAction@reverse stored from wreg
 10269  01CAC4  6E29               	movwf	orangeAction@reverse^0,c
 10270  01CAC6                     
 10271                           ;action.c: 124:     if (reverse==0){
 10272  01CAC6  5029               	movf	orangeAction@reverse^0,w,c
 10273  01CAC8  A4D8               	btfss	status,2,c
 10274  01CACA  EF69  F0E5         	goto	u2691
 10275  01CACE  EF6B  F0E5         	goto	u2690
 10276  01CAD2                     u2691:
 10277  01CAD2  EFB9  F0E5         	goto	l3486
 10278  01CAD6                     u2690:
 10279  01CAD6                     
 10280                           ;action.c: 125:         _delay((unsigned long)((1000)*(64000000/4000.0)));
 10281  01CAD6  0E52               	movlw	82
 10282  01CAD8  6E28               	movwf	(??_orangeAction+1)^0,c
 10283  01CADA  0E2B               	movlw	43
 10284  01CADC  6E27               	movwf	??_orangeAction^0,c
 10285  01CADE  0E00               	movlw	0
 10286  01CAE0                     u4407:
 10287  01CAE0  2EE8               	decfsz	wreg,f,c
 10288  01CAE2  D7FE               	bra	u4407
 10289  01CAE4  2E27               	decfsz	??_orangeAction^0,f,c
 10290  01CAE6  D7FC               	bra	u4407
 10291  01CAE8  2E28               	decfsz	(??_orangeAction+1)^0,f,c
 10292  01CAEA  D7FA               	bra	u4407
 10293  01CAEC  D000               	nop2	
 10294  01CAEE                     
 10295                           ;action.c: 126:         adjustbackward(mL,mR);
 10296  01CAEE  C023  F01D         	movff	orangeAction@mL,adjustbackward@mL
 10297  01CAF2  C024  F01E         	movff	orangeAction@mL+1,adjustbackward@mL+1
 10298  01CAF6  C025  F01F         	movff	orangeAction@mR,adjustbackward@mR
 10299  01CAFA  C026  F020         	movff	orangeAction@mR+1,adjustbackward@mR+1
 10300  01CAFE  EC32  F0DF         	call	_adjustbackward	;wreg free
 10301  01CB02                     
 10302                           ;action.c: 127:         _delay((unsigned long)((1000)*(64000000/4000.0)));
 10303  01CB02  0E52               	movlw	82
 10304  01CB04  6E28               	movwf	(??_orangeAction+1)^0,c
 10305  01CB06  0E2B               	movlw	43
 10306  01CB08  6E27               	movwf	??_orangeAction^0,c
 10307  01CB0A  0E00               	movlw	0
 10308  01CB0C                     u4417:
 10309  01CB0C  2EE8               	decfsz	wreg,f,c
 10310  01CB0E  D7FE               	bra	u4417
 10311  01CB10  2E27               	decfsz	??_orangeAction^0,f,c
 10312  01CB12  D7FC               	bra	u4417
 10313  01CB14  2E28               	decfsz	(??_orangeAction+1)^0,f,c
 10314  01CB16  D7FA               	bra	u4417
 10315  01CB18  D000               	nop2	
 10316  01CB1A                     
 10317                           ;action.c: 128:         turnCW45(mL,mR);
 10318  01CB1A  C023  F01D         	movff	orangeAction@mL,turnCW45@mL
 10319  01CB1E  C024  F01E         	movff	orangeAction@mL+1,turnCW45@mL+1
 10320  01CB22  C025  F01F         	movff	orangeAction@mR,turnCW45@mR
 10321  01CB26  C026  F020         	movff	orangeAction@mR+1,turnCW45@mR+1
 10322  01CB2A  ECD1  F0E0         	call	_turnCW45	;wreg free
 10323  01CB2E                     
 10324                           ;action.c: 129:         turnCW45(mL,mR);
 10325  01CB2E  C023  F01D         	movff	orangeAction@mL,turnCW45@mL
 10326  01CB32  C024  F01E         	movff	orangeAction@mL+1,turnCW45@mL+1
 10327  01CB36  C025  F01F         	movff	orangeAction@mR,turnCW45@mR
 10328  01CB3A  C026  F020         	movff	orangeAction@mR+1,turnCW45@mR+1
 10329  01CB3E  ECD1  F0E0         	call	_turnCW45	;wreg free
 10330  01CB42                     
 10331                           ;action.c: 130:         turnCW45(mL,mR);
 10332  01CB42  C023  F01D         	movff	orangeAction@mL,turnCW45@mL
 10333  01CB46  C024  F01E         	movff	orangeAction@mL+1,turnCW45@mL+1
 10334  01CB4A  C025  F01F         	movff	orangeAction@mR,turnCW45@mR
 10335  01CB4E  C026  F020         	movff	orangeAction@mR+1,turnCW45@mR+1
 10336  01CB52  ECD1  F0E0         	call	_turnCW45	;wreg free
 10337  01CB56                     l3484:
 10338                           
 10339                           ;action.c: 131:         _delay((unsigned long)((1000)*(64000000/4000.0)));
 10340  01CB56  0E52               	movlw	82
 10341  01CB58  6E28               	movwf	(??_orangeAction+1)^0,c
 10342  01CB5A  0E2B               	movlw	43
 10343  01CB5C  6E27               	movwf	??_orangeAction^0,c
 10344  01CB5E  0E00               	movlw	0
 10345  01CB60                     u4427:
 10346  01CB60  2EE8               	decfsz	wreg,f,c
 10347  01CB62  D7FE               	bra	u4427
 10348  01CB64  2E27               	decfsz	??_orangeAction^0,f,c
 10349  01CB66  D7FC               	bra	u4427
 10350  01CB68  2E28               	decfsz	(??_orangeAction+1)^0,f,c
 10351  01CB6A  D7FA               	bra	u4427
 10352  01CB6C  D000               	nop2	
 10353                           
 10354                           ;action.c: 132:     }
 10355  01CB6E  EFE3  F0E5         	goto	l479
 10356  01CB72                     l3486:
 10357                           
 10358                           ;action.c: 134:         turnACW45(mL,mR);
 10359  01CB72  C023  F01D         	movff	orangeAction@mL,turnACW45@mL
 10360  01CB76  C024  F01E         	movff	orangeAction@mL+1,turnACW45@mL+1
 10361  01CB7A  C025  F01F         	movff	orangeAction@mR,turnACW45@mR
 10362  01CB7E  C026  F020         	movff	orangeAction@mR+1,turnACW45@mR+1
 10363  01CB82  EC63  F0E0         	call	_turnACW45	;wreg free
 10364                           
 10365                           ;action.c: 135:         turnACW45(mL,mR);
 10366  01CB86  C023  F01D         	movff	orangeAction@mL,turnACW45@mL
 10367  01CB8A  C024  F01E         	movff	orangeAction@mL+1,turnACW45@mL+1
 10368  01CB8E  C025  F01F         	movff	orangeAction@mR,turnACW45@mR
 10369  01CB92  C026  F020         	movff	orangeAction@mR+1,turnACW45@mR+1
 10370  01CB96  EC63  F0E0         	call	_turnACW45	;wreg free
 10371                           
 10372                           ;action.c: 136:         turnACW45(mL,mR);
 10373  01CB9A  C023  F01D         	movff	orangeAction@mL,turnACW45@mL
 10374  01CB9E  C024  F01E         	movff	orangeAction@mL+1,turnACW45@mL+1
 10375  01CBA2  C025  F01F         	movff	orangeAction@mR,turnACW45@mR
 10376  01CBA6  C026  F020         	movff	orangeAction@mR+1,turnACW45@mR+1
 10377  01CBAA  EC63  F0E0         	call	_turnACW45	;wreg free
 10378                           
 10379                           ;action.c: 137:         adjustbackward(mL,mR);
 10380  01CBAE  C023  F01D         	movff	orangeAction@mL,adjustbackward@mL
 10381  01CBB2  C024  F01E         	movff	orangeAction@mL+1,adjustbackward@mL+1
 10382  01CBB6  C025  F01F         	movff	orangeAction@mR,adjustbackward@mR
 10383  01CBBA  C026  F020         	movff	orangeAction@mR+1,adjustbackward@mR+1
 10384  01CBBE  EC32  F0DF         	call	_adjustbackward	;wreg free
 10385  01CBC2  EFAB  F0E5         	goto	l3484
 10386  01CBC6                     l479:
 10387  01CBC6  0012               	return		;funcret
 10388  01CBC8                     __end_of_orangeAction:
 10389                           	callstack 0
 10390                           
 10391 ;; *************** function _nullAction *****************
 10392 ;; Defined at:
 10393 ;;		line 11 in file "action.c"
 10394 ;; Parameters:    Size  Location     Type
 10395 ;;  mL              2   28[COMRAM] PTR struct motor
 10396 ;;		 -> main@motorL(9), 
 10397 ;;  mR              2   30[COMRAM] PTR struct motor
 10398 ;;		 -> main@motorR(9), 
 10399 ;; Auto vars:     Size  Location     Type
 10400 ;;		None
 10401 ;; Return value:  Size  Location     Type
 10402 ;;                  1    wreg      void 
 10403 ;; Registers used:
 10404 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10405 ;; Tracked objects:
 10406 ;;		On entry : 0/0
 10407 ;;		On exit  : 0/0
 10408 ;;		Unchanged: 0/0
 10409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10410 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10413 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10414 ;;Total ram usage:        4 bytes
 10415 ;; Hardware stack levels used: 1
 10416 ;; Hardware stack levels required when called: 3
 10417 ;; This function calls:
 10418 ;;		_stop
 10419 ;; This function is called by:
 10420 ;;		_colorCase
 10421 ;; This function uses a non-reentrant model
 10422 ;;
 10423                           
 10424                           	psect	text40
 10425  01B988                     __ptext40:
 10426                           	callstack 0
 10427  01B988                     _nullAction:
 10428                           	callstack 26
 10429  01B988                     
 10430                           ;action.c: 12:     stop(mL,mR);
 10431  01B988  C01D  F019         	movff	nullAction@mL,stop@mL
 10432  01B98C  C01E  F01A         	movff	nullAction@mL+1,stop@mL+1
 10433  01B990  C01F  F01B         	movff	nullAction@mR,stop@mR
 10434  01B994  C020  F01C         	movff	nullAction@mR+1,stop@mR+1
 10435  01B998  EC8C  F0E2         	call	_stop	;wreg free
 10436  01B99C  0012               	return		;funcret
 10437  01B99E                     __end_of_nullAction:
 10438                           	callstack 0
 10439                           
 10440 ;; *************** function _lightBlueAction *****************
 10441 ;; Defined at:
 10442 ;;		line 146 in file "action.c"
 10443 ;; Parameters:    Size  Location     Type
 10444 ;;  reverse         1    wreg     unsigned char 
 10445 ;;  mL              2   34[COMRAM] PTR struct motor
 10446 ;;		 -> main@motorL(9), 
 10447 ;;  mR              2   36[COMRAM] PTR struct motor
 10448 ;;		 -> main@motorR(9), 
 10449 ;; Auto vars:     Size  Location     Type
 10450 ;;  reverse         1   40[COMRAM] unsigned char 
 10451 ;; Return value:  Size  Location     Type
 10452 ;;                  1    wreg      void 
 10453 ;; Registers used:
 10454 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10455 ;; Tracked objects:
 10456 ;;		On entry : 0/0
 10457 ;;		On exit  : 0/0
 10458 ;;		Unchanged: 0/0
 10459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10460 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10461 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10462 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10463 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10464 ;;Total ram usage:        7 bytes
 10465 ;; Hardware stack levels used: 1
 10466 ;; Hardware stack levels required when called: 4
 10467 ;; This function calls:
 10468 ;;		_adjustbackward
 10469 ;;		_turnACW45
 10470 ;;		_turnCW45
 10471 ;; This function is called by:
 10472 ;;		_colorCase
 10473 ;; This function uses a non-reentrant model
 10474 ;;
 10475                           
 10476                           	psect	text41
 10477  01C9C0                     __ptext41:
 10478                           	callstack 0
 10479  01C9C0                     _lightBlueAction:
 10480                           	callstack 25
 10481                           
 10482                           ;incstack = 0
 10483                           ;lightBlueAction@reverse stored from wreg
 10484  01C9C0  6E29               	movwf	lightBlueAction@reverse^0,c
 10485  01C9C2                     
 10486                           ;action.c: 147:     if (reverse==0){
 10487  01C9C2  5029               	movf	lightBlueAction@reverse^0,w,c
 10488  01C9C4  A4D8               	btfss	status,2,c
 10489  01C9C6  EFE7  F0E4         	goto	u2701
 10490  01C9CA  EFE9  F0E4         	goto	u2700
 10491  01C9CE                     u2701:
 10492  01C9CE  EF37  F0E5         	goto	l3506
 10493  01C9D2                     u2700:
 10494  01C9D2                     
 10495                           ;action.c: 148:         _delay((unsigned long)((1000)*(64000000/4000.0)));
 10496  01C9D2  0E52               	movlw	82
 10497  01C9D4  6E28               	movwf	(??_lightBlueAction+1)^0,c
 10498  01C9D6  0E2B               	movlw	43
 10499  01C9D8  6E27               	movwf	??_lightBlueAction^0,c
 10500  01C9DA  0E00               	movlw	0
 10501  01C9DC                     u4437:
 10502  01C9DC  2EE8               	decfsz	wreg,f,c
 10503  01C9DE  D7FE               	bra	u4437
 10504  01C9E0  2E27               	decfsz	??_lightBlueAction^0,f,c
 10505  01C9E2  D7FC               	bra	u4437
 10506  01C9E4  2E28               	decfsz	(??_lightBlueAction+1)^0,f,c
 10507  01C9E6  D7FA               	bra	u4437
 10508  01C9E8  D000               	nop2	
 10509  01C9EA                     
 10510                           ;action.c: 149:         adjustbackward(mL,mR);
 10511  01C9EA  C023  F01D         	movff	lightBlueAction@mL,adjustbackward@mL
 10512  01C9EE  C024  F01E         	movff	lightBlueAction@mL+1,adjustbackward@mL+1
 10513  01C9F2  C025  F01F         	movff	lightBlueAction@mR,adjustbackward@mR
 10514  01C9F6  C026  F020         	movff	lightBlueAction@mR+1,adjustbackward@mR+1
 10515  01C9FA  EC32  F0DF         	call	_adjustbackward	;wreg free
 10516  01C9FE                     
 10517                           ;action.c: 150:         _delay((unsigned long)((1000)*(64000000/4000.0)));
 10518  01C9FE  0E52               	movlw	82
 10519  01CA00  6E28               	movwf	(??_lightBlueAction+1)^0,c
 10520  01CA02  0E2B               	movlw	43
 10521  01CA04  6E27               	movwf	??_lightBlueAction^0,c
 10522  01CA06  0E00               	movlw	0
 10523  01CA08                     u4447:
 10524  01CA08  2EE8               	decfsz	wreg,f,c
 10525  01CA0A  D7FE               	bra	u4447
 10526  01CA0C  2E27               	decfsz	??_lightBlueAction^0,f,c
 10527  01CA0E  D7FC               	bra	u4447
 10528  01CA10  2E28               	decfsz	(??_lightBlueAction+1)^0,f,c
 10529  01CA12  D7FA               	bra	u4447
 10530  01CA14  D000               	nop2	
 10531  01CA16                     
 10532                           ;action.c: 151:         turnACW45(mL,mR);
 10533  01CA16  C023  F01D         	movff	lightBlueAction@mL,turnACW45@mL
 10534  01CA1A  C024  F01E         	movff	lightBlueAction@mL+1,turnACW45@mL+1
 10535  01CA1E  C025  F01F         	movff	lightBlueAction@mR,turnACW45@mR
 10536  01CA22  C026  F020         	movff	lightBlueAction@mR+1,turnACW45@mR+1
 10537  01CA26  EC63  F0E0         	call	_turnACW45	;wreg free
 10538  01CA2A                     
 10539                           ;action.c: 152:         turnACW45(mL,mR);
 10540  01CA2A  C023  F01D         	movff	lightBlueAction@mL,turnACW45@mL
 10541  01CA2E  C024  F01E         	movff	lightBlueAction@mL+1,turnACW45@mL+1
 10542  01CA32  C025  F01F         	movff	lightBlueAction@mR,turnACW45@mR
 10543  01CA36  C026  F020         	movff	lightBlueAction@mR+1,turnACW45@mR+1
 10544  01CA3A  EC63  F0E0         	call	_turnACW45	;wreg free
 10545  01CA3E                     
 10546                           ;action.c: 153:         turnACW45(mL,mR);
 10547  01CA3E  C023  F01D         	movff	lightBlueAction@mL,turnACW45@mL
 10548  01CA42  C024  F01E         	movff	lightBlueAction@mL+1,turnACW45@mL+1
 10549  01CA46  C025  F01F         	movff	lightBlueAction@mR,turnACW45@mR
 10550  01CA4A  C026  F020         	movff	lightBlueAction@mR+1,turnACW45@mR+1
 10551  01CA4E  EC63  F0E0         	call	_turnACW45	;wreg free
 10552  01CA52                     l3504:
 10553                           
 10554                           ;action.c: 154:         _delay((unsigned long)((1000)*(64000000/4000.0)));
 10555  01CA52  0E52               	movlw	82
 10556  01CA54  6E28               	movwf	(??_lightBlueAction+1)^0,c
 10557  01CA56  0E2B               	movlw	43
 10558  01CA58  6E27               	movwf	??_lightBlueAction^0,c
 10559  01CA5A  0E00               	movlw	0
 10560  01CA5C                     u4457:
 10561  01CA5C  2EE8               	decfsz	wreg,f,c
 10562  01CA5E  D7FE               	bra	u4457
 10563  01CA60  2E27               	decfsz	??_lightBlueAction^0,f,c
 10564  01CA62  D7FC               	bra	u4457
 10565  01CA64  2E28               	decfsz	(??_lightBlueAction+1)^0,f,c
 10566  01CA66  D7FA               	bra	u4457
 10567  01CA68  D000               	nop2	
 10568                           
 10569                           ;action.c: 155:     }
 10570  01CA6A  EF61  F0E5         	goto	l484
 10571  01CA6E                     l3506:
 10572                           
 10573                           ;action.c: 157:         turnCW45(mL,mR);
 10574  01CA6E  C023  F01D         	movff	lightBlueAction@mL,turnCW45@mL
 10575  01CA72  C024  F01E         	movff	lightBlueAction@mL+1,turnCW45@mL+1
 10576  01CA76  C025  F01F         	movff	lightBlueAction@mR,turnCW45@mR
 10577  01CA7A  C026  F020         	movff	lightBlueAction@mR+1,turnCW45@mR+1
 10578  01CA7E  ECD1  F0E0         	call	_turnCW45	;wreg free
 10579                           
 10580                           ;action.c: 158:         turnCW45(mL,mR);
 10581  01CA82  C023  F01D         	movff	lightBlueAction@mL,turnCW45@mL
 10582  01CA86  C024  F01E         	movff	lightBlueAction@mL+1,turnCW45@mL+1
 10583  01CA8A  C025  F01F         	movff	lightBlueAction@mR,turnCW45@mR
 10584  01CA8E  C026  F020         	movff	lightBlueAction@mR+1,turnCW45@mR+1
 10585  01CA92  ECD1  F0E0         	call	_turnCW45	;wreg free
 10586                           
 10587                           ;action.c: 159:         turnCW45(mL,mR);
 10588  01CA96  C023  F01D         	movff	lightBlueAction@mL,turnCW45@mL
 10589  01CA9A  C024  F01E         	movff	lightBlueAction@mL+1,turnCW45@mL+1
 10590  01CA9E  C025  F01F         	movff	lightBlueAction@mR,turnCW45@mR
 10591  01CAA2  C026  F020         	movff	lightBlueAction@mR+1,turnCW45@mR+1
 10592  01CAA6  ECD1  F0E0         	call	_turnCW45	;wreg free
 10593                           
 10594                           ;action.c: 160:         adjustbackward(mL,mR);
 10595  01CAAA  C023  F01D         	movff	lightBlueAction@mL,adjustbackward@mL
 10596  01CAAE  C024  F01E         	movff	lightBlueAction@mL+1,adjustbackward@mL+1
 10597  01CAB2  C025  F01F         	movff	lightBlueAction@mR,adjustbackward@mR
 10598  01CAB6  C026  F020         	movff	lightBlueAction@mR+1,adjustbackward@mR+1
 10599  01CABA  EC32  F0DF         	call	_adjustbackward	;wreg free
 10600  01CABE  EF29  F0E5         	goto	l3504
 10601  01CAC2                     l484:
 10602  01CAC2  0012               	return		;funcret
 10603  01CAC4                     __end_of_lightBlueAction:
 10604                           	callstack 0
 10605                           
 10606 ;; *************** function _greenAction *****************
 10607 ;; Defined at:
 10608 ;;		line 39 in file "action.c"
 10609 ;; Parameters:    Size  Location     Type
 10610 ;;  reverse         1    wreg     unsigned char 
 10611 ;;  mL              2   34[COMRAM] PTR struct motor
 10612 ;;		 -> main@motorL(9), 
 10613 ;;  mR              2   36[COMRAM] PTR struct motor
 10614 ;;		 -> main@motorR(9), 
 10615 ;; Auto vars:     Size  Location     Type
 10616 ;;  reverse         1   40[COMRAM] unsigned char 
 10617 ;; Return value:  Size  Location     Type
 10618 ;;                  1    wreg      void 
 10619 ;; Registers used:
 10620 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10621 ;; Tracked objects:
 10622 ;;		On entry : 0/0
 10623 ;;		On exit  : 0/0
 10624 ;;		Unchanged: 0/0
 10625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10626 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10627 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10628 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10629 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10630 ;;Total ram usage:        7 bytes
 10631 ;; Hardware stack levels used: 1
 10632 ;; Hardware stack levels required when called: 4
 10633 ;; This function calls:
 10634 ;;		_adjustbackward
 10635 ;;		_turnACW45
 10636 ;;		_turnCW45
 10637 ;; This function is called by:
 10638 ;;		_colorCase
 10639 ;; This function uses a non-reentrant model
 10640 ;;
 10641                           
 10642                           	psect	text42
 10643  01C6EC                     __ptext42:
 10644                           	callstack 0
 10645  01C6EC                     _greenAction:
 10646                           	callstack 25
 10647                           
 10648                           ;incstack = 0
 10649                           ;greenAction@reverse stored from wreg
 10650  01C6EC  6E29               	movwf	greenAction@reverse^0,c
 10651  01C6EE                     
 10652                           ;action.c: 40:     if (reverse ==0){
 10653  01C6EE  5029               	movf	greenAction@reverse^0,w,c
 10654  01C6F0  A4D8               	btfss	status,2,c
 10655  01C6F2  EF7D  F0E3         	goto	u2661
 10656  01C6F6  EF7F  F0E3         	goto	u2660
 10657  01C6FA                     u2661:
 10658  01C6FA  EFC3  F0E3         	goto	l3398
 10659  01C6FE                     u2660:
 10660  01C6FE                     
 10661                           ;action.c: 41:         _delay((unsigned long)((1000)*(64000000/4000.0)));
 10662  01C6FE  0E52               	movlw	82
 10663  01C700  6E28               	movwf	(??_greenAction+1)^0,c
 10664  01C702  0E2B               	movlw	43
 10665  01C704  6E27               	movwf	??_greenAction^0,c
 10666  01C706  0E00               	movlw	0
 10667  01C708                     u4467:
 10668  01C708  2EE8               	decfsz	wreg,f,c
 10669  01C70A  D7FE               	bra	u4467
 10670  01C70C  2E27               	decfsz	??_greenAction^0,f,c
 10671  01C70E  D7FC               	bra	u4467
 10672  01C710  2E28               	decfsz	(??_greenAction+1)^0,f,c
 10673  01C712  D7FA               	bra	u4467
 10674  01C714  D000               	nop2	
 10675  01C716                     
 10676                           ;action.c: 42:         adjustbackward(mL,mR);
 10677  01C716  C023  F01D         	movff	greenAction@mL,adjustbackward@mL
 10678  01C71A  C024  F01E         	movff	greenAction@mL+1,adjustbackward@mL+1
 10679  01C71E  C025  F01F         	movff	greenAction@mR,adjustbackward@mR
 10680  01C722  C026  F020         	movff	greenAction@mR+1,adjustbackward@mR+1
 10681  01C726  EC32  F0DF         	call	_adjustbackward	;wreg free
 10682  01C72A                     
 10683                           ;action.c: 43:         _delay((unsigned long)((1000)*(64000000/4000.0)));
 10684  01C72A  0E52               	movlw	82
 10685  01C72C  6E28               	movwf	(??_greenAction+1)^0,c
 10686  01C72E  0E2B               	movlw	43
 10687  01C730  6E27               	movwf	??_greenAction^0,c
 10688  01C732  0E00               	movlw	0
 10689  01C734                     u4477:
 10690  01C734  2EE8               	decfsz	wreg,f,c
 10691  01C736  D7FE               	bra	u4477
 10692  01C738  2E27               	decfsz	??_greenAction^0,f,c
 10693  01C73A  D7FC               	bra	u4477
 10694  01C73C  2E28               	decfsz	(??_greenAction+1)^0,f,c
 10695  01C73E  D7FA               	bra	u4477
 10696  01C740  D000               	nop2	
 10697  01C742                     
 10698                           ;action.c: 44:         turnACW45(mL,mR);
 10699  01C742  C023  F01D         	movff	greenAction@mL,turnACW45@mL
 10700  01C746  C024  F01E         	movff	greenAction@mL+1,turnACW45@mL+1
 10701  01C74A  C025  F01F         	movff	greenAction@mR,turnACW45@mR
 10702  01C74E  C026  F020         	movff	greenAction@mR+1,turnACW45@mR+1
 10703  01C752  EC63  F0E0         	call	_turnACW45	;wreg free
 10704  01C756                     
 10705                           ;action.c: 45:         turnACW45(mL,mR);
 10706  01C756  C023  F01D         	movff	greenAction@mL,turnACW45@mL
 10707  01C75A  C024  F01E         	movff	greenAction@mL+1,turnACW45@mL+1
 10708  01C75E  C025  F01F         	movff	greenAction@mR,turnACW45@mR
 10709  01C762  C026  F020         	movff	greenAction@mR+1,turnACW45@mR+1
 10710  01C766  EC63  F0E0         	call	_turnACW45	;wreg free
 10711  01C76A                     l3396:
 10712                           
 10713                           ;action.c: 46:         _delay((unsigned long)((1000)*(64000000/4000.0)));
 10714  01C76A  0E52               	movlw	82
 10715  01C76C  6E28               	movwf	(??_greenAction+1)^0,c
 10716  01C76E  0E2B               	movlw	43
 10717  01C770  6E27               	movwf	??_greenAction^0,c
 10718  01C772  0E00               	movlw	0
 10719  01C774                     u4487:
 10720  01C774  2EE8               	decfsz	wreg,f,c
 10721  01C776  D7FE               	bra	u4487
 10722  01C778  2E27               	decfsz	??_greenAction^0,f,c
 10723  01C77A  D7FC               	bra	u4487
 10724  01C77C  2E28               	decfsz	(??_greenAction+1)^0,f,c
 10725  01C77E  D7FA               	bra	u4487
 10726  01C780  D000               	nop2	
 10727                           
 10728                           ;action.c: 47:     }
 10729  01C782  EFED  F0E3         	goto	l461
 10730  01C786                     l3398:
 10731                           
 10732                           ;action.c: 49:         turnCW45(mL,mR);
 10733  01C786  C023  F01D         	movff	greenAction@mL,turnCW45@mL
 10734  01C78A  C024  F01E         	movff	greenAction@mL+1,turnCW45@mL+1
 10735  01C78E  C025  F01F         	movff	greenAction@mR,turnCW45@mR
 10736  01C792  C026  F020         	movff	greenAction@mR+1,turnCW45@mR+1
 10737  01C796  ECD1  F0E0         	call	_turnCW45	;wreg free
 10738                           
 10739                           ;action.c: 50:         turnCW45(mL,mR);
 10740  01C79A  C023  F01D         	movff	greenAction@mL,turnCW45@mL
 10741  01C79E  C024  F01E         	movff	greenAction@mL+1,turnCW45@mL+1
 10742  01C7A2  C025  F01F         	movff	greenAction@mR,turnCW45@mR
 10743  01C7A6  C026  F020         	movff	greenAction@mR+1,turnCW45@mR+1
 10744  01C7AA  ECD1  F0E0         	call	_turnCW45	;wreg free
 10745                           
 10746                           ;action.c: 51:         adjustbackward(mL,mR);
 10747  01C7AE  C023  F01D         	movff	greenAction@mL,adjustbackward@mL
 10748  01C7B2  C024  F01E         	movff	greenAction@mL+1,adjustbackward@mL+1
 10749  01C7B6  C025  F01F         	movff	greenAction@mR,adjustbackward@mR
 10750  01C7BA  C026  F020         	movff	greenAction@mR+1,adjustbackward@mR+1
 10751  01C7BE  EC32  F0DF         	call	_adjustbackward	;wreg free
 10752                           
 10753                           ;action.c: 52:         adjustbackward(mL,mR);
 10754  01C7C2  C023  F01D         	movff	greenAction@mL,adjustbackward@mL
 10755  01C7C6  C024  F01E         	movff	greenAction@mL+1,adjustbackward@mL+1
 10756  01C7CA  C025  F01F         	movff	greenAction@mR,adjustbackward@mR
 10757  01C7CE  C026  F020         	movff	greenAction@mR+1,adjustbackward@mR+1
 10758  01C7D2  EC32  F0DF         	call	_adjustbackward	;wreg free
 10759  01C7D6  EFB5  F0E3         	goto	l3396
 10760  01C7DA                     l461:
 10761  01C7DA  0012               	return		;funcret
 10762  01C7DC                     __end_of_greenAction:
 10763                           	callstack 0
 10764                           
 10765 ;; *************** function _turnCW45 *****************
 10766 ;; Defined at:
 10767 ;;		line 93 in file "motor.c"
 10768 ;; Parameters:    Size  Location     Type
 10769 ;;  mL              2   28[COMRAM] PTR struct motor
 10770 ;;		 -> main@motorL(9), 
 10771 ;;  mR              2   30[COMRAM] PTR struct motor
 10772 ;;		 -> main@motorR(9), 
 10773 ;; Auto vars:     Size  Location     Type
 10774 ;;		None
 10775 ;; Return value:  Size  Location     Type
 10776 ;;                  1    wreg      void 
 10777 ;; Registers used:
 10778 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10779 ;; Tracked objects:
 10780 ;;		On entry : 0/0
 10781 ;;		On exit  : 0/0
 10782 ;;		Unchanged: 0/0
 10783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10784 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10786 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10787 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10788 ;;Total ram usage:        6 bytes
 10789 ;; Hardware stack levels used: 1
 10790 ;; Hardware stack levels required when called: 3
 10791 ;; This function calls:
 10792 ;;		_setMotorPWM
 10793 ;;		_stop
 10794 ;; This function is called by:
 10795 ;;		_redAction
 10796 ;;		_greenAction
 10797 ;;		_yellowAction
 10798 ;;		_pinkAction
 10799 ;;		_orangeAction
 10800 ;;		_lightBlueAction
 10801 ;; This function uses a non-reentrant model
 10802 ;;
 10803                           
 10804                           	psect	text43
 10805  01C1A2                     __ptext43:
 10806                           	callstack 0
 10807  01C1A2                     _turnCW45:
 10808                           	callstack 25
 10809  01C1A2                     
 10810                           ;motor.c: 93: void turnCW45(struct motor *mL, struct motor *mR);motor.c: 95: { mL->power
      +                           = 28;
 10811  01C1A2  C01D  FFD9         	movff	turnCW45@mL,fsr2l
 10812  01C1A6  C01E  FFDA         	movff	turnCW45@mL+1,fsr2h
 10813  01C1AA  0E1C               	movlw	28
 10814  01C1AC  6EDF               	movwf	indf2,c
 10815                           
 10816                           ;motor.c: 96:     mR->power = 29;
 10817  01C1AE  C01F  FFD9         	movff	turnCW45@mR,fsr2l
 10818  01C1B2  C020  FFDA         	movff	turnCW45@mR+1,fsr2h
 10819  01C1B6  0E1D               	movlw	29
 10820  01C1B8  6EDF               	movwf	indf2,c
 10821  01C1BA                     
 10822                           ;motor.c: 97:     mL->direction = 1;
 10823  01C1BA  EE20 F001          	lfsr	2,1
 10824  01C1BE  501D               	movf	turnCW45@mL^0,w,c
 10825  01C1C0  26D9               	addwf	fsr2l,f,c
 10826  01C1C2  501E               	movf	(turnCW45@mL+1)^0,w,c
 10827  01C1C4  22DA               	addwfc	fsr2h,f,c
 10828  01C1C6  0E01               	movlw	1
 10829  01C1C8  6EDF               	movwf	indf2,c
 10830  01C1CA                     
 10831                           ;motor.c: 98:     mR->direction = 0;
 10832  01C1CA  EE20 F001          	lfsr	2,1
 10833  01C1CE  501F               	movf	turnCW45@mR^0,w,c
 10834  01C1D0  26D9               	addwf	fsr2l,f,c
 10835  01C1D2  5020               	movf	(turnCW45@mR+1)^0,w,c
 10836  01C1D4  22DA               	addwfc	fsr2h,f,c
 10837  01C1D6  0E00               	movlw	0
 10838  01C1D8  6EDF               	movwf	indf2,c
 10839                           
 10840                           ;motor.c: 101:     while (mL->power<30 && mR->power<30){
 10841  01C1DA  EF1C  F0E1         	goto	l3052
 10842  01C1DE                     l3044:
 10843                           
 10844                           ;motor.c: 102:         mL->power = mL-> power +10 ;
 10845  01C1DE  C01D  FFD9         	movff	turnCW45@mL,fsr2l
 10846  01C1E2  C01E  FFDA         	movff	turnCW45@mL+1,fsr2h
 10847  01C1E6  50DF               	movf	indf2,w,c
 10848  01C1E8  0F0A               	addlw	10
 10849  01C1EA  C01D  FFD9         	movff	turnCW45@mL,fsr2l
 10850  01C1EE  C01E  FFDA         	movff	turnCW45@mL+1,fsr2h
 10851  01C1F2  6EDF               	movwf	indf2,c
 10852                           
 10853                           ;motor.c: 103:         mR->power = mR-> power +10;
 10854  01C1F4  C01F  FFD9         	movff	turnCW45@mR,fsr2l
 10855  01C1F8  C020  FFDA         	movff	turnCW45@mR+1,fsr2h
 10856  01C1FC  50DF               	movf	indf2,w,c
 10857  01C1FE  0F0A               	addlw	10
 10858  01C200  C01F  FFD9         	movff	turnCW45@mR,fsr2l
 10859  01C204  C020  FFDA         	movff	turnCW45@mR+1,fsr2h
 10860  01C208  6EDF               	movwf	indf2,c
 10861  01C20A                     
 10862                           ;motor.c: 104:         setMotorPWM(mL);
 10863  01C20A  C01D  F00E         	movff	turnCW45@mL,setMotorPWM@m
 10864  01C20E  C01E  F00F         	movff	turnCW45@mL+1,setMotorPWM@m+1
 10865  01C212  ECBE  F0EA         	call	_setMotorPWM	;wreg free
 10866  01C216                     
 10867                           ;motor.c: 105:         setMotorPWM(mR);
 10868  01C216  C01F  F00E         	movff	turnCW45@mR,setMotorPWM@m
 10869  01C21A  C020  F00F         	movff	turnCW45@mR+1,setMotorPWM@m+1
 10870  01C21E  ECBE  F0EA         	call	_setMotorPWM	;wreg free
 10871  01C222                     
 10872                           ;motor.c: 106:         _delay((unsigned long)((300)*(64000000/4000.0)));
 10873  01C222  0E19               	movlw	25
 10874  01C224  6E22               	movwf	(??_turnCW45+1)^0,c
 10875  01C226  0E5A               	movlw	90
 10876  01C228  6E21               	movwf	??_turnCW45^0,c
 10877  01C22A  0EB2               	movlw	178
 10878  01C22C                     u4497:
 10879  01C22C  2EE8               	decfsz	wreg,f,c
 10880  01C22E  D7FE               	bra	u4497
 10881  01C230  2E21               	decfsz	??_turnCW45^0,f,c
 10882  01C232  D7FC               	bra	u4497
 10883  01C234  2E22               	decfsz	(??_turnCW45+1)^0,f,c
 10884  01C236  D7FA               	bra	u4497
 10885  01C238                     l3052:
 10886                           
 10887                           ;motor.c: 101:     while (mL->power<30 && mR->power<30){
 10888  01C238  C01D  FFD9         	movff	turnCW45@mL,fsr2l
 10889  01C23C  C01E  FFDA         	movff	turnCW45@mL+1,fsr2h
 10890  01C240  0E1E               	movlw	30
 10891  01C242  60DF               	cpfslt	indf2,c
 10892  01C244  EF26  F0E1         	goto	u2161
 10893  01C248  EF28  F0E1         	goto	u2160
 10894  01C24C                     u2161:
 10895  01C24C  EF34  F0E1         	goto	l3056
 10896  01C250                     u2160:
 10897  01C250  C01F  FFD9         	movff	turnCW45@mR,fsr2l
 10898  01C254  C020  FFDA         	movff	turnCW45@mR+1,fsr2h
 10899  01C258  0E1D               	movlw	29
 10900  01C25A  64DF               	cpfsgt	indf2,c
 10901  01C25C  EF32  F0E1         	goto	u2171
 10902  01C260  EF34  F0E1         	goto	u2170
 10903  01C264                     u2171:
 10904  01C264  EFEF  F0E0         	goto	l3044
 10905  01C268                     u2170:
 10906  01C268                     l3056:
 10907                           
 10908                           ;motor.c: 108:     stop(mL,mR);
 10909  01C268  C01D  F019         	movff	turnCW45@mL,stop@mL
 10910  01C26C  C01E  F01A         	movff	turnCW45@mL+1,stop@mL+1
 10911  01C270  C01F  F01B         	movff	turnCW45@mR,stop@mR
 10912  01C274  C020  F01C         	movff	turnCW45@mR+1,stop@mR+1
 10913  01C278  EC8C  F0E2         	call	_stop	;wreg free
 10914  01C27C  0012               	return		;funcret
 10915  01C27E                     __end_of_turnCW45:
 10916                           	callstack 0
 10917                           
 10918 ;; *************** function _turnACW45 *****************
 10919 ;; Defined at:
 10920 ;;		line 113 in file "motor.c"
 10921 ;; Parameters:    Size  Location     Type
 10922 ;;  mL              2   28[COMRAM] PTR struct motor
 10923 ;;		 -> main@motorL(9), 
 10924 ;;  mR              2   30[COMRAM] PTR struct motor
 10925 ;;		 -> main@motorR(9), 
 10926 ;; Auto vars:     Size  Location     Type
 10927 ;;		None
 10928 ;; Return value:  Size  Location     Type
 10929 ;;                  1    wreg      void 
 10930 ;; Registers used:
 10931 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10932 ;; Tracked objects:
 10933 ;;		On entry : 0/0
 10934 ;;		On exit  : 0/0
 10935 ;;		Unchanged: 0/0
 10936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 10937 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10939 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10940 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10941 ;;Total ram usage:        6 bytes
 10942 ;; Hardware stack levels used: 1
 10943 ;; Hardware stack levels required when called: 3
 10944 ;; This function calls:
 10945 ;;		_setMotorPWM
 10946 ;;		_stop
 10947 ;; This function is called by:
 10948 ;;		_redAction
 10949 ;;		_greenAction
 10950 ;;		_yellowAction
 10951 ;;		_pinkAction
 10952 ;;		_orangeAction
 10953 ;;		_lightBlueAction
 10954 ;; This function uses a non-reentrant model
 10955 ;;
 10956                           
 10957                           	psect	text44
 10958  01C0C6                     __ptext44:
 10959                           	callstack 0
 10960  01C0C6                     _turnACW45:
 10961                           	callstack 25
 10962  01C0C6                     
 10963                           ;motor.c: 113: void turnACW45(struct motor *mL, struct motor *mR);motor.c: 114: { mL->po
      +                          wer = 29;
 10964  01C0C6  C01D  FFD9         	movff	turnACW45@mL,fsr2l
 10965  01C0CA  C01E  FFDA         	movff	turnACW45@mL+1,fsr2h
 10966  01C0CE  0E1D               	movlw	29
 10967  01C0D0  6EDF               	movwf	indf2,c
 10968                           
 10969                           ;motor.c: 115:     mR->power = 28;
 10970  01C0D2  C01F  FFD9         	movff	turnACW45@mR,fsr2l
 10971  01C0D6  C020  FFDA         	movff	turnACW45@mR+1,fsr2h
 10972  01C0DA  0E1C               	movlw	28
 10973  01C0DC  6EDF               	movwf	indf2,c
 10974  01C0DE                     
 10975                           ;motor.c: 116:     mL->direction = 0;
 10976  01C0DE  EE20 F001          	lfsr	2,1
 10977  01C0E2  501D               	movf	turnACW45@mL^0,w,c
 10978  01C0E4  26D9               	addwf	fsr2l,f,c
 10979  01C0E6  501E               	movf	(turnACW45@mL+1)^0,w,c
 10980  01C0E8  22DA               	addwfc	fsr2h,f,c
 10981  01C0EA  0E00               	movlw	0
 10982  01C0EC  6EDF               	movwf	indf2,c
 10983  01C0EE                     
 10984                           ;motor.c: 117:     mR->direction = 1;
 10985  01C0EE  EE20 F001          	lfsr	2,1
 10986  01C0F2  501F               	movf	turnACW45@mR^0,w,c
 10987  01C0F4  26D9               	addwf	fsr2l,f,c
 10988  01C0F6  5020               	movf	(turnACW45@mR+1)^0,w,c
 10989  01C0F8  22DA               	addwfc	fsr2h,f,c
 10990  01C0FA  0E01               	movlw	1
 10991  01C0FC  6EDF               	movwf	indf2,c
 10992                           
 10993                           ;motor.c: 119:     while (mL->power<30 && mR->power<30){
 10994  01C0FE  EFAE  F0E0         	goto	l3072
 10995  01C102                     l3064:
 10996                           
 10997                           ;motor.c: 120:         mL->power = mL->power +10 ;
 10998  01C102  C01D  FFD9         	movff	turnACW45@mL,fsr2l
 10999  01C106  C01E  FFDA         	movff	turnACW45@mL+1,fsr2h
 11000  01C10A  50DF               	movf	indf2,w,c
 11001  01C10C  0F0A               	addlw	10
 11002  01C10E  C01D  FFD9         	movff	turnACW45@mL,fsr2l
 11003  01C112  C01E  FFDA         	movff	turnACW45@mL+1,fsr2h
 11004  01C116  6EDF               	movwf	indf2,c
 11005                           
 11006                           ;motor.c: 121:         mR->power = mR->power +10;
 11007  01C118  C01F  FFD9         	movff	turnACW45@mR,fsr2l
 11008  01C11C  C020  FFDA         	movff	turnACW45@mR+1,fsr2h
 11009  01C120  50DF               	movf	indf2,w,c
 11010  01C122  0F0A               	addlw	10
 11011  01C124  C01F  FFD9         	movff	turnACW45@mR,fsr2l
 11012  01C128  C020  FFDA         	movff	turnACW45@mR+1,fsr2h
 11013  01C12C  6EDF               	movwf	indf2,c
 11014  01C12E                     
 11015                           ;motor.c: 122:         setMotorPWM(mL);
 11016  01C12E  C01D  F00E         	movff	turnACW45@mL,setMotorPWM@m
 11017  01C132  C01E  F00F         	movff	turnACW45@mL+1,setMotorPWM@m+1
 11018  01C136  ECBE  F0EA         	call	_setMotorPWM	;wreg free
 11019  01C13A                     
 11020                           ;motor.c: 123:         setMotorPWM(mR);
 11021  01C13A  C01F  F00E         	movff	turnACW45@mR,setMotorPWM@m
 11022  01C13E  C020  F00F         	movff	turnACW45@mR+1,setMotorPWM@m+1
 11023  01C142  ECBE  F0EA         	call	_setMotorPWM	;wreg free
 11024  01C146                     
 11025                           ;motor.c: 124:         _delay((unsigned long)((300)*(64000000/4000.0)));
 11026  01C146  0E19               	movlw	25
 11027  01C148  6E22               	movwf	(??_turnACW45+1)^0,c
 11028  01C14A  0E5A               	movlw	90
 11029  01C14C  6E21               	movwf	??_turnACW45^0,c
 11030  01C14E  0EB2               	movlw	178
 11031  01C150                     u4507:
 11032  01C150  2EE8               	decfsz	wreg,f,c
 11033  01C152  D7FE               	bra	u4507
 11034  01C154  2E21               	decfsz	??_turnACW45^0,f,c
 11035  01C156  D7FC               	bra	u4507
 11036  01C158  2E22               	decfsz	(??_turnACW45+1)^0,f,c
 11037  01C15A  D7FA               	bra	u4507
 11038  01C15C                     l3072:
 11039                           
 11040                           ;motor.c: 119:     while (mL->power<30 && mR->power<30){
 11041  01C15C  C01D  FFD9         	movff	turnACW45@mL,fsr2l
 11042  01C160  C01E  FFDA         	movff	turnACW45@mL+1,fsr2h
 11043  01C164  0E1E               	movlw	30
 11044  01C166  60DF               	cpfslt	indf2,c
 11045  01C168  EFB8  F0E0         	goto	u2181
 11046  01C16C  EFBA  F0E0         	goto	u2180
 11047  01C170                     u2181:
 11048  01C170  EFC6  F0E0         	goto	l3076
 11049  01C174                     u2180:
 11050  01C174  C01F  FFD9         	movff	turnACW45@mR,fsr2l
 11051  01C178  C020  FFDA         	movff	turnACW45@mR+1,fsr2h
 11052  01C17C  0E1D               	movlw	29
 11053  01C17E  64DF               	cpfsgt	indf2,c
 11054  01C180  EFC4  F0E0         	goto	u2191
 11055  01C184  EFC6  F0E0         	goto	u2190
 11056  01C188                     u2191:
 11057  01C188  EF81  F0E0         	goto	l3064
 11058  01C18C                     u2190:
 11059  01C18C                     l3076:
 11060                           
 11061                           ;motor.c: 126:     stop(mL,mR);
 11062  01C18C  C01D  F019         	movff	turnACW45@mL,stop@mL
 11063  01C190  C01E  F01A         	movff	turnACW45@mL+1,stop@mL+1
 11064  01C194  C01F  F01B         	movff	turnACW45@mR,stop@mR
 11065  01C198  C020  F01C         	movff	turnACW45@mR+1,stop@mR+1
 11066  01C19C  EC8C  F0E2         	call	_stop	;wreg free
 11067  01C1A0  0012               	return		;funcret
 11068  01C1A2                     __end_of_turnACW45:
 11069                           	callstack 0
 11070                           
 11071 ;; *************** function _blueAction *****************
 11072 ;; Defined at:
 11073 ;;		line 59 in file "action.c"
 11074 ;; Parameters:    Size  Location     Type
 11075 ;;  reverse         1    wreg     unsigned char 
 11076 ;;  mL              2   34[COMRAM] PTR struct motor
 11077 ;;		 -> main@motorL(9), 
 11078 ;;  mR              2   36[COMRAM] PTR struct motor
 11079 ;;		 -> main@motorR(9), 
 11080 ;; Auto vars:     Size  Location     Type
 11081 ;;  reverse         1    0[COMRAM] unsigned char 
 11082 ;; Return value:  Size  Location     Type
 11083 ;;                  1    wreg      void 
 11084 ;; Registers used:
 11085 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11086 ;; Tracked objects:
 11087 ;;		On entry : 0/0
 11088 ;;		On exit  : 0/0
 11089 ;;		Unchanged: 0/0
 11090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11091 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11093 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11094 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11095 ;;Total ram usage:        6 bytes
 11096 ;; Hardware stack levels used: 1
 11097 ;; Hardware stack levels required when called: 4
 11098 ;; This function calls:
 11099 ;;		_adjustbackward
 11100 ;;		_turn180
 11101 ;; This function is called by:
 11102 ;;		_colorCase
 11103 ;; This function uses a non-reentrant model
 11104 ;;
 11105                           
 11106                           	psect	text45
 11107  01BD7E                     __ptext45:
 11108                           	callstack 0
 11109  01BD7E                     _blueAction:
 11110                           	callstack 25
 11111  01BD7E                     
 11112                           ;action.c: 60:         _delay((unsigned long)((1000)*(64000000/4000.0)));
 11113  01BD7E  0E52               	movlw	82
 11114  01BD80  6E28               	movwf	(??_blueAction+1)^0,c
 11115  01BD82  0E2B               	movlw	43
 11116  01BD84  6E27               	movwf	??_blueAction^0,c
 11117  01BD86  0E00               	movlw	0
 11118  01BD88                     u4517:
 11119  01BD88  2EE8               	decfsz	wreg,f,c
 11120  01BD8A  D7FE               	bra	u4517
 11121  01BD8C  2E27               	decfsz	??_blueAction^0,f,c
 11122  01BD8E  D7FC               	bra	u4517
 11123  01BD90  2E28               	decfsz	(??_blueAction+1)^0,f,c
 11124  01BD92  D7FA               	bra	u4517
 11125  01BD94  D000               	nop2	
 11126  01BD96                     
 11127                           ;action.c: 61:         adjustbackward(mL,mR);
 11128  01BD96  C023  F01D         	movff	blueAction@mL,adjustbackward@mL
 11129  01BD9A  C024  F01E         	movff	blueAction@mL+1,adjustbackward@mL+1
 11130  01BD9E  C025  F01F         	movff	blueAction@mR,adjustbackward@mR
 11131  01BDA2  C026  F020         	movff	blueAction@mR+1,adjustbackward@mR+1
 11132  01BDA6  EC32  F0DF         	call	_adjustbackward	;wreg free
 11133  01BDAA                     
 11134                           ;action.c: 62:         _delay((unsigned long)((1000)*(64000000/4000.0)));
 11135  01BDAA  0E52               	movlw	82
 11136  01BDAC  6E28               	movwf	(??_blueAction+1)^0,c
 11137  01BDAE  0E2B               	movlw	43
 11138  01BDB0  6E27               	movwf	??_blueAction^0,c
 11139  01BDB2  0E00               	movlw	0
 11140  01BDB4                     u4527:
 11141  01BDB4  2EE8               	decfsz	wreg,f,c
 11142  01BDB6  D7FE               	bra	u4527
 11143  01BDB8  2E27               	decfsz	??_blueAction^0,f,c
 11144  01BDBA  D7FC               	bra	u4527
 11145  01BDBC  2E28               	decfsz	(??_blueAction+1)^0,f,c
 11146  01BDBE  D7FA               	bra	u4527
 11147  01BDC0  D000               	nop2	
 11148  01BDC2                     
 11149                           ;action.c: 63:         turn180(mL,mR);
 11150  01BDC2  C023  F01D         	movff	blueAction@mL,turn180@mL
 11151  01BDC6  C024  F01E         	movff	blueAction@mL+1,turn180@mL+1
 11152  01BDCA  C025  F01F         	movff	blueAction@mR,turn180@mR
 11153  01BDCE  C026  F020         	movff	blueAction@mR+1,turn180@mR+1
 11154  01BDD2  EC3F  F0E1         	call	_turn180	;wreg free
 11155  01BDD6                     
 11156                           ;action.c: 64:         _delay((unsigned long)((1000)*(64000000/4000.0)));
 11157  01BDD6  0E52               	movlw	82
 11158  01BDD8  6E28               	movwf	(??_blueAction+1)^0,c
 11159  01BDDA  0E2B               	movlw	43
 11160  01BDDC  6E27               	movwf	??_blueAction^0,c
 11161  01BDDE  0E00               	movlw	0
 11162  01BDE0                     u4537:
 11163  01BDE0  2EE8               	decfsz	wreg,f,c
 11164  01BDE2  D7FE               	bra	u4537
 11165  01BDE4  2E27               	decfsz	??_blueAction^0,f,c
 11166  01BDE6  D7FC               	bra	u4537
 11167  01BDE8  2E28               	decfsz	(??_blueAction+1)^0,f,c
 11168  01BDEA  D7FA               	bra	u4537
 11169  01BDEC  D000               	nop2	
 11170  01BDEE  0012               	return		;funcret
 11171  01BDF0                     __end_of_blueAction:
 11172                           	callstack 0
 11173                           
 11174 ;; *************** function _blackAction *****************
 11175 ;; Defined at:
 11176 ;;		line 181 in file "action.c"
 11177 ;; Parameters:    Size  Location     Type
 11178 ;;  reverse         1    wreg     unsigned char 
 11179 ;;  mL              2   34[COMRAM] PTR struct motor
 11180 ;;		 -> main@motorL(9), 
 11181 ;;  mR              2   36[COMRAM] PTR struct motor
 11182 ;;		 -> main@motorR(9), 
 11183 ;; Auto vars:     Size  Location     Type
 11184 ;;  reverse         1   40[COMRAM] unsigned char 
 11185 ;; Return value:  Size  Location     Type
 11186 ;;                  1    wreg      void 
 11187 ;; Registers used:
 11188 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11189 ;; Tracked objects:
 11190 ;;		On entry : 0/0
 11191 ;;		On exit  : 0/0
 11192 ;;		Unchanged: 0/0
 11193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11194 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11195 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11196 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11197 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11198 ;;Total ram usage:        7 bytes
 11199 ;; Hardware stack levels used: 1
 11200 ;; Hardware stack levels required when called: 4
 11201 ;; This function calls:
 11202 ;;		_adjustbackward
 11203 ;;		_turn180
 11204 ;; This function is called by:
 11205 ;;		_colorCase
 11206 ;; This function uses a non-reentrant model
 11207 ;;
 11208                           
 11209                           	psect	text46
 11210  01BEE2                     __ptext46:
 11211                           	callstack 0
 11212  01BEE2                     _blackAction:
 11213                           	callstack 25
 11214                           
 11215                           ;incstack = 0
 11216                           ;blackAction@reverse stored from wreg
 11217  01BEE2  6E29               	movwf	blackAction@reverse^0,c
 11218  01BEE4                     
 11219                           ;action.c: 182:     if (reverse==0){
 11220  01BEE4  5029               	movf	blackAction@reverse^0,w,c
 11221  01BEE6  A4D8               	btfss	status,2,c
 11222  01BEE8  EF78  F0DF         	goto	u2721
 11223  01BEEC  EF7A  F0DF         	goto	u2720
 11224  01BEF0                     u2721:
 11225  01BEF0  EFBA  F0DF         	goto	l492
 11226  01BEF4                     u2720:
 11227  01BEF4                     
 11228                           ;action.c: 183:         adjustbackward(mL,mR);
 11229  01BEF4  C023  F01D         	movff	blackAction@mL,adjustbackward@mL
 11230  01BEF8  C024  F01E         	movff	blackAction@mL+1,adjustbackward@mL+1
 11231  01BEFC  C025  F01F         	movff	blackAction@mR,adjustbackward@mR
 11232  01BF00  C026  F020         	movff	blackAction@mR+1,adjustbackward@mR+1
 11233  01BF04  EC32  F0DF         	call	_adjustbackward	;wreg free
 11234  01BF08                     
 11235                           ;action.c: 184:         _delay((unsigned long)((1000)*(64000000/4000.0)));
 11236  01BF08  0E52               	movlw	82
 11237  01BF0A  6E28               	movwf	(??_blackAction+1)^0,c
 11238  01BF0C  0E2B               	movlw	43
 11239  01BF0E  6E27               	movwf	??_blackAction^0,c
 11240  01BF10  0E00               	movlw	0
 11241  01BF12                     u4547:
 11242  01BF12  2EE8               	decfsz	wreg,f,c
 11243  01BF14  D7FE               	bra	u4547
 11244  01BF16  2E27               	decfsz	??_blackAction^0,f,c
 11245  01BF18  D7FC               	bra	u4547
 11246  01BF1A  2E28               	decfsz	(??_blackAction+1)^0,f,c
 11247  01BF1C  D7FA               	bra	u4547
 11248  01BF1E  D000               	nop2	
 11249  01BF20                     
 11250                           ;action.c: 185:         turn180(mL,mR);
 11251  01BF20  C023  F01D         	movff	blackAction@mL,turn180@mL
 11252  01BF24  C024  F01E         	movff	blackAction@mL+1,turn180@mL+1
 11253  01BF28  C025  F01F         	movff	blackAction@mR,turn180@mR
 11254  01BF2C  C026  F020         	movff	blackAction@mR+1,turn180@mR+1
 11255  01BF30  EC3F  F0E1         	call	_turn180	;wreg free
 11256                           
 11257                           ;action.c: 186:         _delay((unsigned long)((1000)*(64000000/4000.0)));
 11258  01BF34  0E52               	movlw	82
 11259  01BF36  6E28               	movwf	(??_blackAction+1)^0,c
 11260  01BF38  0E2B               	movlw	43
 11261  01BF3A  6E27               	movwf	??_blackAction^0,c
 11262  01BF3C  0E00               	movlw	0
 11263  01BF3E                     u4557:
 11264  01BF3E  2EE8               	decfsz	wreg,f,c
 11265  01BF40  D7FE               	bra	u4557
 11266  01BF42  2E27               	decfsz	??_blackAction^0,f,c
 11267  01BF44  D7FC               	bra	u4557
 11268  01BF46  2E28               	decfsz	(??_blackAction+1)^0,f,c
 11269  01BF48  D7FA               	bra	u4557
 11270  01BF4A  D000               	nop2	
 11271  01BF4C                     
 11272                           ;action.c: 187:         adjustbackward(mL,mR);
 11273  01BF4C  C023  F01D         	movff	blackAction@mL,adjustbackward@mL
 11274  01BF50  C024  F01E         	movff	blackAction@mL+1,adjustbackward@mL+1
 11275  01BF54  C025  F01F         	movff	blackAction@mR,adjustbackward@mR
 11276  01BF58  C026  F020         	movff	blackAction@mR+1,adjustbackward@mR+1
 11277  01BF5C  EC32  F0DF         	call	_adjustbackward	;wreg free
 11278  01BF60                     
 11279                           ;action.c: 188:         adjustbackward(mL,mR);
 11280  01BF60  C023  F01D         	movff	blackAction@mL,adjustbackward@mL
 11281  01BF64  C024  F01E         	movff	blackAction@mL+1,adjustbackward@mL+1
 11282  01BF68  C025  F01F         	movff	blackAction@mR,adjustbackward@mR
 11283  01BF6C  C026  F020         	movff	blackAction@mR+1,adjustbackward@mR+1
 11284  01BF70  EC32  F0DF         	call	_adjustbackward	;wreg free
 11285  01BF74                     l492:
 11286  01BF74  0012               	return		;funcret
 11287  01BF76                     __end_of_blackAction:
 11288                           	callstack 0
 11289                           
 11290 ;; *************** function _turn180 *****************
 11291 ;; Defined at:
 11292 ;;		line 130 in file "motor.c"
 11293 ;; Parameters:    Size  Location     Type
 11294 ;;  mL              2   28[COMRAM] PTR struct motor
 11295 ;;		 -> main@motorL(9), 
 11296 ;;  mR              2   30[COMRAM] PTR struct motor
 11297 ;;		 -> main@motorR(9), 
 11298 ;; Auto vars:     Size  Location     Type
 11299 ;;		None
 11300 ;; Return value:  Size  Location     Type
 11301 ;;                  1    wreg      void 
 11302 ;; Registers used:
 11303 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11304 ;; Tracked objects:
 11305 ;;		On entry : 0/0
 11306 ;;		On exit  : 0/0
 11307 ;;		Unchanged: 0/0
 11308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11309 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11311 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11312 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11313 ;;Total ram usage:        6 bytes
 11314 ;; Hardware stack levels used: 1
 11315 ;; Hardware stack levels required when called: 3
 11316 ;; This function calls:
 11317 ;;		_setMotorPWM
 11318 ;;		_stop
 11319 ;; This function is called by:
 11320 ;;		_blueAction
 11321 ;;		_whiteAction
 11322 ;;		_blackAction
 11323 ;; This function uses a non-reentrant model
 11324 ;;
 11325                           
 11326                           	psect	text47
 11327  01C27E                     __ptext47:
 11328                           	callstack 0
 11329  01C27E                     _turn180:
 11330                           	callstack 25
 11331  01C27E                     
 11332                           ;motor.c: 132:     mL-> power = 53;
 11333  01C27E  C01D  FFD9         	movff	turn180@mL,fsr2l
 11334  01C282  C01E  FFDA         	movff	turn180@mL+1,fsr2h
 11335  01C286  0E35               	movlw	53
 11336  01C288  6EDF               	movwf	indf2,c
 11337                           
 11338                           ;motor.c: 133:     mR-> power = 70;
 11339  01C28A  C01F  FFD9         	movff	turn180@mR,fsr2l
 11340  01C28E  C020  FFDA         	movff	turn180@mR+1,fsr2h
 11341  01C292  0E46               	movlw	70
 11342  01C294  6EDF               	movwf	indf2,c
 11343  01C296                     
 11344                           ;motor.c: 134:     mL-> direction = 0;
 11345  01C296  EE20 F001          	lfsr	2,1
 11346  01C29A  501D               	movf	turn180@mL^0,w,c
 11347  01C29C  26D9               	addwf	fsr2l,f,c
 11348  01C29E  501E               	movf	(turn180@mL+1)^0,w,c
 11349  01C2A0  22DA               	addwfc	fsr2h,f,c
 11350  01C2A2  0E00               	movlw	0
 11351  01C2A4  6EDF               	movwf	indf2,c
 11352  01C2A6                     
 11353                           ;motor.c: 135:     mR-> direction = 1;
 11354  01C2A6  EE20 F001          	lfsr	2,1
 11355  01C2AA  501F               	movf	turn180@mR^0,w,c
 11356  01C2AC  26D9               	addwf	fsr2l,f,c
 11357  01C2AE  5020               	movf	(turn180@mR+1)^0,w,c
 11358  01C2B0  22DA               	addwfc	fsr2h,f,c
 11359  01C2B2  0E01               	movlw	1
 11360  01C2B4  6EDF               	movwf	indf2,c
 11361                           
 11362                           ;motor.c: 137:     while (mL->power<60 && mR->power<75){
 11363  01C2B6  EF8B  F0E1         	goto	l3092
 11364  01C2BA                     l3084:
 11365                           
 11366                           ;motor.c: 138:         mL->power = mL->power +10 ;
 11367  01C2BA  C01D  FFD9         	movff	turn180@mL,fsr2l
 11368  01C2BE  C01E  FFDA         	movff	turn180@mL+1,fsr2h
 11369  01C2C2  50DF               	movf	indf2,w,c
 11370  01C2C4  0F0A               	addlw	10
 11371  01C2C6  C01D  FFD9         	movff	turn180@mL,fsr2l
 11372  01C2CA  C01E  FFDA         	movff	turn180@mL+1,fsr2h
 11373  01C2CE  6EDF               	movwf	indf2,c
 11374                           
 11375                           ;motor.c: 139:         mR->power = mR->power +10;
 11376  01C2D0  C01F  FFD9         	movff	turn180@mR,fsr2l
 11377  01C2D4  C020  FFDA         	movff	turn180@mR+1,fsr2h
 11378  01C2D8  50DF               	movf	indf2,w,c
 11379  01C2DA  0F0A               	addlw	10
 11380  01C2DC  C01F  FFD9         	movff	turn180@mR,fsr2l
 11381  01C2E0  C020  FFDA         	movff	turn180@mR+1,fsr2h
 11382  01C2E4  6EDF               	movwf	indf2,c
 11383  01C2E6                     
 11384                           ;motor.c: 140:         setMotorPWM(mL);
 11385  01C2E6  C01D  F00E         	movff	turn180@mL,setMotorPWM@m
 11386  01C2EA  C01E  F00F         	movff	turn180@mL+1,setMotorPWM@m+1
 11387  01C2EE  ECBE  F0EA         	call	_setMotorPWM	;wreg free
 11388  01C2F2                     
 11389                           ;motor.c: 141:         setMotorPWM(mR);
 11390  01C2F2  C01F  F00E         	movff	turn180@mR,setMotorPWM@m
 11391  01C2F6  C020  F00F         	movff	turn180@mR+1,setMotorPWM@m+1
 11392  01C2FA  ECBE  F0EA         	call	_setMotorPWM	;wreg free
 11393  01C2FE                     
 11394                           ;motor.c: 142:         _delay((unsigned long)((400)*(64000000/4000.0)));
 11395  01C2FE  0E21               	movlw	33
 11396  01C300  6E22               	movwf	(??_turn180+1)^0,c
 11397  01C302  0E78               	movlw	120
 11398  01C304  6E21               	movwf	??_turn180^0,c
 11399  01C306  0E98               	movlw	152
 11400  01C308                     u4567:
 11401  01C308  2EE8               	decfsz	wreg,f,c
 11402  01C30A  D7FE               	bra	u4567
 11403  01C30C  2E21               	decfsz	??_turn180^0,f,c
 11404  01C30E  D7FC               	bra	u4567
 11405  01C310  2E22               	decfsz	(??_turn180+1)^0,f,c
 11406  01C312  D7FA               	bra	u4567
 11407  01C314  D000               	nop2	
 11408  01C316                     l3092:
 11409                           
 11410                           ;motor.c: 137:     while (mL->power<60 && mR->power<75){
 11411  01C316  C01D  FFD9         	movff	turn180@mL,fsr2l
 11412  01C31A  C01E  FFDA         	movff	turn180@mL+1,fsr2h
 11413  01C31E  0E3C               	movlw	60
 11414  01C320  60DF               	cpfslt	indf2,c
 11415  01C322  EF95  F0E1         	goto	u2201
 11416  01C326  EF97  F0E1         	goto	u2200
 11417  01C32A                     u2201:
 11418  01C32A  EFA3  F0E1         	goto	l3096
 11419  01C32E                     u2200:
 11420  01C32E  C01F  FFD9         	movff	turn180@mR,fsr2l
 11421  01C332  C020  FFDA         	movff	turn180@mR+1,fsr2h
 11422  01C336  0E4A               	movlw	74
 11423  01C338  64DF               	cpfsgt	indf2,c
 11424  01C33A  EFA1  F0E1         	goto	u2211
 11425  01C33E  EFA3  F0E1         	goto	u2210
 11426  01C342                     u2211:
 11427  01C342  EF5D  F0E1         	goto	l3084
 11428  01C346                     u2210:
 11429  01C346                     l3096:
 11430                           
 11431                           ;motor.c: 144:     stop(mL,mR);
 11432  01C346  C01D  F019         	movff	turn180@mL,stop@mL
 11433  01C34A  C01E  F01A         	movff	turn180@mL+1,stop@mL+1
 11434  01C34E  C01F  F01B         	movff	turn180@mR,stop@mR
 11435  01C352  C020  F01C         	movff	turn180@mR+1,stop@mR+1
 11436  01C356  EC8C  F0E2         	call	_stop	;wreg free
 11437  01C35A  0012               	return		;funcret
 11438  01C35C                     __end_of_turn180:
 11439                           	callstack 0
 11440                           
 11441 ;; *************** function _adjustbackward *****************
 11442 ;; Defined at:
 11443 ;;		line 185 in file "motor.c"
 11444 ;; Parameters:    Size  Location     Type
 11445 ;;  mL              2   28[COMRAM] PTR struct motor
 11446 ;;		 -> main@motorL(9), 
 11447 ;;  mR              2   30[COMRAM] PTR struct motor
 11448 ;;		 -> main@motorR(9), 
 11449 ;; Auto vars:     Size  Location     Type
 11450 ;;		None
 11451 ;; Return value:  Size  Location     Type
 11452 ;;                  1    wreg      void 
 11453 ;; Registers used:
 11454 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11455 ;; Tracked objects:
 11456 ;;		On entry : 0/0
 11457 ;;		On exit  : 0/0
 11458 ;;		Unchanged: 0/0
 11459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11460 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11462 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11463 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11464 ;;Total ram usage:        6 bytes
 11465 ;; Hardware stack levels used: 1
 11466 ;; Hardware stack levels required when called: 3
 11467 ;; This function calls:
 11468 ;;		_setMotorPWM
 11469 ;;		_stop
 11470 ;; This function is called by:
 11471 ;;		_redAction
 11472 ;;		_greenAction
 11473 ;;		_blueAction
 11474 ;;		_yellowAction
 11475 ;;		_pinkAction
 11476 ;;		_orangeAction
 11477 ;;		_lightBlueAction
 11478 ;;		_whiteAction
 11479 ;;		_blackAction
 11480 ;; This function uses a non-reentrant model
 11481 ;;
 11482                           
 11483                           	psect	text48
 11484  01BE64                     __ptext48:
 11485                           	callstack 0
 11486  01BE64                     _adjustbackward:
 11487                           	callstack 25
 11488  01BE64                     
 11489                           ;motor.c: 186:     mL->power = 70;
 11490  01BE64  C01D  FFD9         	movff	adjustbackward@mL,fsr2l
 11491  01BE68  C01E  FFDA         	movff	adjustbackward@mL+1,fsr2h
 11492  01BE6C  0E46               	movlw	70
 11493  01BE6E  6EDF               	movwf	indf2,c
 11494                           
 11495                           ;motor.c: 187:     mR->power = 70;
 11496  01BE70  C01F  FFD9         	movff	adjustbackward@mR,fsr2l
 11497  01BE74  C020  FFDA         	movff	adjustbackward@mR+1,fsr2h
 11498  01BE78  0E46               	movlw	70
 11499  01BE7A  6EDF               	movwf	indf2,c
 11500  01BE7C                     
 11501                           ;motor.c: 188:     mL->direction = 0;
 11502  01BE7C  EE20 F001          	lfsr	2,1
 11503  01BE80  501D               	movf	adjustbackward@mL^0,w,c
 11504  01BE82  26D9               	addwf	fsr2l,f,c
 11505  01BE84  501E               	movf	(adjustbackward@mL+1)^0,w,c
 11506  01BE86  22DA               	addwfc	fsr2h,f,c
 11507  01BE88  0E00               	movlw	0
 11508  01BE8A  6EDF               	movwf	indf2,c
 11509  01BE8C                     
 11510                           ;motor.c: 189:     mR->direction = 0;
 11511  01BE8C  EE20 F001          	lfsr	2,1
 11512  01BE90  501F               	movf	adjustbackward@mR^0,w,c
 11513  01BE92  26D9               	addwf	fsr2l,f,c
 11514  01BE94  5020               	movf	(adjustbackward@mR+1)^0,w,c
 11515  01BE96  22DA               	addwfc	fsr2h,f,c
 11516  01BE98  0E00               	movlw	0
 11517  01BE9A  6EDF               	movwf	indf2,c
 11518  01BE9C                     
 11519                           ;motor.c: 191:         setMotorPWM(mL);
 11520  01BE9C  C01D  F00E         	movff	adjustbackward@mL,setMotorPWM@m
 11521  01BEA0  C01E  F00F         	movff	adjustbackward@mL+1,setMotorPWM@m+1
 11522  01BEA4  ECBE  F0EA         	call	_setMotorPWM	;wreg free
 11523  01BEA8                     
 11524                           ;motor.c: 192:         setMotorPWM(mR);
 11525  01BEA8  C01F  F00E         	movff	adjustbackward@mR,setMotorPWM@m
 11526  01BEAC  C020  F00F         	movff	adjustbackward@mR+1,setMotorPWM@m+1
 11527  01BEB0  ECBE  F0EA         	call	_setMotorPWM	;wreg free
 11528  01BEB4                     
 11529                           ;motor.c: 193:         _delay((unsigned long)((250)*(64000000/4000.0)));
 11530  01BEB4  0E15               	movlw	21
 11531  01BEB6  6E22               	movwf	(??_adjustbackward+1)^0,c
 11532  01BEB8  0E4B               	movlw	75
 11533  01BEBA  6E21               	movwf	??_adjustbackward^0,c
 11534  01BEBC  0EBE               	movlw	190
 11535  01BEBE                     u4577:
 11536  01BEBE  2EE8               	decfsz	wreg,f,c
 11537  01BEC0  D7FE               	bra	u4577
 11538  01BEC2  2E21               	decfsz	??_adjustbackward^0,f,c
 11539  01BEC4  D7FC               	bra	u4577
 11540  01BEC6  2E22               	decfsz	(??_adjustbackward+1)^0,f,c
 11541  01BEC8  D7FA               	bra	u4577
 11542  01BECA  D000               	nop2	
 11543  01BECC                     
 11544                           ;motor.c: 194:     stop(mL,mR);
 11545  01BECC  C01D  F019         	movff	adjustbackward@mL,stop@mL
 11546  01BED0  C01E  F01A         	movff	adjustbackward@mL+1,stop@mL+1
 11547  01BED4  C01F  F01B         	movff	adjustbackward@mR,stop@mR
 11548  01BED8  C020  F01C         	movff	adjustbackward@mR+1,stop@mR+1
 11549  01BEDC  EC8C  F0E2         	call	_stop	;wreg free
 11550  01BEE0  0012               	return		;funcret
 11551  01BEE2                     __end_of_adjustbackward:
 11552                           	callstack 0
 11553                           
 11554 ;; *************** function _stop *****************
 11555 ;; Defined at:
 11556 ;;		line 76 in file "motor.c"
 11557 ;; Parameters:    Size  Location     Type
 11558 ;;  mL              2   24[COMRAM] PTR struct motor
 11559 ;;		 -> main@motorL(9), 
 11560 ;;  mR              2   26[COMRAM] PTR struct motor
 11561 ;;		 -> main@motorR(9), 
 11562 ;; Auto vars:     Size  Location     Type
 11563 ;;		None
 11564 ;; Return value:  Size  Location     Type
 11565 ;;                  1    wreg      void 
 11566 ;; Registers used:
 11567 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11568 ;; Tracked objects:
 11569 ;;		On entry : 0/0
 11570 ;;		On exit  : 0/0
 11571 ;;		Unchanged: 0/0
 11572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11573 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11576 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11577 ;;Total ram usage:        4 bytes
 11578 ;; Hardware stack levels used: 1
 11579 ;; Hardware stack levels required when called: 2
 11580 ;; This function calls:
 11581 ;;		_setMotorPWM
 11582 ;; This function is called by:
 11583 ;;		_scanColor
 11584 ;;		_turnCW45
 11585 ;;		_turnACW45
 11586 ;;		_turn180
 11587 ;;		_forward
 11588 ;;		_backward
 11589 ;;		_adjustbackward
 11590 ;;		_adjustforward
 11591 ;;		_nullAction
 11592 ;; This function uses a non-reentrant model
 11593 ;;
 11594                           
 11595                           	psect	text49
 11596  01C518                     __ptext49:
 11597                           	callstack 0
 11598  01C518                     _stop:
 11599                           	callstack 27
 11600  01C518                     
 11601                           ;motor.c: 76: void stop(struct motor *mL, struct motor *mR);motor.c: 77: {;motor.c: 78: 
      +                              while (mL->power>0 && mR->power>0){
 11602  01C518  EFE8  F0E2         	goto	l3030
 11603  01C51C                     l3010:
 11604                           
 11605                           ;motor.c: 79:         mL->power = mL->power =0;
 11606  01C51C  C019  FFD9         	movff	stop@mL,fsr2l
 11607  01C520  C01A  FFDA         	movff	stop@mL+1,fsr2h
 11608  01C524  0E00               	movlw	0
 11609  01C526  6EDF               	movwf	indf2,c
 11610  01C528  C019  FFE1         	movff	stop@mL,fsr1l
 11611  01C52C  C01A  FFE2         	movff	stop@mL+1,fsr1h
 11612  01C530  CFDF FFE7          	movff	indf2,indf1
 11613                           
 11614                           ;motor.c: 80:         mR->power = mR->power =0;
 11615  01C534  C01B  FFD9         	movff	stop@mR,fsr2l
 11616  01C538  C01C  FFDA         	movff	stop@mR+1,fsr2h
 11617  01C53C  0E00               	movlw	0
 11618  01C53E  6EDF               	movwf	indf2,c
 11619  01C540  C01B  FFE1         	movff	stop@mR,fsr1l
 11620  01C544  C01C  FFE2         	movff	stop@mR+1,fsr1h
 11621  01C548  CFDF FFE7          	movff	indf2,indf1
 11622  01C54C                     
 11623                           ;motor.c: 81:         setMotorPWM(mL);
 11624  01C54C  C019  F00E         	movff	stop@mL,setMotorPWM@m
 11625  01C550  C01A  F00F         	movff	stop@mL+1,setMotorPWM@m+1
 11626  01C554  ECBE  F0EA         	call	_setMotorPWM	;wreg free
 11627  01C558                     
 11628                           ;motor.c: 82:         setMotorPWM(mR);
 11629  01C558  C01B  F00E         	movff	stop@mR,setMotorPWM@m
 11630  01C55C  C01C  F00F         	movff	stop@mR+1,setMotorPWM@m+1
 11631  01C560  ECBE  F0EA         	call	_setMotorPWM	;wreg free
 11632  01C564                     
 11633                           ;motor.c: 83:         _delay((unsigned long)((10)*(64000000/4000000.0)));
 11634  01C564  0E35               	movlw	53
 11635  01C566                     u4587:
 11636  01C566  2EE8               	decfsz	wreg,f,c
 11637  01C568  D7FE               	bra	u4587
 11638  01C56A  F000               	nop	
 11639  01C56C                     
 11640                           ;motor.c: 84:         if (mL -> power <=0 && mR-> power <= 0)break;
 11641  01C56C  C019  FFD9         	movff	stop@mL,fsr2l
 11642  01C570  C01A  FFDA         	movff	stop@mL+1,fsr2h
 11643  01C574  50DF               	movf	indf2,w,c
 11644  01C576  A4D8               	btfss	status,2,c
 11645  01C578  EFC0  F0E2         	goto	u2101
 11646  01C57C  EFC2  F0E2         	goto	u2100
 11647  01C580                     u2101:
 11648  01C580  EFD0  F0E2         	goto	l3024
 11649  01C584                     u2100:
 11650  01C584  C01B  FFD9         	movff	stop@mR,fsr2l
 11651  01C588  C01C  FFDA         	movff	stop@mR+1,fsr2h
 11652  01C58C  50DF               	movf	indf2,w,c
 11653  01C58E  A4D8               	btfss	status,2,c
 11654  01C590  EFCC  F0E2         	goto	u2111
 11655  01C594  EFCE  F0E2         	goto	u2110
 11656  01C598                     u2111:
 11657  01C598  EFD0  F0E2         	goto	l3024
 11658  01C59C                     u2110:
 11659  01C59C  EF00  F0E3         	goto	l383
 11660  01C5A0                     l3024:
 11661                           
 11662                           ;motor.c: 85:             mL->power = 0;
 11663  01C5A0  C019  FFD9         	movff	stop@mL,fsr2l
 11664  01C5A4  C01A  FFDA         	movff	stop@mL+1,fsr2h
 11665  01C5A8  0E00               	movlw	0
 11666  01C5AA  6EDF               	movwf	indf2,c
 11667                           
 11668                           ;motor.c: 86:             mR->power = 0;
 11669  01C5AC  C01B  FFD9         	movff	stop@mR,fsr2l
 11670  01C5B0  C01C  FFDA         	movff	stop@mR+1,fsr2h
 11671  01C5B4  0E00               	movlw	0
 11672  01C5B6  6EDF               	movwf	indf2,c
 11673  01C5B8                     
 11674                           ;motor.c: 87:             setMotorPWM(mL);
 11675  01C5B8  C019  F00E         	movff	stop@mL,setMotorPWM@m
 11676  01C5BC  C01A  F00F         	movff	stop@mL+1,setMotorPWM@m+1
 11677  01C5C0  ECBE  F0EA         	call	_setMotorPWM	;wreg free
 11678  01C5C4                     
 11679                           ;motor.c: 88:             setMotorPWM(mR);
 11680  01C5C4  C01B  F00E         	movff	stop@mR,setMotorPWM@m
 11681  01C5C8  C01C  F00F         	movff	stop@mR+1,setMotorPWM@m+1
 11682  01C5CC  ECBE  F0EA         	call	_setMotorPWM	;wreg free
 11683  01C5D0                     l3030:
 11684                           
 11685                           ;motor.c: 78:     while (mL->power>0 && mR->power>0){
 11686  01C5D0  C019  FFD9         	movff	stop@mL,fsr2l
 11687  01C5D4  C01A  FFDA         	movff	stop@mL+1,fsr2h
 11688  01C5D8  50DF               	movf	indf2,w,c
 11689  01C5DA  B4D8               	btfsc	status,2,c
 11690  01C5DC  EFF2  F0E2         	goto	u2121
 11691  01C5E0  EFF4  F0E2         	goto	u2120
 11692  01C5E4                     u2121:
 11693  01C5E4  EF00  F0E3         	goto	l383
 11694  01C5E8                     u2120:
 11695  01C5E8  C01B  FFD9         	movff	stop@mR,fsr2l
 11696  01C5EC  C01C  FFDA         	movff	stop@mR+1,fsr2h
 11697  01C5F0  50DF               	movf	indf2,w,c
 11698  01C5F2  A4D8               	btfss	status,2,c
 11699  01C5F4  EFFE  F0E2         	goto	u2131
 11700  01C5F8  EF00  F0E3         	goto	u2130
 11701  01C5FC                     u2131:
 11702  01C5FC  EF8E  F0E2         	goto	l3010
 11703  01C600                     u2130:
 11704  01C600                     l383:
 11705  01C600  0012               	return		;funcret
 11706  01C602                     __end_of_stop:
 11707                           	callstack 0
 11708                           
 11709 ;; *************** function _setMotorPWM *****************
 11710 ;; Defined at:
 11711 ;;		line 53 in file "motor.c"
 11712 ;; Parameters:    Size  Location     Type
 11713 ;;  m               2   13[COMRAM] PTR struct motor
 11714 ;;		 -> main@motorR(9), main@motorL(9), 
 11715 ;; Auto vars:     Size  Location     Type
 11716 ;;  PWMduty         2   22[COMRAM] int 
 11717 ;; Return value:  Size  Location     Type
 11718 ;;                  1    wreg      void 
 11719 ;; Registers used:
 11720 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11721 ;; Tracked objects:
 11722 ;;		On entry : 0/0
 11723 ;;		On exit  : 0/0
 11724 ;;		Unchanged: 0/0
 11725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11726 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11727 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11728 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11729 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11730 ;;Total ram usage:       11 bytes
 11731 ;; Hardware stack levels used: 1
 11732 ;; Hardware stack levels required when called: 1
 11733 ;; This function calls:
 11734 ;;		___lwdiv
 11735 ;;		___wmul
 11736 ;; This function is called by:
 11737 ;;		_stop
 11738 ;;		_turnCW45
 11739 ;;		_turnACW45
 11740 ;;		_turn180
 11741 ;;		_forward
 11742 ;;		_backward
 11743 ;;		_adjustbackward
 11744 ;;		_adjustforward
 11745 ;; This function uses a non-reentrant model
 11746 ;;
 11747                           
 11748                           	psect	text50
 11749  01D57C                     __ptext50:
 11750                           	callstack 0
 11751  01D57C                     _setMotorPWM:
 11752                           	callstack 27
 11753  01D57C                     
 11754                           ;motor.c: 53: void setMotorPWM(struct motor *m);motor.c: 54: {;motor.c: 55:  int PWMduty
      +                          ;;motor.c: 57:  if (m->direction){
 11755  01D57C  EE20 F001          	lfsr	2,1
 11756  01D580  500E               	movf	setMotorPWM@m^0,w,c
 11757  01D582  26D9               	addwf	fsr2l,f,c
 11758  01D584  500F               	movf	(setMotorPWM@m+1)^0,w,c
 11759  01D586  22DA               	addwfc	fsr2h,f,c
 11760  01D588  50DF               	movf	indf2,w,c
 11761  01D58A  B4D8               	btfsc	status,2,c
 11762  01D58C  EFCA  F0EA         	goto	u2061
 11763  01D590  EFCC  F0EA         	goto	u2060
 11764  01D594                     u2061:
 11765  01D594  EFFD  F0EA         	goto	l2998
 11766  01D598                     u2060:
 11767  01D598                     
 11768                           ;motor.c: 59:   PWMduty=m->PWMperiod - ((int)(m->power)*(m->PWMperiod))/100;
 11769  01D598  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
 11770  01D59C  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
 11771  01D5A0  50DF               	movf	indf2,w,c
 11772  01D5A2  6E10               	movwf	??_setMotorPWM^0,c
 11773  01D5A4  5010               	movf	??_setMotorPWM^0,w,c
 11774  01D5A6  6E01               	movwf	___wmul@multiplier^0,c
 11775  01D5A8  6A02               	clrf	(___wmul@multiplier+1)^0,c
 11776  01D5AA  EE20 F007          	lfsr	2,7
 11777  01D5AE  500E               	movf	setMotorPWM@m^0,w,c
 11778  01D5B0  26D9               	addwf	fsr2l,f,c
 11779  01D5B2  500F               	movf	(setMotorPWM@m+1)^0,w,c
 11780  01D5B4  22DA               	addwfc	fsr2h,f,c
 11781  01D5B6  CFDE F003          	movff	postinc2,___wmul@multiplicand
 11782  01D5BA  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
 11783  01D5BE  ECFC  F0DC         	call	___wmul	;wreg free
 11784  01D5C2  C001  F007         	movff	?___wmul,___lwdiv@dividend
 11785  01D5C6  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
 11786  01D5CA  0E00               	movlw	0
 11787  01D5CC  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
 11788  01D5CE  0E64               	movlw	100
 11789  01D5D0  6E09               	movwf	___lwdiv@divisor^0,c
 11790  01D5D2  ECF8  F0DE         	call	___lwdiv	;wreg free
 11791  01D5D6  EE20 F007          	lfsr	2,7
 11792  01D5DA  500E               	movf	setMotorPWM@m^0,w,c
 11793  01D5DC  26D9               	addwf	fsr2l,f,c
 11794  01D5DE  500F               	movf	(setMotorPWM@m+1)^0,w,c
 11795  01D5E0  22DA               	addwfc	fsr2h,f,c
 11796  01D5E2  CFDE F011          	movff	postinc2,??_setMotorPWM+1
 11797  01D5E6  CFDD F012          	movff	postdec2,??_setMotorPWM+2
 11798  01D5EA  5007               	movf	?___lwdiv^0,w,c
 11799  01D5EC  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
 11800  01D5EE  6E17               	movwf	setMotorPWM@PWMduty^0,c
 11801  01D5F0  5008               	movf	(?___lwdiv+1)^0,w,c
 11802  01D5F2  5812               	subwfb	(??_setMotorPWM+2)^0,w,c
 11803  01D5F4  6E18               	movwf	(setMotorPWM@PWMduty+1)^0,c
 11804                           
 11805                           ;motor.c: 60:  }
 11806  01D5F6  EF20  F0EB         	goto	l3000
 11807  01D5FA                     l2998:
 11808                           
 11809                           ;motor.c: 63:   PWMduty=((int)(m->power)*(m->PWMperiod))/100;
 11810  01D5FA  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
 11811  01D5FE  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
 11812  01D602  50DF               	movf	indf2,w,c
 11813  01D604  6E10               	movwf	??_setMotorPWM^0,c
 11814  01D606  5010               	movf	??_setMotorPWM^0,w,c
 11815  01D608  6E01               	movwf	___wmul@multiplier^0,c
 11816  01D60A  6A02               	clrf	(___wmul@multiplier+1)^0,c
 11817  01D60C  EE20 F007          	lfsr	2,7
 11818  01D610  500E               	movf	setMotorPWM@m^0,w,c
 11819  01D612  26D9               	addwf	fsr2l,f,c
 11820  01D614  500F               	movf	(setMotorPWM@m+1)^0,w,c
 11821  01D616  22DA               	addwfc	fsr2h,f,c
 11822  01D618  CFDE F003          	movff	postinc2,___wmul@multiplicand
 11823  01D61C  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
 11824  01D620  ECFC  F0DC         	call	___wmul	;wreg free
 11825  01D624  C001  F007         	movff	?___wmul,___lwdiv@dividend
 11826  01D628  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
 11827  01D62C  0E00               	movlw	0
 11828  01D62E  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
 11829  01D630  0E64               	movlw	100
 11830  01D632  6E09               	movwf	___lwdiv@divisor^0,c
 11831  01D634  ECF8  F0DE         	call	___lwdiv	;wreg free
 11832  01D638  C007  F017         	movff	?___lwdiv,setMotorPWM@PWMduty
 11833  01D63C  C008  F018         	movff	?___lwdiv+1,setMotorPWM@PWMduty+1
 11834  01D640                     l3000:
 11835                           
 11836                           ;motor.c: 66:  *(m->dutyHighByte) = PWMduty;
 11837  01D640  EE20 F002          	lfsr	2,2
 11838  01D644  500E               	movf	setMotorPWM@m^0,w,c
 11839  01D646  26D9               	addwf	fsr2l,f,c
 11840  01D648  500F               	movf	(setMotorPWM@m+1)^0,w,c
 11841  01D64A  22DA               	addwfc	fsr2h,f,c
 11842  01D64C  CFDE F010          	movff	postinc2,??_setMotorPWM
 11843  01D650  CFDD F011          	movff	postdec2,??_setMotorPWM+1
 11844  01D654  C010  FFD9         	movff	??_setMotorPWM,fsr2l
 11845  01D658  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
 11846  01D65C  C017  FFDF         	movff	setMotorPWM@PWMduty,indf2
 11847  01D660                     
 11848                           ;motor.c: 68:  if (m->direction){
 11849  01D660  EE20 F001          	lfsr	2,1
 11850  01D664  500E               	movf	setMotorPWM@m^0,w,c
 11851  01D666  26D9               	addwf	fsr2l,f,c
 11852  01D668  500F               	movf	(setMotorPWM@m+1)^0,w,c
 11853  01D66A  22DA               	addwfc	fsr2h,f,c
 11854  01D66C  50DF               	movf	indf2,w,c
 11855  01D66E  B4D8               	btfsc	status,2,c
 11856  01D670  EF3C  F0EB         	goto	u2071
 11857  01D674  EF3E  F0EB         	goto	u2070
 11858  01D678                     u2071:
 11859  01D678  EF73  F0EB         	goto	l3006
 11860  01D67C                     u2070:
 11861  01D67C                     
 11862                           ;motor.c: 69:   *(m->dir_LAT) = *(m->dir_LAT) | (1<<(m->dir_pin));
 11863  01D67C  EE20 F004          	lfsr	2,4
 11864  01D680  500E               	movf	setMotorPWM@m^0,w,c
 11865  01D682  26D9               	addwf	fsr2l,f,c
 11866  01D684  500F               	movf	(setMotorPWM@m+1)^0,w,c
 11867  01D686  22DA               	addwfc	fsr2h,f,c
 11868  01D688  CFDE F010          	movff	postinc2,??_setMotorPWM
 11869  01D68C  CFDD F011          	movff	postdec2,??_setMotorPWM+1
 11870  01D690  C010  FFD9         	movff	??_setMotorPWM,fsr2l
 11871  01D694  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
 11872  01D698  EE10 F004          	lfsr	1,4
 11873  01D69C  500E               	movf	setMotorPWM@m^0,w,c
 11874  01D69E  26E1               	addwf	fsr1l,f,c
 11875  01D6A0  500F               	movf	(setMotorPWM@m+1)^0,w,c
 11876  01D6A2  22E2               	addwfc	fsr1h,f,c
 11877  01D6A4  CFE6 F012          	movff	postinc1,??_setMotorPWM+2
 11878  01D6A8  CFE5 F013          	movff	postdec1,??_setMotorPWM+3
 11879  01D6AC  C012  FFE1         	movff	??_setMotorPWM+2,fsr1l
 11880  01D6B0  C013  FFE2         	movff	??_setMotorPWM+3,fsr1h
 11881  01D6B4  50E7               	movf	indf1,w,c
 11882  01D6B6  6E14               	movwf	(??_setMotorPWM+4)^0,c
 11883  01D6B8  EE10 F006          	lfsr	1,6
 11884  01D6BC  500E               	movf	setMotorPWM@m^0,w,c
 11885  01D6BE  26E1               	addwf	fsr1l,f,c
 11886  01D6C0  500F               	movf	(setMotorPWM@m+1)^0,w,c
 11887  01D6C2  22E2               	addwfc	fsr1h,f,c
 11888  01D6C4  50E7               	movf	indf1,w,c
 11889  01D6C6  6E15               	movwf	(??_setMotorPWM+5)^0,c
 11890  01D6C8  0E01               	movlw	1
 11891  01D6CA  6E16               	movwf	(??_setMotorPWM+6)^0,c
 11892  01D6CC  2A15               	incf	(??_setMotorPWM+5)^0,f,c
 11893  01D6CE  EF6B  F0EB         	goto	u2084
 11894  01D6D2                     u2085:
 11895  01D6D2  90D8               	bcf	status,0,c
 11896  01D6D4  3616               	rlcf	(??_setMotorPWM+6)^0,f,c
 11897  01D6D6                     u2084:
 11898  01D6D6  2E15               	decfsz	(??_setMotorPWM+5)^0,f,c
 11899  01D6D8  EF69  F0EB         	goto	u2085
 11900  01D6DC  5016               	movf	(??_setMotorPWM+6)^0,w,c
 11901  01D6DE  1014               	iorwf	(??_setMotorPWM+4)^0,w,c
 11902  01D6E0  6EDF               	movwf	indf2,c
 11903                           
 11904                           ;motor.c: 70:  } else {
 11905  01D6E2  EFA7  F0EB         	goto	l374
 11906  01D6E6                     l3006:
 11907                           
 11908                           ;motor.c: 71:   *(m->dir_LAT) = *(m->dir_LAT) & (~(1<<(m->dir_pin)));
 11909  01D6E6  EE20 F004          	lfsr	2,4
 11910  01D6EA  500E               	movf	setMotorPWM@m^0,w,c
 11911  01D6EC  26D9               	addwf	fsr2l,f,c
 11912  01D6EE  500F               	movf	(setMotorPWM@m+1)^0,w,c
 11913  01D6F0  22DA               	addwfc	fsr2h,f,c
 11914  01D6F2  CFDE F010          	movff	postinc2,??_setMotorPWM
 11915  01D6F6  CFDD F011          	movff	postdec2,??_setMotorPWM+1
 11916  01D6FA  C010  FFD9         	movff	??_setMotorPWM,fsr2l
 11917  01D6FE  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
 11918  01D702  EE10 F004          	lfsr	1,4
 11919  01D706  500E               	movf	setMotorPWM@m^0,w,c
 11920  01D708  26E1               	addwf	fsr1l,f,c
 11921  01D70A  500F               	movf	(setMotorPWM@m+1)^0,w,c
 11922  01D70C  22E2               	addwfc	fsr1h,f,c
 11923  01D70E  CFE6 F012          	movff	postinc1,??_setMotorPWM+2
 11924  01D712  CFE5 F013          	movff	postdec1,??_setMotorPWM+3
 11925  01D716  C012  FFE1         	movff	??_setMotorPWM+2,fsr1l
 11926  01D71A  C013  FFE2         	movff	??_setMotorPWM+3,fsr1h
 11927  01D71E  50E7               	movf	indf1,w,c
 11928  01D720  6E14               	movwf	(??_setMotorPWM+4)^0,c
 11929  01D722  EE10 F006          	lfsr	1,6
 11930  01D726  500E               	movf	setMotorPWM@m^0,w,c
 11931  01D728  26E1               	addwf	fsr1l,f,c
 11932  01D72A  500F               	movf	(setMotorPWM@m+1)^0,w,c
 11933  01D72C  22E2               	addwfc	fsr1h,f,c
 11934  01D72E  50E7               	movf	indf1,w,c
 11935  01D730  6E15               	movwf	(??_setMotorPWM+5)^0,c
 11936  01D732  0E01               	movlw	1
 11937  01D734  6E16               	movwf	(??_setMotorPWM+6)^0,c
 11938  01D736  2A15               	incf	(??_setMotorPWM+5)^0,f,c
 11939  01D738  EFA0  F0EB         	goto	u2094
 11940  01D73C                     u2095:
 11941  01D73C  90D8               	bcf	status,0,c
 11942  01D73E  3616               	rlcf	(??_setMotorPWM+6)^0,f,c
 11943  01D740                     u2094:
 11944  01D740  2E15               	decfsz	(??_setMotorPWM+5)^0,f,c
 11945  01D742  EF9E  F0EB         	goto	u2095
 11946  01D746  5016               	movf	(??_setMotorPWM+6)^0,w,c
 11947  01D748  0AFF               	xorlw	255
 11948  01D74A  1414               	andwf	(??_setMotorPWM+4)^0,w,c
 11949  01D74C  6EDF               	movwf	indf2,c
 11950  01D74E                     l374:
 11951  01D74E  0012               	return		;funcret
 11952  01D750                     __end_of_setMotorPWM:
 11953                           	callstack 0
 11954                           
 11955 ;; *************** function ___wmul *****************
 11956 ;; Defined at:
 11957 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\Umul16.c"
 11958 ;; Parameters:    Size  Location     Type
 11959 ;;  multiplier      2    0[COMRAM] unsigned int 
 11960 ;;  multiplicand    2    2[COMRAM] unsigned int 
 11961 ;; Auto vars:     Size  Location     Type
 11962 ;;  product         2    4[COMRAM] unsigned int 
 11963 ;; Return value:  Size  Location     Type
 11964 ;;                  2    0[COMRAM] unsigned int 
 11965 ;; Registers used:
 11966 ;;		wreg, status,2, status,0, prodl, prodh
 11967 ;; Tracked objects:
 11968 ;;		On entry : 0/0
 11969 ;;		On exit  : 0/0
 11970 ;;		Unchanged: 0/0
 11971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 11972 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11973 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11975 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11976 ;;Total ram usage:        6 bytes
 11977 ;; Hardware stack levels used: 1
 11978 ;; This function calls:
 11979 ;;		Nothing
 11980 ;; This function is called by:
 11981 ;;		_setMotorPWM
 11982 ;; This function uses a non-reentrant model
 11983 ;;
 11984                           
 11985                           	psect	text51
 11986  01B9F8                     __ptext51:
 11987                           	callstack 0
 11988  01B9F8                     ___wmul:
 11989                           	callstack 27
 11990  01B9F8  5001               	movf	___wmul@multiplier^0,w,c
 11991  01B9FA  0203               	mulwf	___wmul@multiplicand^0,c
 11992  01B9FC  CFF3 F005          	movff	prodl,___wmul@product
 11993  01BA00  CFF4 F006          	movff	prodh,___wmul@product+1
 11994  01BA04  5001               	movf	___wmul@multiplier^0,w,c
 11995  01BA06  0204               	mulwf	(___wmul@multiplicand+1)^0,c
 11996  01BA08  50F3               	movf	243,w,c
 11997  01BA0A  2606               	addwf	(___wmul@product+1)^0,f,c
 11998  01BA0C  5002               	movf	(___wmul@multiplier+1)^0,w,c
 11999  01BA0E  0203               	mulwf	___wmul@multiplicand^0,c
 12000  01BA10  50F3               	movf	243,w,c
 12001  01BA12  2606               	addwf	(___wmul@product+1)^0,f,c
 12002  01BA14  C005  F001         	movff	___wmul@product,?___wmul
 12003  01BA18  C006  F002         	movff	___wmul@product+1,?___wmul+1
 12004  01BA1C  0012               	return		;funcret
 12005  01BA1E                     __end_of___wmul:
 12006                           	callstack 0
 12007                           
 12008 ;; *************** function ___lwdiv *****************
 12009 ;; Defined at:
 12010 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c99\common\lwdiv.c"
 12011 ;; Parameters:    Size  Location     Type
 12012 ;;  dividend        2    6[COMRAM] unsigned int 
 12013 ;;  divisor         2    8[COMRAM] unsigned int 
 12014 ;; Auto vars:     Size  Location     Type
 12015 ;;  quotient        2   10[COMRAM] unsigned int 
 12016 ;;  counter         1   12[COMRAM] unsigned char 
 12017 ;; Return value:  Size  Location     Type
 12018 ;;                  2    6[COMRAM] unsigned int 
 12019 ;; Registers used:
 12020 ;;		wreg, status,2, status,0
 12021 ;; Tracked objects:
 12022 ;;		On entry : 0/0
 12023 ;;		On exit  : 0/0
 12024 ;;		Unchanged: 0/0
 12025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12026 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12027 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12029 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12030 ;;Total ram usage:        7 bytes
 12031 ;; Hardware stack levels used: 1
 12032 ;; This function calls:
 12033 ;;		Nothing
 12034 ;; This function is called by:
 12035 ;;		_setMotorPWM
 12036 ;; This function uses a non-reentrant model
 12037 ;;
 12038                           
 12039                           	psect	text52
 12040  01BDF0                     __ptext52:
 12041                           	callstack 0
 12042  01BDF0                     ___lwdiv:
 12043                           	callstack 27
 12044  01BDF0  0E00               	movlw	0
 12045  01BDF2  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
 12046  01BDF4  0E00               	movlw	0
 12047  01BDF6  6E0B               	movwf	___lwdiv@quotient^0,c
 12048  01BDF8  5009               	movf	___lwdiv@divisor^0,w,c
 12049  01BDFA  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
 12050  01BDFC  B4D8               	btfsc	status,2,c
 12051  01BDFE  EF03  F0DF         	goto	u2031
 12052  01BE02  EF05  F0DF         	goto	u2030
 12053  01BE06                     u2031:
 12054  01BE06  EF2D  F0DF         	goto	l1092
 12055  01BE0A                     u2030:
 12056  01BE0A  0E01               	movlw	1
 12057  01BE0C  6E0D               	movwf	___lwdiv@counter^0,c
 12058  01BE0E  EF0D  F0DF         	goto	l2980
 12059  01BE12                     l2978:
 12060  01BE12  90D8               	bcf	status,0,c
 12061  01BE14  3609               	rlcf	___lwdiv@divisor^0,f,c
 12062  01BE16  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
 12063  01BE18  2A0D               	incf	___lwdiv@counter^0,f,c
 12064  01BE1A                     l2980:
 12065  01BE1A  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
 12066  01BE1C  EF12  F0DF         	goto	u2041
 12067  01BE20  EF14  F0DF         	goto	u2040
 12068  01BE24                     u2041:
 12069  01BE24  EF09  F0DF         	goto	l2978
 12070  01BE28                     u2040:
 12071  01BE28                     l2982:
 12072  01BE28  90D8               	bcf	status,0,c
 12073  01BE2A  360B               	rlcf	___lwdiv@quotient^0,f,c
 12074  01BE2C  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
 12075  01BE2E  5009               	movf	___lwdiv@divisor^0,w,c
 12076  01BE30  5C07               	subwf	___lwdiv@dividend^0,w,c
 12077  01BE32  500A               	movf	(___lwdiv@divisor+1)^0,w,c
 12078  01BE34  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
 12079  01BE36  A0D8               	btfss	status,0,c
 12080  01BE38  EF20  F0DF         	goto	u2051
 12081  01BE3C  EF22  F0DF         	goto	u2050
 12082  01BE40                     u2051:
 12083  01BE40  EF27  F0DF         	goto	l2990
 12084  01BE44                     u2050:
 12085  01BE44  5009               	movf	___lwdiv@divisor^0,w,c
 12086  01BE46  5E07               	subwf	___lwdiv@dividend^0,f,c
 12087  01BE48  500A               	movf	(___lwdiv@divisor+1)^0,w,c
 12088  01BE4A  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
 12089  01BE4C  800B               	bsf	___lwdiv@quotient^0,0,c
 12090  01BE4E                     l2990:
 12091  01BE4E  90D8               	bcf	status,0,c
 12092  01BE50  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
 12093  01BE52  3209               	rrcf	___lwdiv@divisor^0,f,c
 12094  01BE54  2E0D               	decfsz	___lwdiv@counter^0,f,c
 12095  01BE56  EF14  F0DF         	goto	l2982
 12096  01BE5A                     l1092:
 12097  01BE5A  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
 12098  01BE5E  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
 12099  01BE62  0012               	return		;funcret
 12100  01BE64                     __end_of___lwdiv:
 12101                           	callstack 0
 12102                           
 12103 ;; *************** function _actionArray *****************
 12104 ;; Defined at:
 12105 ;;		line 14 in file "scan.c"
 12106 ;; Parameters:    Size  Location     Type
 12107 ;;  lenArr          1    wreg     unsigned char 
 12108 ;;  actArr          2    0[COMRAM] PTR int 
 12109 ;;		 -> main@actArr(50), 
 12110 ;;  colorScan       1    2[COMRAM] unsigned char 
 12111 ;; Auto vars:     Size  Location     Type
 12112 ;;  lenArr          1    7[COMRAM] unsigned char 
 12113 ;; Return value:  Size  Location     Type
 12114 ;;                  1    wreg      void 
 12115 ;; Registers used:
 12116 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12117 ;; Tracked objects:
 12118 ;;		On entry : 0/0
 12119 ;;		On exit  : 0/0
 12120 ;;		Unchanged: 0/0
 12121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
 12122 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12123 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12124 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12125 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12126 ;;Total ram usage:        8 bytes
 12127 ;; Hardware stack levels used: 1
 12128 ;; This function calls:
 12129 ;;		Nothing
 12130 ;; This function is called by:
 12131 ;;		_main
 12132 ;; This function uses a non-reentrant model
 12133 ;;
 12134                           
 12135                           	psect	text53
 12136  01BACE                     __ptext53:
 12137                           	callstack 0
 12138  01BACE                     _actionArray:
 12139                           	callstack 30
 12140                           
 12141                           ;incstack = 0
 12142                           ;actionArray@lenArr stored from wreg
 12143  01BACE  6E08               	movwf	actionArray@lenArr^0,c
 12144  01BAD0                     
 12145                           ;scan.c: 15:         static char i = 0;;scan.c: 16:         if (i < lenArr){
 12146  01BAD0  5008               	movf	actionArray@lenArr^0,w,c
 12147  01BAD2  0100               	movlb	0	; () banked
 12148  01BAD4  5DEC               	subwf	actionArray@i& (0+255),w,b
 12149  01BAD6  B0D8               	btfsc	status,0,c
 12150  01BAD8  EF70  F0DD         	goto	u3921
 12151  01BADC  EF72  F0DD         	goto	u3920
 12152  01BAE0                     u3921:
 12153  01BAE0  EF86  F0DD         	goto	l502
 12154  01BAE4                     u3920:
 12155  01BAE4                     
 12156                           ; BSR set to: 0
 12157                           ;scan.c: 17:             *(actArr+i) = colorScan;
 12158  01BAE4  5003               	movf	actionArray@colorScan^0,w,c
 12159  01BAE6  6E04               	movwf	??_actionArray^0,c
 12160  01BAE8  6A05               	clrf	(??_actionArray+1)^0,c
 12161  01BAEA  51EC               	movf	actionArray@i& (0+255),w,b
 12162  01BAEC  6E06               	movwf	(??_actionArray+2)^0,c
 12163  01BAEE  6A07               	clrf	(??_actionArray+3)^0,c
 12164  01BAF0  90D8               	bcf	status,0,c
 12165  01BAF2  3606               	rlcf	(??_actionArray+2)^0,f,c
 12166  01BAF4  3607               	rlcf	(??_actionArray+3)^0,f,c
 12167  01BAF6  5006               	movf	(??_actionArray+2)^0,w,c
 12168  01BAF8  2401               	addwf	actionArray@actArr^0,w,c
 12169  01BAFA  6ED9               	movwf	fsr2l,c
 12170  01BAFC  5007               	movf	(??_actionArray+3)^0,w,c
 12171  01BAFE  2002               	addwfc	(actionArray@actArr+1)^0,w,c
 12172  01BB00  6EDA               	movwf	fsr2h,c
 12173  01BB02  C004  FFDE         	movff	??_actionArray,postinc2
 12174  01BB06  C005  FFDD         	movff	??_actionArray+1,postdec2
 12175  01BB0A                     
 12176                           ; BSR set to: 0
 12177                           ;scan.c: 18:             i ++;
 12178  01BB0A  2BEC               	incf	actionArray@i& (0+255),f,b
 12179  01BB0C                     l502:
 12180                           
 12181                           ; BSR set to: 0
 12182  01BB0C  0012               	return		;funcret
 12183  01BB0E                     __end_of_actionArray:
 12184                           	callstack 0
 12185  0000                     
 12186                           	psect	rparam
 12187  0000                     
 12188                           	psect	idloc
 12189                           
 12190                           ;Config register IDLOC0 @ 0x200000
 12191                           ;	unspecified, using default values
 12192  200000                     	org	2097152
 12193  200000  0FFF               	dw	4095
 12194                           
 12195                           ;Config register IDLOC1 @ 0x200002
 12196                           ;	unspecified, using default values
 12197  200002                     	org	2097154
 12198  200002  0FFF               	dw	4095
 12199                           
 12200                           ;Config register IDLOC2 @ 0x200004
 12201                           ;	unspecified, using default values
 12202  200004                     	org	2097156
 12203  200004  0FFF               	dw	4095
 12204                           
 12205                           ;Config register IDLOC3 @ 0x200006
 12206                           ;	unspecified, using default values
 12207  200006                     	org	2097158
 12208  200006  0FFF               	dw	4095
 12209                           
 12210                           ;Config register IDLOC4 @ 0x200008
 12211                           ;	unspecified, using default values
 12212  200008                     	org	2097160
 12213  200008  0FFF               	dw	4095
 12214                           
 12215                           ;Config register IDLOC5 @ 0x20000A
 12216                           ;	unspecified, using default values
 12217  20000A                     	org	2097162
 12218  20000A  0FFF               	dw	4095
 12219                           
 12220                           ;Config register IDLOC6 @ 0x20000C
 12221                           ;	unspecified, using default values
 12222  20000C                     	org	2097164
 12223  20000C  0FFF               	dw	4095
 12224                           
 12225                           ;Config register IDLOC7 @ 0x20000E
 12226                           ;	unspecified, using default values
 12227  20000E                     	org	2097166
 12228  20000E  0FFF               	dw	4095
 12229                           
 12230                           	psect	config
 12231                           
 12232                           ;Config register CONFIG1L @ 0x300000
 12233                           ;	External Oscillator mode Selection bits
 12234                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
 12235                           ;	Power-up default value for COSC bits
 12236                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
 12237  300000                     	org	3145728
 12238  300000  AA                 	db	170
 12239                           
 12240                           ;Config register CONFIG1H @ 0x300001
 12241                           ;	unspecified, using default values
 12242                           ;	Clock Out Enable bit
 12243                           ;	CLKOUTEN = 0x1, unprogrammed default
 12244                           ;	Clock Switch Enable bit
 12245                           ;	CSWEN = 0x1, unprogrammed default
 12246                           ;	Fail-Safe Clock Monitor Enable bit
 12247                           ;	FCMEN = 0x1, unprogrammed default
 12248  300001                     	org	3145729
 12249  300001  FF                 	db	255
 12250                           
 12251                           ;Config register CONFIG2L @ 0x300002
 12252                           ;	unspecified, using default values
 12253                           ;	Master Clear Enable bit
 12254                           ;	MCLRE = 0x1, unprogrammed default
 12255                           ;	Power-up Timer Enable bit
 12256                           ;	PWRTE = 0x1, unprogrammed default
 12257                           ;	Low-power BOR enable bit
 12258                           ;	LPBOREN = 0x1, unprogrammed default
 12259                           ;	Brown-out Reset Enable bits
 12260                           ;	BOREN = 0x3, unprogrammed default
 12261  300002                     	org	3145730
 12262  300002  FF                 	db	255
 12263                           
 12264                           ;Config register CONFIG2H @ 0x300003
 12265                           ;	unspecified, using default values
 12266                           ;	Brown Out Reset Voltage selection bits
 12267                           ;	BORV = 0x3, unprogrammed default
 12268                           ;	ZCD Disable bit
 12269                           ;	ZCD = 0x1, unprogrammed default
 12270                           ;	PPSLOCK bit One-Way Set Enable bit
 12271                           ;	PPS1WAY = 0x1, unprogrammed default
 12272                           ;	Stack Full/Underflow Reset Enable bit
 12273                           ;	STVREN = 0x1, unprogrammed default
 12274                           ;	Debugger Enable bit
 12275                           ;	DEBUG = 0x1, unprogrammed default
 12276                           ;	Extended Instruction Set Enable bit
 12277                           ;	XINST = 0x1, unprogrammed default
 12278  300003                     	org	3145731
 12279  300003  FF                 	db	255
 12280                           
 12281                           ;Config register CONFIG3L @ 0x300004
 12282                           ;	WDT Period Select bits
 12283                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 12284                           ;	WDT operating mode
 12285                           ;	WDTE = OFF, WDT Disabled
 12286  300004                     	org	3145732
 12287  300004  9F                 	db	159
 12288                           
 12289                           ;Config register CONFIG3H @ 0x300005
 12290                           ;	unspecified, using default values
 12291                           ;	WDT Window Select bits
 12292                           ;	WDTCWS = 0x7, unprogrammed default
 12293                           ;	WDT input clock selector
 12294                           ;	WDTCCS = 0x7, unprogrammed default
 12295  300005                     	org	3145733
 12296  300005  FF                 	db	255
 12297                           
 12298                           ;Config register CONFIG4L @ 0x300006
 12299                           ;	unspecified, using default values
 12300                           ;	Write Protection Block 0
 12301                           ;	WRT0 = 0x1, unprogrammed default
 12302                           ;	Write Protection Block 1
 12303                           ;	WRT1 = 0x1, unprogrammed default
 12304                           ;	Write Protection Block 2
 12305                           ;	WRT2 = 0x1, unprogrammed default
 12306                           ;	Write Protection Block 3
 12307                           ;	WRT3 = 0x1, unprogrammed default
 12308                           ;	Write Protection Block 3
 12309                           ;	WRT4 = 0x1, unprogrammed default
 12310                           ;	Write Protection Block 3
 12311                           ;	WRT5 = 0x1, unprogrammed default
 12312                           ;	Write Protection Block 3
 12313                           ;	WRT6 = 0x1, unprogrammed default
 12314                           ;	Write Protection Block 3
 12315                           ;	WRT7 = 0x1, unprogrammed default
 12316  300006                     	org	3145734
 12317  300006  FF                 	db	255
 12318                           
 12319                           ;Config register CONFIG4H @ 0x300007
 12320                           ;	unspecified, using default values
 12321                           ;	Configuration Register Write Protection bit
 12322                           ;	WRTC = 0x1, unprogrammed default
 12323                           ;	Boot Block Write Protection bit
 12324                           ;	WRTB = 0x1, unprogrammed default
 12325                           ;	Data EEPROM Write Protection bit
 12326                           ;	WRTD = 0x1, unprogrammed default
 12327                           ;	Scanner Enable bit
 12328                           ;	SCANE = 0x1, unprogrammed default
 12329                           ;	Low Voltage Programming Enable bit
 12330                           ;	LVP = 0x1, unprogrammed default
 12331  300007                     	org	3145735
 12332  300007  FF                 	db	255
 12333                           
 12334                           ;Config register CONFIG5L @ 0x300008
 12335                           ;	unspecified, using default values
 12336                           ;	UserNVM Program Memory Code Protection bit
 12337                           ;	CP = 0x1, unprogrammed default
 12338                           ;	DataNVM Memory Code Protection bit
 12339                           ;	CPD = 0x1, unprogrammed default
 12340  300008                     	org	3145736
 12341  300008  FF                 	db	255
 12342                           
 12343                           ;Config register CONFIG5H @ 0x300009
 12344                           ;	unspecified, using default values
 12345  300009                     	org	3145737
 12346  300009  FF                 	db	255
 12347                           
 12348                           ;Config register CONFIG6L @ 0x30000A
 12349                           ;	unspecified, using default values
 12350                           ;	Table Read Protection Block 0
 12351                           ;	EBTR0 = 0x1, unprogrammed default
 12352                           ;	Table Read Protection Block 1
 12353                           ;	EBTR1 = 0x1, unprogrammed default
 12354                           ;	Table Read Protection Block 2
 12355                           ;	EBTR2 = 0x1, unprogrammed default
 12356                           ;	Table Read Protection Block 3
 12357                           ;	EBTR3 = 0x1, unprogrammed default
 12358                           ;	Table Read Protection Block 4
 12359                           ;	EBTR4 = 0x1, unprogrammed default
 12360                           ;	Table Read Protection Block 5
 12361                           ;	EBTR5 = 0x1, unprogrammed default
 12362                           ;	Table Read Protection Block 6
 12363                           ;	EBTR6 = 0x1, unprogrammed default
 12364                           ;	Table Read Protection Block 7
 12365                           ;	EBTR7 = 0x1, unprogrammed default
 12366  30000A                     	org	3145738
 12367  30000A  FF                 	db	255
 12368                           
 12369                           ;Config register CONFIG6H @ 0x30000B
 12370                           ;	unspecified, using default values
 12371                           ;	Boot Block Table Read Protection bit
 12372                           ;	EBTRB = 0x1, unprogrammed default
 12373  30000B                     	org	3145739
 12374  30000B  FF                 	db	255
 12375                           tosu	equ	0xFFF
 12376                           tosh	equ	0xFFE
 12377                           tosl	equ	0xFFD
 12378                           stkptr	equ	0xFFC
 12379                           pclatu	equ	0xFFB
 12380                           pclath	equ	0xFFA
 12381                           pcl	equ	0xFF9
 12382                           tblptru	equ	0xFF8
 12383                           tblptrh	equ	0xFF7
 12384                           tblptrl	equ	0xFF6
 12385                           tablat	equ	0xFF5
 12386                           prodh	equ	0xFF4
 12387                           prodl	equ	0xFF3
 12388                           indf0	equ	0xFEF
 12389                           postinc0	equ	0xFEE
 12390                           postdec0	equ	0xFED
 12391                           preinc0	equ	0xFEC
 12392                           plusw0	equ	0xFEB
 12393                           fsr0h	equ	0xFEA
 12394                           fsr0l	equ	0xFE9
 12395                           wreg	equ	0xFE8
 12396                           indf1	equ	0xFE7
 12397                           postinc1	equ	0xFE6
 12398                           postdec1	equ	0xFE5
 12399                           preinc1	equ	0xFE4
 12400                           plusw1	equ	0xFE3
 12401                           fsr1h	equ	0xFE2
 12402                           fsr1l	equ	0xFE1
 12403                           bsr	equ	0xFE0
 12404                           indf2	equ	0xFDF
 12405                           postinc2	equ	0xFDE
 12406                           postdec2	equ	0xFDD
 12407                           preinc2	equ	0xFDC
 12408                           plusw2	equ	0xFDB
 12409                           fsr2h	equ	0xFDA
 12410                           fsr2l	equ	0xFD9
 12411                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         88
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160    139     147
    BANK1           256    186     206
    BANK2           256    138     198
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    colorCase@mR	PTR struct motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    colorCase@mL	PTR struct motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    backToStart@fwdArr	PTR unsigned int  size(2) Largest target is 50
		 -> main@fwdArr(BANK1[50]), 

    backToStart@mR	PTR struct motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    backToStart@mL	PTR struct motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    backToStart@actArr	PTR unsigned int  size(2) Largest target is 50
		 -> main@actArr(BANK0[50]), 

    backToStart@lenRead	PTR unsigned char  size(2) Largest target is 1
		 -> main@lenRead(BANK0[1]), 

    backToStart@fwdTime	PTR unsigned int  size(2) Largest target is 2
		 -> main@fwdTime(BANK0[2]), 

    fwdTimeArray@fwdTime	PTR int  size(2) Largest target is 2
		 -> main@fwdTime(BANK0[2]), 

    fwdTimeArray@fwdArr	PTR int  size(2) Largest target is 50
		 -> main@fwdArr(BANK1[50]), 

    actionArray@actArr	PTR int  size(2) Largest target is 50
		 -> main@actArr(BANK0[50]), 

    blackAction@mR	PTR struct motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    blackAction@mL	PTR struct motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    whiteAction@mR	PTR struct motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    whiteAction@mL	PTR struct motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    lightBlueAction@mR	PTR struct motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    lightBlueAction@mL	PTR struct motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    orangeAction@mR	PTR struct motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    orangeAction@mL	PTR struct motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    pinkAction@mR	PTR struct motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    pinkAction@mL	PTR struct motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    yellowAction@mR	PTR struct motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    yellowAction@mL	PTR struct motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    blueAction@mR	PTR struct motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    blueAction@mL	PTR struct motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    greenAction@mR	PTR struct motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    greenAction@mL	PTR struct motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    redAction@mR	PTR struct motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    redAction@mL	PTR struct motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    nullAction@mR	PTR struct motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    nullAction@mL	PTR struct motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    adjustforward@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    adjustforward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    adjustforward@mR	PTR struct motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    adjustforward@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    adjustforward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    adjustforward@mL	PTR struct motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    adjustbackward@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    adjustbackward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    adjustbackward@mR	PTR struct motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    adjustbackward@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    adjustbackward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    adjustbackward@mL	PTR struct motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    backward@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    backward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    backward@mR	PTR struct motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    backward@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    backward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    backward@mL	PTR struct motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    forward@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    forward@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    forward@mR	PTR struct motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    forward@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    forward@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    forward@mL	PTR struct motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    turn180@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turn180@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    turn180@mR	PTR struct motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    turn180@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turn180@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    turn180@mL	PTR struct motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    turnACW45@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnACW45@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    turnACW45@mR	PTR struct motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    turnACW45@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnACW45@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    turnACW45@mL	PTR struct motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    turnCW45@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnCW45@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    turnCW45@mR	PTR struct motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    turnCW45@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    turnCW45@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    turnCW45@mL	PTR struct motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    stop@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    stop@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    stop@mR	PTR struct motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    stop@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    stop@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    stop@mL	PTR struct motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    setMotorPWM@m.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    setMotorPWM@m.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    setMotorPWM@m	PTR struct motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), main@motorL(BANK2[9]), 

    initDCmotorsPWM@mR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    initDCmotorsPWM@mR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    initDCmotorsPWM@mR	PTR struct motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    initDCmotorsPWM@mL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    initDCmotorsPWM@mL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    initDCmotorsPWM@mL	PTR struct motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    findcolor@lenRead	PTR unsigned char  size(2) Largest target is 1
		 -> main@lenRead(BANK0[1]), 

    findcolor@sh	PTR struct storecolor size(2) Largest target is 120
		 -> main@sh(BANK1[120]), 

    findcolor@hr	PTR struct getcolor size(2) Largest target is 8
		 -> main@hr(BANK1[8]), 

    findcolor@cr	PTR struct getcolor size(2) Largest target is 8
		 -> main@cr(BANK0[8]), 

    scanColor@fwdTime	PTR unsigned int  size(2) Largest target is 2
		 -> main@fwdTime(BANK0[2]), 

    scanColor@mR	PTR struct motor size(2) Largest target is 11
		 -> main@motorR(BANK2[9]), 

    scanColor@mL	PTR struct motor size(2) Largest target is 11
		 -> main@motorL(BANK2[9]), 

    scanColor@sc	PTR struct storecolor size(2) Largest target is 120
		 -> main@sc(BANK2[120]), 

    scanColor@clear	PTR struct getcolor size(2) Largest target is 8
		 -> main@clear(BANK1[8]), 

    calibrateColor@sc	PTR struct storecolor size(2) Largest target is 120
		 -> main@sc(BANK2[120]), 

    findHSV@hr	PTR struct getcolor size(2) Largest target is 8
		 -> main@hr(BANK1[8]), 

    findHSV@cr	PTR struct getcolor size(2) Largest target is 8
		 -> main@cr(BANK0[8]), 

    convertHSV@sh	PTR struct storecolor size(2) Largest target is 120
		 -> main@sh(BANK1[120]), 

    convertHSV$765	PTR unsigned int  size(2) Largest target is 120
		 -> sc.G(BANK0[30]), sc.R(BANK0[30]), main@sc(BANK2[120]), 

    convertHSV$763	PTR unsigned int  size(2) Largest target is 120
		 -> sc.B(BANK0[30]), sc.R(BANK0[30]), main@sc(BANK2[120]), 

    convertHSV$761	PTR unsigned int  size(2) Largest target is 120
		 -> sc.B(BANK0[30]), sc.G(BANK0[30]), main@sc(BANK2[120]), 

    convertHSV@sc	PTR struct storecolor size(2) Largest target is 120
		 -> main@sc(BANK2[120]), 

    motorL.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorL.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    S24motor$dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    motorR.dir_LAT	PTR unsigned char  size(2) Largest target is 1
		 -> LATG(SFR_3[1]), LATE(SFR_3[1]), 

    S24motor$dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 

    motorR.dutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> PWM7DCH(BITBIGSFRhlll[1]), PWM6DCH(BITBIGSFRhlll[1]), 


Critical Paths under _main in COMRAM

    _scanColor->_adjustforward
    _adjustforward->_stop
    _findHSV->___fltol
    _convertHSV->___fltol
    ___fltol->___flmul
    ___flsub->___fladd
    ___fladd->___xxtofl
    ___flmul->___fldiv
    ___fldiv->___flsub
    _color_click_init->_color_writetoaddr
    _color_writetoaddr->_I2C_2_Master_Write
    _calibrateColor->_color_read_Blue
    _calibrateColor->_color_read_Clear
    _calibrateColor->_color_read_Green
    _calibrateColor->_color_read_Red
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _backToStart->_colorCase
    _forward->_stop
    _colorCase->_blackAction
    _colorCase->_greenAction
    _colorCase->_lightBlueAction
    _colorCase->_orangeAction
    _colorCase->_pinkAction
    _colorCase->_redAction
    _colorCase->_whiteAction
    _colorCase->_yellowAction
    _yellowAction->_adjustbackward
    _yellowAction->_backward
    _yellowAction->_turnACW45
    _yellowAction->_turnCW45
    _whiteAction->_adjustbackward
    _whiteAction->_turn180
    _redAction->_adjustbackward
    _redAction->_turnACW45
    _redAction->_turnCW45
    _pinkAction->_adjustbackward
    _pinkAction->_backward
    _pinkAction->_turnACW45
    _pinkAction->_turnCW45
    _backward->_stop
    _orangeAction->_adjustbackward
    _orangeAction->_turnACW45
    _orangeAction->_turnCW45
    _nullAction->_stop
    _lightBlueAction->_adjustbackward
    _lightBlueAction->_turnACW45
    _lightBlueAction->_turnCW45
    _greenAction->_adjustbackward
    _greenAction->_turnACW45
    _greenAction->_turnCW45
    _turnCW45->_stop
    _turnACW45->_stop
    _blueAction->_adjustbackward
    _blueAction->_turn180
    _blackAction->_adjustbackward
    _blackAction->_turn180
    _turn180->_stop
    _adjustbackward->_stop
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _main in BANK0

    _main->_findcolor
    _findcolor->_findHSV
    _findHSV->___fltol
    _convertHSV->___fltol

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               481   481      0  562506
                                             94 COMRAM     1     1      0
                                             73 BANK0     66    66      0
                                              0 BANK1    186   186      0
                                              0 BANK2    138   138      0
                  _I2C_2_Master_Init
                        _actionArray
                        _backToStart
                     _calibrateColor
                          _colorCase
                   _color_click_init
                         _convertHSV
                          _findcolor
                       _fwdTimeArray
                         _initButton
                    _initDCmotorsPWM
                         _initUSART4
                          _scanColor
 ---------------------------------------------------------------------------------
 (1) _scanColor                                           20    10     10   21588
                                             34 COMRAM    20    10     10
                      _adjustforward
                   _color_read_Clear
                            _forward
                               _stop
                          _turnonLED
 ---------------------------------------------------------------------------------
 (2) _adjustforward                                        6     2      4    6962
                                             28 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      8     2      6     426
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _initButton                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _fwdTimeArray                                         7     3      4     240
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _findcolor                                           28    20      8   20891
                                             45 BANK0     28    20      8
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                            _findHSV
                          _turnonLED
 ---------------------------------------------------------------------------------
 (2) _findHSV                                             41    37      4   16081
                                              4 BANK0     41    37      4
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (1) _convertHSV                                          46    42      4   16659
                                              4 BANK0     46    42      4
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4    1643
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     685
                                             88 COMRAM     6     2      4
                                              0 BANK0      4     4      0
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    4345
                                             30 COMRAM     8     0      8
                            ___fladd
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             16     8      8    2958
                                             14 COMRAM    16     8      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    2484
                                             63 COMRAM    25    17      8
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2139
                                             38 COMRAM    25    17      8
                            ___fladd (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0     294
                                              4 COMRAM     1     1      0
                  _I2C_2_Master_Init
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calibrateColor                                       4     2      2    3190
                                             11 COMRAM     4     2      2
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                          _turnonLED
 ---------------------------------------------------------------------------------
 (2) _turnonLED                                            6     0      6    2574
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _backToStart                                         21     8     13  252910
                                             49 COMRAM    21     8     13
                          _colorCase
                            _forward
 ---------------------------------------------------------------------------------
 (2) _forward                                              5     1      4    7070
                                             28 COMRAM     5     1      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _colorCase                                            8     3      5  244953
                                             41 COMRAM     8     3      5
                        _blackAction
                         _blueAction
                        _greenAction
                    _lightBlueAction
                         _nullAction
                       _orangeAction
                         _pinkAction
                          _redAction
                        _whiteAction
                       _yellowAction
 ---------------------------------------------------------------------------------
 (2) _yellowAction                                         7     3      4   36038
                                             34 COMRAM     7     3      4
                     _adjustbackward
                           _backward
                          _turnACW45
                           _turnCW45
 ---------------------------------------------------------------------------------
 (2) _whiteAction                                          7     3      4   17790
                                             34 COMRAM     7     3      4
                     _adjustbackward
                            _turn180
 ---------------------------------------------------------------------------------
 (2) _redAction                                            7     3      4   28532
                                             34 COMRAM     7     3      4
                     _adjustbackward
                          _turnACW45
                           _turnCW45
 ---------------------------------------------------------------------------------
 (2) _pinkAction                                           7     3      4   36038
                                             34 COMRAM     7     3      4
                     _adjustbackward
                           _backward
                          _turnACW45
                           _turnCW45
 ---------------------------------------------------------------------------------
 (3) _backward                                             6     2      4    7418
                                             28 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _orangeAction                                         7     3      4   28576
                                             34 COMRAM     7     3      4
                     _adjustbackward
                          _turnACW45
                           _turnCW45
 ---------------------------------------------------------------------------------
 (2) _nullAction                                           4     0      4    4285
                                             28 COMRAM     4     0      4
                               _stop
 ---------------------------------------------------------------------------------
 (2) _lightBlueAction                                      7     3      4   28576
                                             34 COMRAM     7     3      4
                     _adjustbackward
                          _turnACW45
                           _turnCW45
 ---------------------------------------------------------------------------------
 (2) _greenAction                                          7     3      4   28532
                                             34 COMRAM     7     3      4
                     _adjustbackward
                          _turnACW45
                           _turnCW45
 ---------------------------------------------------------------------------------
 (3) _turnCW45                                             6     2      4    8938
                                             28 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _turnACW45                                            6     2      4    8938
                                             28 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _blueAction                                           7     3      4   17680
                                             34 COMRAM     6     2      4
                     _adjustbackward
                            _turn180
 ---------------------------------------------------------------------------------
 (2) _blackAction                                          7     3      4   17790
                                             34 COMRAM     7     3      4
                     _adjustbackward
                            _turn180
 ---------------------------------------------------------------------------------
 (3) _turn180                                              6     2      4    7266
                                             28 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (3) _adjustbackward                                       6     2      4   10174
                                             28 COMRAM     6     2      4
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (2) _stop                                                 4     0      4    4089
                                             24 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _setMotorPWM                                         11     9      2    2413
                                             13 COMRAM    11     9      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     355
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     358
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _actionArray                                          8     5      3     218
                                              0 COMRAM     8     5      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_2_Master_Init
   _actionArray
   _backToStart
     _colorCase
       _blackAction
         _adjustbackward
           _setMotorPWM
             ___lwdiv
               ___wmul (ARG)
             ___wmul
           _stop
             _setMotorPWM
         _turn180
           _setMotorPWM
           _stop
       _blueAction
         _adjustbackward
         _turn180
       _greenAction
         _adjustbackward
         _turnACW45
           _setMotorPWM
           _stop
         _turnCW45
           _setMotorPWM
           _stop
       _lightBlueAction
         _adjustbackward
         _turnACW45
         _turnCW45
       _nullAction
         _stop
       _orangeAction
         _adjustbackward
         _turnACW45
         _turnCW45
       _pinkAction
         _adjustbackward
         _backward
           _setMotorPWM
           _stop
         _turnACW45
         _turnCW45
       _redAction
         _adjustbackward
         _turnACW45
         _turnCW45
       _whiteAction
         _adjustbackward
         _turn180
       _yellowAction
         _adjustbackward
         _backward
         _turnACW45
         _turnCW45
     _forward
       _setMotorPWM
       _stop
   _calibrateColor
     _color_read_Blue
       _I2C_2_Master_Read
         _I2C_2_Master_Idle
       _I2C_2_Master_RepStart
         _I2C_2_Master_Idle
       _I2C_2_Master_Start
         _I2C_2_Master_Idle
       _I2C_2_Master_Stop
         _I2C_2_Master_Idle
       _I2C_2_Master_Write
         _I2C_2_Master_Idle
     _color_read_Clear
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Green
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _color_read_Red
       _I2C_2_Master_Read
       _I2C_2_Master_RepStart
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
     _turnonLED
   _colorCase
   _color_click_init
     _I2C_2_Master_Init
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _convertHSV
     ___fladd
       ___xxtofl (ARG)
     ___fldiv
       ___fladd (ARG)
       ___flsub (ARG)
         ___fladd
       ___xxtofl (ARG)
     ___flmul
       ___fladd (ARG)
       ___fldiv (ARG)
       ___flsub (ARG)
       ___xxtofl (ARG)
     ___flsub
     ___fltol
       ___flmul (ARG)
     ___xxtofl
   _findcolor
     _color_read_Blue
     _color_read_Green
     _color_read_Red
     _findHSV
       ___fladd
       ___fldiv
       ___flmul
       ___flsub
       ___fltol
       ___xxtofl
     _turnonLED
   _fwdTimeArray
   _initButton
   _initDCmotorsPWM
   _initUSART4
   _scanColor
     _adjustforward
       _setMotorPWM
       _stop
     _color_read_Clear
     _forward
     _stop
     _turnonLED

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      53        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     8A      C6       9       77.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100     BA      CE       7       80.5%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8B      93       5       91.9%
BITBIGSFRllhlhh     8F      0       0      39        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITBIGSFRhh         40      0       0      32        0.0%
BITBIGSFRllllhh     32      0       0      44        0.0%
BITBIGSFRllllhl     2A      0       0      48        0.0%
BITBIGSFRllllll     26      0       0      51        0.0%
BITBIGSFRllhlll     20      0       0      42        0.0%
BITBIGSFRllllhl     19      0       0      49        0.0%
BITBIGSFRhlh        17      0       0      33        0.0%
BITBIGSFRhlll       11      0       0      35        0.0%
BITBIGSFRlllh        C      0       0      43        0.0%
BITBIGSFRllhlhl      9      0       0      40        0.0%
BITBIGSFRlllllh      6      0       0      50        0.0%
BITBIGSFRllllhl      6      0       0      47        0.0%
BITBIGSFRllllhl      5      0       0      46        0.0%
BITBIGSFRlhhh        5      0       0      36        0.0%
BITBIGSFRllllhh      3      0       0      45        0.0%
BITBIGSFRhllh        1      0       0      34        0.0%
BITBIGSFRllhllh      1      0       0      41        0.0%
BITBIGSFRllhh        1      0       0      38        0.0%
BITBIGSFRlhllh       1      0       0      37        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     286      52        0.0%
DATA                 0      0     286       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Thu Mar 17 04:00:43 2022

              ?_calibrateColor 000C                 _color_read_Red BC86                   ___fldiv@aexp 003F  
                 ___fldiv@bexp 003E                   ___fldiv@sign 0037                _color_read_Blue BB96  
                           l53 D7CC                             l65 D948                             l66 D948  
                           l69 D95E            ___wmul@multiplicand 0003               _color_read_Clear BBE6  
             _color_read_Green BC36                            l131 BACC                            l140 BC84  
                          l301 BA6E                            l221 F524                            l310 B970  
                          l134 B9D4                            l143 BBE4                            l151 BD60  
                          l304 BA1E                            l128 B9B4                            l240 D3C6  
                          l313 B966                            l137 BCD4                            l153 BD7A  
                          l410 C080                            l322 BB4E                            l146 BC34  
                          l307 BA44                            l155 BD7C                            l227 CDE8  
                          l243 ECD4                            l316 B97A                            l149 BD46  
                          l237 D37A                            l502 BB0C                            l254 E932  
                          l407 C35A                            l423 C438                            l415 C0C4  
                          l319 B986                            l255 E94A                            l256 E964  
                          l601 BA1C                            l273 ECE4                            l426 BEE0  
                          l274 ED1E                            l434 C516                            l451 B99C  
                          l508 BD26                            l461 C7DA                            l189 FFFE  
               yellowAction@mL 0023                            l374 D74E                            l383 C600  
                          l391 C27C                            l551 D0B8                            l367 C6EA  
                          l464 BDEE                            l456 C8CA                            l474 D230  
               yellowAction@mR 0025                            l492 BF74                            l484 CAC2  
                          l469 CF44                            l399 C1A0                            l479 CBC6  
                          l488 C008                            l586 B9F6                            l898 CCCE  
                  findcolor@cr 008D                    findcolor@hr 008F                    findcolor@sh 0091  
                          wreg 000FE8                    colorCase@mL 002B                    colorCase@mR 002D  
                 ___flmul@aexp 0051                   ___flmul@bexp 0052                   ___flmul@sign 004C  
                 ___flmul@temp 0057                   ___flmul@prod 0053                   ?_greenAction 0023  
                 ___fltol@exp1 005E                           l1130 E302                           l1131 E2C8  
                         l1222 DFB6                           l1215 DDC0                           l3000 D640  
                         l1232 E0E6                           l1224 E02E                           l1225 E01C  
                         l1129 E314                           l3002 D660                           l3010 C51C  
                         l1146 E42E                           l1138 E5E4                           l1219 E124  
                         l1155 E4FE                           l1171 BB94                           l1092 BE5A  
                         l3004 D67C                           l3020 C584                           l3012 C54C  
                         l3100 C374                           l1156 E4EC                           l3006 D6E6  
                         l3014 C558                           l3030 C5D0                           l3110 C3DC  
                         l3102 C384                           l1270 D512                           l1183 DCFA  
                         l1263 D4B6                    main@lenRead 00DE                           l3032 C5E8  
                         l3024 C5A0                           l3016 C564                           l3008 C518  
                         l3120 BE7C                           l3040 C1BA                           l3104 C398  
                         l3112 C3F4                           l3200 E252                           l1256 D41E  
                         l4000 EEA0                           l1185 DB5A                           l3026 C5B8  
                         l3018 C56C                           l3130 BECC                           l3122 BE8C  
                         l3050 C222                           l3042 C1CA                           l3114 C40C  
                         l3106 C3C4                           l3034 BA1E                           l1194 DBA0  
                         l3202 E256                           l3210 E266                           l4010 EF4A  
                         l4002 EEB8                           l1099 BE62                           l1259 D57A  
                         l3028 C5C4                           l3124 BE9C                           l3060 C0DE  
                         l3044 C1DE                           l3052 C238                           l3116 C424  
                         l3108 C3D0                           l4100 C046                           l3036 BA2E  
                         l1196 DC18                           l1188 DB1E                           l3220 E2D6  
                         l3212 E26A                           l3204 E25A                           l3140 E152  
                         l3132 E126                           l4020 EFD8                           l4012 EF4E  
                         l4004 EECC                           l1197 DC06                           l3126 BEA8  
                         l3118 BE64                           l3070 C146                           l3062 C0EE  
                         l3054 C250                           l3046 C20A                           l3038 C1A2  
                         l4110 C0B0                           l4102 C05A                           l3302 E50E  
                         l3310 E564                           l3230 E300                           l3222 E2E2  
                         l3214 E294                           l3206 E25E                           l3150 E18C  
                         l3142 E162                           l3134 E132                           l4030 F07C  
                         l4014 EF84                           l4022 EFFE                           l4006 EEF2  
                         l3128 BEB4                           l3080 C296                           l3064 C102  
                         l3072 C15C                           l3056 C268                           l3048 C216  
                         l4104 C066                           l3320 E5B6                           l3312 E574  
                         l3304 E51A                           l3240 E356                           l3232 E322  
                         l3224 E2E6                           l3216 E2B0                           l3208 E262  
                         l3160 E1BA                           l3152 E192                           l3144 E172  
                         l3136 E140                           l4200 F65A                           l4040 F222  
                         l4032 F08C                           l4024 F002                           l4016 EFB0  
                         l4008 EF1C                           l4120 B9F0                           l4112 B9D6  
                         l3090 C2FE                           l3082 C2A6                           l3410 BDD6  
                         l3402 BD7E                           l3074 C174                           l3066 C12E  
                         l3058 C0C6                           l4106 C072                           l4130 BAA8  
                         l3330 E5D4                           l3322 E5BC                           l3314 E584  
                         l3306 E528                           l3250 E390                           l3242 E364  
                         l3234 E332                           l3226 E2F4                           l3218 E2C0  
                         l3170 E1EE                           l3162 E1BC                           l3154 E1A4  
                         l3146 E174                           l3138 E142                           l4210 F794  
                         l4202 F6A8                           l4042 F27E                           l4050 F3AE  
                         l4034 F0B2                           l4026 F038                           l4018 EFC8  
                         l4122 B9F2                           l4114 B9DA                           l3084 C2BA  
                         l3092 C316                           l3404 BD96                           l3076 C18C  
                         l3068 C13A                           l3500 CA2A                           l3420 CE40  
                         l3412 CDEC                           l4108 C098                           l3340 B982  
                         l4132 BAB8                           l3324 E5BE                           l3316 E5A4  
                         l3308 E562                           l3260 E3FC                           l3252 E392  
                         l3244 E372                           l3228 E2F6                           l3180 E22A  
                         l3164 E1CC                           l3172 E1F6                           l3156 E1A6  
                         l3148 E17C                           l4220 F8B2                           l4212 F7B8  
                         l4204 F6F6                           l4060 F470                           l4052 F3BE  
                         l4044 F316                           l4036 F0C6                           l4028 F064  
                         l4140 C618                           l4124 B9F4                           l4116 B9E4  
                         l3094 C32E                           l3086 C2E6                           l3078 C27E  
                         l3406 BDAA                           l3502 CA3E                           l3510 BF78  
                         l3422 CE54                           l3414 CDFC                           l3430 CEB0  
                         l3350 BB10                           l3334 B968                           l3342 B972  
                         l4134 BAC2                           l4126 BA9A                           l3326 E5C4  
                         l3318 E5A8                           l3270 E454                           l3262 E3FE  
                         l3254 E39C                           l3246 E37E                           l3238 E346  
                         l3190 E23E                           l3182 E22E                           l3174 E206  
                         l3166 E1DC                           l3158 E1AC                           l4230 F98C  
                         l4222 F8B6                           l4214 F7D8                           l4206 F6FA  
                         l4062 F4B0                           l4054 F3F2                           l4038 F18A  
                         l4150 C646                           l4142 C62C                           l4118 B9E6  
                         l4310 D312                           l4302 D280                           l3096 C346  
                         l3088 C2F2                           l3408 BDC2                           l3504 CA52  
                         l3440 D0BC                           l3520 BFF4                           l3512 BF88  
                         l3432 CED8                           l3424 CE6C                           l3416 CE14  
                         l3360 BB4C                           l3352 BB14                           l3336 B96C  
                         l3344 B976                           l4128 BA9E                           l3600 DAE2  
                         l3328 E5D2                           l3280 E482                           l3264 E40E  
                         l3248 E382                           l3256 E3A2                           l3192 E242  
                         l3184 E232                           l3176 E218                           l3168 E1EC  
                         l4240 FA84                           l4224 F900                           l4232 F9C2  
                         l4208 F73C                           l4216 F80E                           l4064 F4C0  
                         l4056 F404                           l4048 F372                           l4400 E8D4  
                         l4136 B99E                           l4160 C6A2                           l4152 C65A  
                         l4144 C630                           l4080 C476                           l4320 D37C  
                         l4312 D334                           l4304 D2C0                           l3530 BF4C  
                         l3522 BEE4                           l3506 CA6E                           l3098 C35C  
                         l3450 D124                           l3442 D0CC                           l3370 C806  
                         l3514 BF9C                           l3434 CEF0                           l3426 CE80  
                         l3418 CE28                           l3354 BB1C                           l3346 B95E  
                         l3338 B97E                           l4170 CD04                           l3610 DB28  
                         l3602 DAEA                           l3282 E490                           l3274 E468  
                         l3290 E4AE                           l3258 E3C8                           l3266 E41E  
                         l3194 E246                           l3186 E236                           l3178 E226  
                         l4250 FC8E                           l4242 FA9C                           l4234 F9C6  
                         l4226 F950                           l4218 F85C                           l4066 F4E4  
                         l4058 F460                           l4410 E94C                           l4402 E926  
                         l4330 BD14                           l4162 C6B6                           l4154 C66A  
                         l4146 C642                           l4138 C602                           l4090 C4EA  
                         l4082 C4A2                           l4074 C43A                           l4322 D390  
                         l4314 D348                           l4306 D2F2                           l3532 BF60  
                         l3524 BEF4                           l3364 B988                           l3460 D1A8  
                         l3452 D13C                           l3444 D0E4                           l3372 C81A  
                         l3380 C876                           l3516 BFB4                           l3436 CF04  
                         l3428 CE94                           l3356 BB24                           l3348 B962  
                         l4180 CDB6                           l4172 CD32                           l3620 DB80  
                         l3612 DB46                           l3604 DAFA                           l3540 D97E  
                         l3700 DD9A                           l3284 E498                           l3276 E472  
                         l3268 E444                           l3292 E4BC                           l3196 E24A  
                         l3188 E23A                           l4252 FCEA                           l4260 FE3E  
                         l4244 FAD2                           l4236 FA10                           l4228 F974  
                         l4068 F4FA                           l4500 ED18                           l4420 E99A  
                         l4404 E92E                           l4412 E960                           l4340 E62E  
                         l4332 BD24                           l4164 C6D0                           l4156 C67E  
                         l4148 C644                           l4092 C502                           l4084 C4AE  
                         l4076 C452                           l4316 D360                           l4308 D2F6  
                         l4324 D3B8                           l3526 BF08                           l3390 C72A  
                         l3470 CAC6                           l3462 D1C0                           l3454 D150  
                         l3446 D0F8                           l3374 C832                           l3366 C7DE  
                         l3518 BFE0                           l3438 CF18                           l4094 C00A  
                         l4510 C8CC                           l3358 BB4A                           l4182 CDE6  
                         l4174 CD58                           l4166 CCD0                           l3630 DBBE  
                         l3622 DB86                           l3614 DB48                           l3606 DB0E  
                         l3542 D98E                           l3550 D9B8                           l3534 D962  
                         l3702 DDAA                           l3294 E4C0                           l3286 E49C  
                         l3278 E480                           l3198 E24E                           l4270 FF00  
                         l4262 FE4E                           l4254 FDA6                           l4246 FAE6  
                         l4238 FA60                           l4190 F52C                           l4430 E9DA  
                         l4422 E9A2                           l4414 E966                           l4406 E934  
                         l4350 E6AA                           l4342 E646                           l4334 E5E6  
                         l4326 BCD8                           l4158 C68E                           l4086 C4BA  
                         l4078 C462                           l4318 D362                           l4504 BAD0  
                         l3528 BF20                           l3392 C742                           l3384 C6EE  
                         l3480 CB2E                           l3472 CAD6                           l3464 D1EC  
                         l3456 D164                           l3448 D110                           l3376 C846  
                         l3368 C7EE                           l4096 C022                           l4520 C930  
                         l4512 C8DC                           l4176 CD86                           l4168 CCEC  
                         l3640 DC28                           l3632 DBC2                           l3624 DB90  
                         l3616 DB58                           l3608 DB1C                           l3560 D9E4  
                         l3552 D9C8                           l3544 D99E                           l3536 D96E  
                         l3720 DE2C                           l3712 DDF4                           l3704 DDB0  
                         l3296 E4CE                           l3288 E4AC                           l4280 FFEC  
                         l4272 FF40                           l4264 FE82                           l4248 FBD2  
                         l4192 F57C                           l4184 F526                           l4440 EA50  
                         l4432 E9EC                           l4424 E9B4                           l4416 E976  
                         l4408 E948                           l4360 E6F0                           l4352 E6C6  
                         l4344 E660                           l4336 E602                           l4328 BCEC  
                         l4088 C4D2                           l4506 BAE4                           l3394 C756  
                         l3386 C6FE                           l3490 C9C2                           l3482 CB42  
                         l3474 CAEE                           l3466 D200                           l3458 D180  
                         l3378 C85A                           l4098 C032                           l4522 C958  
                         l4178 CDB4                           l3650 DC8A                           l3642 DC34  
                         l3634 DBD0                           l3626 DB9E                           l3618 DB6A  
                         l3562 D9F4                           l3570 DA1E                           l3554 D9CE  
                         l3546 D9AE                           l3538 D97C                           l3730 DE76  
                         l3722 DE44                           l3714 DE00                           l3706 DDD0  
                         l3298 E4E4                           l3802 BB50                           l3810 CBDE  
                         l4282 FFEE                           l4274 FF50                           l4266 FE94  
                         l4258 FE02                           l4194 F5CC                           l4450 EAEC  
                         l4442 EA82                           l4434 EA08                           l4426 E9C6  
                         l4418 E988                           l4362 E6F4                           l4354 E6DA  
                         l4346 E678                           l4338 E61A                           l4290 D236  
                         l4530 D750                           l4508 BB0A                           l3396 C76A  
                         l3388 C716                           l3492 C9D2                           l3484 CB56  
                         l3476 CB02                           l4524 C98E                           l4516 C8EC  
                         l3900 BA50                           l3660 DCE8                           l3652 DCA0  
                         l3644 DC42                           l3636 DBFE                           l3628 DBB0  
                         l3580 DA60                           l3572 DA2E                           l3564 DA04  
                         l3556 D9D4                           l3548 D9B0                           l3740 DECC  
                         l3732 DE86                           l3724 DE50                           l3716 DE0A  
                         l3708 DDE0                           l3804 BB60                           l3820 CC30  
                         l4276 FF86                           l4268 FEF0                           l4196 F5D0  
                         l4460 EB3C                           l4452 EB00                           l4444 EA9E  
                         l4436 EA1C                           l4428 E9CA                           l4380 E79C  
                         l4364 E6F8                           l4356 E6E4                           l4348 E692  
                         l4292 D252                           l4540 D772                           l4532 D762  
                         l3398 C786                           l3494 C9EA                           l3478 CB1A  
                         l3486 CB72                           l3910 CF48                           l4526 C9A8  
                         l4518 C91C                           l3902 BA56                           l3662 DCEE  
                         l3654 DCBA                           l3646 DC6C                           l3574 DA44  
                         l3566 DA14                           l3558 D9E2                           l3750 DF70  
                         l3742 DEE8                           l3734 DE92                           l3726 DE5C  
                         l3718 DE20                           l3830 CC5A                           l3822 CC34  
                         l3814 CBF2                           l4278 FFAE                           l4198 F612  
                         l4470 EBB6                           l4462 EB58                           l4454 EB1A  
                         l4446 EAB8                           l4438 EA34                           l4390 E862  
                         l4382 E7A0                           l4374 E70C                           l4366 E6FC  
                         l4358 E6E8                           l4294 D270                           l4550 D7BE  
                         l4542 D78E                           l4534 D766                           l3496 C9FE  
                         l3920 CFB2                           l3912 CF4C                           l4528 C9B8  
                         l3904 BA58                           l3664 DCF0                           l3656 DCD6  
                         l3648 DC70                           l3592 DA98                           l3576 DA54  
                         l3584 DA74                           l3568 DA16                           l3760 DFC6  
                         l3752 DF7E                           l3744 DEF4                           l3736 DEA2  
                         l3728 DE6A                           l3680 DD28                           l3672 DCFC  
                         l3840 CC82                           l3832 CC64                           l3824 CC42  
                         l3816 CC1E                           l3808 CBC8                           l4480 EC30  
                         l4472 EBCE                           l4464 EB70                           l4456 EB24  
                         l4448 EAD0                           l4392 E866                           l4376 E752  
                         l4368 E704                           l4296 D278                           l4288 D232  
                         l4560 D830                           l4552 D7DA                           l4544 D794  
                         l4536 D76A                           l3498 CA16                           l4650 D062  
                         l3930 D034                           l3922 CFCC                           l3914 CF64  
                         l3906 BA5A                           l3658 DCDA                           l3594 DAB2  
                         l3586 DA84                           l3578 DA5C                           l3762 DFD4  
                         l3754 DF9C                           l3746 DF10                           l3738 DEBC  
                         l3690 DD64                           l3682 DD38                           l3674 DD08  
                         l3842 CC8E                           l3834 CC6E                           l3818 CC20  
                         l4482 EC50                           l4490 ECA4                           l4474 EBE8  
                         l4466 EB84                           l4458 EB2A                           l4394 E86A  
                         l4386 E7B8                           l4378 E798                           l4570 D8BA  
                         l4562 D848                           l4554 D7E8                           l4546 D79C  
                         l4538 D76E                           l2980 BE1A                           l2972 BDF0  
                         l3924 CFE6                           l3916 CF7E                           l3908 BA5C  
                         l3940 B9B8                           l3596 DAC2                           l3588 DA84  
                         l3772 E03E                           l3780 E086                           l3764 DFD8  
                         l3756 DFA6                           l3748 DF3A                           l3692 DD6A  
                         l3684 DD48                           l3676 DD16                           l3844 CC9E  
                         l3860 D444                           l3852 D3CA                           l4492 ECC4  
                         l4484 EC70                           l4476 EC00                           l4468 EB9C  
                         l4388 E80A                           l4580 D908                           l4572 D8CE  
                         l4564 D874                           l4548 D7A8                           l4556 D7EE  
                         l2990 BE4E                           l2982 BE28                           l2974 BDF8  
                         l2966 B9F8                           l3926 D000                           l3918 CF98  
                         l3934 D04E                           l3950 BC7C                           l3942 BC86  
                         l3598 DAD2                           l3790 E0FA                           l3782 E0A0  
                         l3774 E04A                           l3766 DFE6                           l3758 DFB4  
                         l3694 DD78                           l3686 DD4E                           l3678 DD18  
                         l3846 CCAE                           l3870 D49E                           l3854 D3DA  
                         l4646 F388                           l4494 ECCE                           l4486 EC94  
                         l4478 EC1C                           l4398 E882                           l4582 D910  
                         l4574 D8E0                           l4566 D88E                           l4558 D804  
                         l2992 BE54                           l2984 BE2E                           l2976 BE0A  
                         l2968 BA14                           l3928 D01A                           l3960 BBE6  
                         l3944 BCCC                           l3792 E108                           l3784 E0B4  
                         l3776 E058                           l3768 E014                           l3696 DD7A  
                         l3688 DD5E                           l3848 CCBE                           l3880 D502  
                         l3872 D4A0                           l3864 D458                           l3856 D3E8  
                         l4648 FE18                           l4496 ECE6                           l4488 EC9C  
                         l4584 D94C                           l4568 D8A2                           l4576 D8E4  
                         l2986 BE44                           l2978 BE12                           l2994 D57C  
                         l3954 BB96                           l3962 BC2C                           l3970 BD40  
                         l3794 E10A                           l3786 E0CE                           l3778 E082  
                         l3698 DD8A                           l3890 D55A                           l3882 D520  
                         l3874 D4AC                           l3866 D460                           l3858 D42E  
                         l4498 ECFE                           l4578 D8F6                           l2988 BE4C  
                         l2996 D598                           l3956 BBDC                           l3948 BC36  
                         l3972 BD48                           l3788 E0EA                           l3796 E110  
                         l3892 D568                           l3884 D522                           l3876 D4E8  
                         l3868 D46C                           l3980 ED20                           l2998 D5FA  
                         l3974 BD5A                           l3966 BD28                           l3798 E114  
                         l3894 D56A                           l3886 D526                           l3878 D4F4  
                         l3982 ED4E                           l3990 EDE6                           l3976 BD62  
                         l3968 BD2E                           l3888 D54A                           l3992 EE10  
                         l3984 ED7A                           l3978 BD74                           l3898 BA46  
                         l3994 EE3A                           l3986 ED7E                           l3996 EE3E  
                         l3988 EDB0                           l3998 EE70                    main@fwdTime 00E1  
                         u2100 C584                           u2101 C580                           u2030 BE0A  
                         u2110 C59C                           u2031 BE06                           u2111 C598  
                         u2040 BE28                           u2120 C5E8                           u2200 C32E  
                         u3000 DD8A                           u2041 BE24                           u2121 C5E4  
                         u2201 C32A                           u3001 DD86                           u2050 BE44  
                         u2130 C600                           u2210 C346                           u3010 DD9A  
                         u2051 BE40                           u2131 C5FC                           u2211 C342  
                         u3011 DD96                           u2060 D598                           u2220 C40C  
                         u2140 BA2E                           u3100 E03E                           u3020 DDD0  
                         u2300 E1DC                           u2061 D594                           u2221 C408  
                         u2141 BA2A                           u3101 E03A                           u3021 DDCC  
                         u2301 E1D8                           u2070 D67C                           u2230 C424  
                         u2150 BA44                           u3110 E058                           u3030 DDE0  
                         u2310 E218                           u2071 D678                           u2231 C420  
                         u2151 BA40                           u3111 E054                           u3031 DDDC  
                         u2311 E214                           u2160 C250                           u3120 E0A0  
                         u3040 DF5A                           u2400 E332                           u2320 E226  
                         u2240 E140                           u3200 CC9E                           u4000 D8F6  
                 _BAUD4CONbits 000EE9                           u2161 C24C                           u3121 E09C  
                         u2401 E32E                           u2321 E222                           u2241 E13C  
                         u3201 CC9A                           u4001 D8F2                           _LATE 000F7D  
                         u2170 C268                           u3130 E0CE                           u3050 DFB4  
                         u2410 E364                           u2330 E294                           u2250 E152  
                         u3210 CCAE                           u4010 D908                           u2171 C264  
                         u3131 E0CA                           u3051 DFB0                           u2411 E360  
                         u2331 E290                           u2251 E14E                           u3211 CCAA  
                         u4011 D904                           _LATG 000F7F                           u2084 D6D6  
                         u2180 C174                           u3140 E108                           u3060 DFD4  
                         u2500 E4AC                           u2420 E372                           u2340 E2AC  
                         u2260 E162                           u3300 D55A                           u3220 D3DA  
                         u4020 D95E                           u2085 D6D2                           u2181 C170  
                         u3141 E104                           u3061 DFD0                           u3045 DF50  
                         u2501 E4A8                           u2421 E36E                           u2341 E2A6  
                         u2261 E15E                           u3301 D556                           u3221 D3D6  
                         u4021 D95A                           u2094 D740                           u2190 C18C  
                         u3070 DFE6                           u2510 E4BC                           u2430 E390  
                         u2350 E2AE                           u2270 E1A4                           u3150 CBDE  
                         u3310 D568                           u3230 D3E8                           u2095 D73C  
                         u2191 C188                           u3071 DFE2                           u2511 E4B8  
                         u2431 E38C                           u2271 E1A0                           u3151 CBDA  
                         u3311 D564                           u3231 D3E4                           u3320 BD40  
                         u3080 E014                           u2600 E5A4                           u2520 E4CE  
                         u2440 E3C8                           u2360 E2D6                           u2280 E1BA  
                         u3160 CC14                           u3240 D444                           u3400 EF1C  
                         u3321 BD3C                           u3081 E010                           u2601 E5A0  
                         u2521 E4CA                           u2441 E3C4                           u2361 E2D2  
                         u2281 E1B6                           u3241 D440                           u3401 EF18  
                         u3330 BD5A                           u3090 E02A                           u2610 E5B6  
                         u2530 E4E4                           u2450 E40E                           u2370 E2F4  
                         u2290 E1CC                           u3170 CC42                           u3250 D49A  
                         u3410 EF4A                           _T2PR 000FBC                           u3331 BD56  
                         u3091 E026                           u2611 E5B2                           u2531 E4E0  
                         u2451 E40A                           u2371 E2F0                           u2291 E1C8  
                         u3171 CC3E                           u3251 D496                           u3411 EF46  
                         u4107 EA28                           u2700 C9D2                           u3340 BD74  
                         u3500 CDE6                           u2620 E5D2                           u2540 E4FA  
                         u2460 E444                           u2380 E314                           u3180 CC56  
                         u3260 D4E4                           u3420 EFB0                           u2701 C9CE  
                         u3341 BD70                           u3501 CDE2                           u2621 E5CE  
                         u2541 E4F6                           u2461 E440                           u2381 E310  
                         u3181 CC52                           u3165 CC08                           u3261 D4E0  
                         u3421 EFAC                           u4117 EA76                           u4037 D8AE  
                         u2710 BF88                           u2630 BB38                           u2550 E50E  
                         u2470 E454                           u2390 E322                           u3190 CC7E  
                         u3270 D502                           u3510 F57C                           u3430 F064  
                         u3350 ED4E                           u2711 BF84                           u4207 C078  
                         u2631 BB30                           u2551 E50A                           u2471 E450  
                         u2391 E31E                           u3191 CC7A                           u3271 D4FE  
                         u3511 F578                           u3431 F060                           u3351 ED4A  
                         u4127 EAC4                           u4047 D352                           u2720 BEF4  
                         u2800 DA84                           u2560 E528                           u2480 E480  
                         u3280 D512                           u3600 FE4E                           u3520 F5CC  
                         u3440 F3BE                           u3360 ED7A                           u2721 BEF0  
                         u4217 CE06                           u2801 DA80                           u2561 E524  
                         u2481 E47C                           u3281 D50E                           u3601 FE4A  
                         u3521 F5C8                           u3441 F3BA                           u3361 ED76  
                         u4137 EB64                           u4057 C4C4                           u2650 C7EE  
                         u2810 DAFA                           u2730 D97C                           u2570 E562  
                         u2490 E490                           u3290 D520                           u3610 FE94  
                         u3530 F6A8                           u3450 F404                           u3370 EE10  
                         u4307 C824                           u2651 C7EA                           u4227 CE32  
                         u2811 DAF6                           u2731 D978                           u2571 E55E  
                         u2491 E48C                           u3291 D51C                           u3611 FE90  
                         u3531 F6A4                           u3451 F400                           u3371 EE0C  
                         u4147 EB90                           u4067 E60E                           u2660 C6FE  
                         u2900 DC14                           u2820 DB1C                           u2740 D98E  
                         u2580 E574                           u3620 FFFE                           u3540 F6F6  
                         u3380 EE3A                           u3700 E7B4                           u3460 C4EA  
                         u2661 C6FA                           u4317 C864                           u4237 CE5E  
                         u2901 DC10                           u2821 DB18                           u2741 D98A  
                         u2581 E570                           u3621 FFFA                           u3541 F6F2  
                         u3381 EE36                           u4157 EBC2                           u3701 E7B0  
                         u4077 E63A                           u3461 C4E6                           u2670 CDFC  
                         u2910 DC28                           u2830 DB46                           u2750 D99E  
                         u2590 E584                           u3550 F794                           u3390 EEA0  
                         u3710 E80A                           u3470 C502                           u3630 D2C0  
                         u4407 CAE0                           u4327 D0D6                           u4247 CE9E  
                         u2671 CDF8                           u2911 DC24                           u2831 DB42  
                         u2751 D99A                           u2591 E580                           u3551 F790  
                         u3391 EE9C                           u4167 EBF4                           u3711 E806  
                         u4087 E66C                           u3471 C4FE                           u3631 D2BC  
                         u2680 D0CC                           u3480 C098                           u2648 BB3A  
                         u2920 DC42                           u2840 DB6A                           u2760 D9E2  
                         u3560 F85C                           u3800 E99A                           u3720 E862  
                         u3640 D312                           u4417 CB0C                           u4337 D102  
                         u2681 D0C8                           u4257 CEE2                           u3481 C094  
                         u2921 DC3E                           u2841 DB66                           u2761 D9DE  
                         u3561 F858                           u4177 ECF2                           u3801 E996  
                         u3721 E85E                           u4097 E69E                           u3641 D30E  
                         u2690 CAD6                           u3490 C0B0                           u2930 DC8A  
                         u2850 DB80                           u2770 D9F4                           u3570 F8B2  
                         u3810 E9B4                           u3730 E87E                           u3650 D334  
                         u4507 C150                           u4427 CB60                           u2691 CAD2  
                         u4347 D12E                           u4267 CF36                           u3491 C0AC  
                         u4187 BAAE                           u2931 DC86                           u2851 DB7C  
                         u2771 D9F0                           u3571 F8AE                           u3811 E9B0  
                         u3731 E87A                           u3651 D330                           u2940 DCBA  
                         u2860 DB9E                           u2780 DA04                           u3580 F950  
                         u3900 ECC4                           u3820 E9C6                           u3740 E8D4  
                         u3660 D3C6                           u4517 BD88                           u4437 C9DC  
                         u4357 D16E                           u4277 BFA6                           u4197 CCF6  
                         u2941 DCB6                           u2861 DB9A                           u2781 DA00  
                         u3581 F94C                           u3901 ECC0                           u3821 E9C2  
                         u3741 E8D0                           u3661 D3C2                           u2950 DCE8  
                         u2870 DBBE                           u2790 DA44                           u3590 FA60  
                         u3910 ECE4                           u3830 E9DA                           u3750 E926  
                         u3670 BCEC                           u4527 BDB4                           u4447 CA08  
                         u4367 D1B2                           u4287 BFD2                           u2951 DCE4  
                         u2871 DBBA                           u2791 DA40                           u3591 FA5C  
                         u3911 ECE0                           u3831 E9D6                           u3751 E922  
                         u3671 BCE8                           u3920 BAE4                           u2880 DBD0  
                         u2960 DD16                           u3840 E9EC                           u3760 E944  
                         u3680 E752                           u3921 BAE0                           u4537 BDE0  
                         u4457 CA5C                           u4377 D1DE                           u4297 C7F8  
                         u2881 DBCC                           u2961 DD12                           u3841 E9E8  
                         u3761 E940                           u3681 E74E                           u3930 C98E  
                         u2890 DBFE                           u2970 DD28                           u3850 EB1A  
                         u3770 E95C                           u3690 E798                           u4547 BF12  
                         u4467 C708                           u4387 D20A                           u3931 C98A  
                         u2891 DBFA                           u2971 DD24                           u3851 EB16  
                         u3771 E958                           u3691 E794                           u2980 DD38  
                         u3860 EB3C                           u3780 E976                           u3940 D7CC  
                         u4557 BF3E                           u4477 C734                           u4397 C3E6  
                         u2981 DD34                           u3861 EB38                           u3781 E972  
                         u3941 D7C8                           u2990 DD78                           u3870 EC50  
                         u3790 E988                           u3950 D7DA                           u4567 C308  
                         u4487 C774                           u2991 DD74                           u3871 EC4C  
                         u3791 E984                           u3951 D7D6                           u3880 EC70  
                         u3960 D7E8                           u4577 BEBE                           u4497 C22C  
                         u3881 EC6C                           u3961 D7E4                           u3890 EC94  
                         u3970 D800                           u4587 C566                           u3891 EC90  
                         u3971 D7FC                           u3980 D8CE                           u3981 D8CA  
                         u3990 D8E0                           u3991 D8DC                   findcolor@col 00A8  
                         _main D750                           fsr1h 000FE2                           fsr2h 000FDA  
                         indf1 000FE7                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                    main@reverse 005F                           _stop C518  
            blueAction@reverse 0001                           prodh 000FF4                           prodl 000FF3  
                         start 0000                   _yellowAction CDEA               colorCase@reverse 002A  
              ___fldiv@new_exp 0038         __end_of_color_read_Red BCD6                   colorCase@val 0031  
                 ___param_bank 000000                  ?_fwdTimeArray 0001                  ___fltol@sign1 005D  
              __end_of___fladd E5E6                          ?_main 0001                __end_of___fldiv DCFC  
              __end_of___flmul E126                __end_of___flsub BB96                __end_of___fltol CCD0  
                        ?_stop 0019                __end_of___lwdiv BE64                 _adjustbackward BE64  
        __end_of_adjustforward C518                __end_of_findHSV F526                    convertHSV@h 0085  
                  convertHSV@i 0091                    convertHSV@s 0076                    convertHSV@v 0070  
                findcolor@tolH 009D                  findcolor@tolS 00A1                  findcolor@tolV 009F  
   __end_of_I2C_2_Master_Start B972               ?_lightBlueAction 0023     __end_of_I2C_2_Master_Write B988  
              __end_of_forward C0C6              lightBlueAction@mL 0023              lightBlueAction@mR 0025  
               orangeAction@mL 0023                 orangeAction@mR 0025                          main@v 00DF  
               _convertHSV$761 007A                 _convertHSV$763 007C                 _convertHSV$765 007E  
            actionArray@actArr 0001                          plusw2 000FDB                __end_of_turn180 C35C  
            actionArray@lenArr 0008                          status 000FD8        __end_of_color_read_Blue BBE6  
        _I2C_2_Master_RepStart B95E                ?_color_read_Red 0005                    redAction@mL 0023  
                  redAction@mR 0025                __initialization BA70                 ??_fwdTimeArray 0005  
                 __end_of_main D962                   __end_of_stop C602         __end_of_adjustbackward BEE2  
                       ??_main 00A9                         ??_stop 001D                  __activetblptr 000003  
                blackAction@mL 0023                  blackAction@mR 0025                   ?_setMotorPWM 000E  
               backToStart@val 0045                         _RC0PPS 000E62                         _RE2PPS 000E74  
                       _RD5PPS 000E6F                         _RC7PPS 000E69                         _RD6PPS 000E70  
             __end_of_backward C43A       __end_of_color_click_init BACE               calibrateColor@sc 000C  
                       _RX4PPS 000E15                         _TX4REG 000EE4              initDCmotorsPWM@mL 0003  
            initDCmotorsPWM@mR 0005               __end_of___xxtofl D57C                   convertHSV@sc 0064  
                 convertHSV@sh 0066                   convertHSV@ss 0074                      ??___fladd 0017  
                       ___wmul B9F8                      ??___fldiv 002F                      ??___flmul 0048  
                    ??___flsub 0027                      ??___fltol 0060                      ??___lwdiv 000B  
                       clear_0 BA76                         clear_1 BA82                         clear_2 BA8E  
              ?_adjustbackward 001D                         isa$std 000001                      ??_findHSV 0068  
                       main@cr 00E3                         main@hr 01B2                         main@sc 0200  
                       main@sh 013A                _convertHSV$2548 0080                      ??_forward 0021  
                  scanColor@mL 0027                    scanColor@mR 0029                    scanColor@sc 0025  
                    ??_turn180 0021                         stop@mL 0019                         stop@mR 001B  
            ??_initDCmotorsPWM 0007               __end_of_turnCW45 C27E                  whiteAction@mL 0023  
                whiteAction@mR 0025                   ___xxtofl@arg 000B                   ___xxtofl@exp 000A  
                 ___xxtofl@val 0001                     __accesstop 0060        __end_of__initialization BA94  
     __end_of_color_read_Clear BC36       __end_of_color_read_Green BC86         ?_I2C_2_Master_RepStart 0001  
             ??_calibrateColor 000E                  ___rparam_used 000001                     ___fltol@f1 0059  
           greenAction@reverse 0029               ?_color_read_Blue 0005                   ?_whiteAction 0023  
               __pcstackCOMRAM 0001               redAction@reverse 0029               scanColor@fwdTime 002B  
                 backToStart@k 0046           __end_of_fwdTimeArray BD28                     __pbssBANK0 00EB  
                   __pbssBANK1 01BA                     __pbssBANK2 028A                   _findHSV$2549 007C  
            _color_writetoaddr B9B6                   _T2CLKCONbits 000FBF                  ??_backToStart 003F  
           ?_color_writetoaddr 0003                     _blueAction BD7E                        ?___wmul 0001  
          fwdTimeArray@fwdTime 0003            fwdTimeArray@fwdSize 0007                  ?_orangeAction 0023  
          ??_color_writetoaddr 0004                      ?_backward 001D                     backward@mL 001D  
                   backward@mR 001F                      ?___xxtofl 0001             blackAction@reverse 0029  
                      _SP4BRGH 000EE6                        _SP4BRGL 000EE5                        _PWM6DCH 000FA3  
                      _PWM7DCH 000FA0                        _SSP2ADD 000ED6                        _SSP2BUF 000ED5  
       color_writetoaddr@value 0003                     _convertHSV F526               ??_color_read_Red 0007  
    __end_of_color_writetoaddr B9D6             _I2C_2_Master_Start B968                     _initUSART4 B9D6  
           _I2C_2_Master_Write B97C                        __Hparam 0000                        __Lparam 0000  
            color_read_Red@tmp 000A              __end_of_findcolor ED20                     _initButton B99E  
            __end_of_colorCase D0BA                        ___fladd E126                        ___fldiv D962  
                      ___flmul DCFC                        ___flsub BB50                        ___fltol CBC8  
          ?_I2C_2_Master_Start 0001                  ??_blackAction 0027                        ___lwdiv BDF0  
          ?_I2C_2_Master_Write 0001                      ?_turnCW45 001D                        __pcinit BA70  
               ??_orangeAction 0027              __end_of_redAction C8CC                        __ramtop 0E00  
                      _findHSV ED20              backToStart@actArr 0034                        __ptext0 D750  
                      __ptext1 D232                        __ptext2 C43A                        __ptext3 B9D6  
                      __ptext4 C602                        __ptext5 B99E                        __ptext6 BCD6  
                      __ptext7 E5E6                        __ptext8 ED20                        __ptext9 F526  
                   ??_backward 0021            __end_of_backToStart C9C0              backToStart@fwdArr 0038  
                    _T2CONbits 000FBD                        _forward C00A                  fwdTimeArray@j 00EB  
                   ??___xxtofl 0005              __end_of_scanColor D3C8                  ??_actionArray 0004  
                    _T2HLTbits 000FBE                  _RxBufWriteCnt 00F2                     _pinkAction D0BA  
                      _turn180 C27E           ??_I2C_2_Master_Start 0002           ??_I2C_2_Master_Write 0002  
         end_of_initialization BA94                  greenAction@mL 0023                  greenAction@mR 0025  
           setMotorPWM@PWMduty 0017              ?_color_click_init 0001             ??_color_click_init 0005  
                   _nullAction B988               ??_adjustbackward 0021                        postdec1 000FE5  
                      postdec2 000FDD                    ?_blueAction 0023                        postinc0 000FEE  
                      postinc1 000FE6                        postinc2 000FDE         lightBlueAction@reverse 0029  
            __end_of_turnACW45 C1A2                     ??_turnCW45 0021                _initDCmotorsPWM C602  
                    _PORTFbits 000F8E                    ___fladd@grs 001E            __end_of_blackAction BF76  
            __end_of_turnonLED BD7E                  ___xxtofl@sign 0009                      _TRISAbits 000F81  
                    _TRISCbits 000F83                      _TRISDbits 000F84                      _TRISEbits 000F85  
                    _TRISFbits 000F86                      _TRISGbits 000F87                      _TRISHbits 000F88  
                  ___fldiv@grs 003A                    ___fldiv@rem 0033       color_writetoaddr@address 0004  
      ??_I2C_2_Master_RepStart 0002                     findcolor@a 00A3                     findcolor@b 00A4  
                   findcolor@c 00A2                     findcolor@i 00A5                     findcolor@j 00A6  
                   findcolor@k 00A7            __end_of_actionArray BB0E                     main@actArr 00AB  
                  ?_convertHSV 0064                    ___flmul@grs 004D            orangeAction@reverse 0029  
                   main@lenArr 00DD                     main@fwdArr 0100              ?_color_read_Clear 0005  
                 _EUSART4RXbuf 01BA                   _EUSART4TXbuf 028A              ?_color_read_Green 0005  
                  ?_initUSART4 0001                     main@motorL 0281                     main@motorR 0278  
           ??_color_read_Clear 0007             ??_color_read_Green 0007                    ?_initButton 0001  
                 _fwdTimeArray BCD6                    _backToStart C8CC             convertHSV@maxIndex 0084  
           convertHSV@maxValue 008D                 __end_of___wmul BA1E             convertHSV@minValue 0089  
                _adjustforward C43A            color_read_Clear@tmp 000A            start_initialization BA70  
              adjustforward@mL 001D                adjustforward@mR 001F                    ?_pinkAction 0023  
                ??_greenAction 0027                  _TxBufWriteCnt 00F0           __end_of_orangeAction CBC8  
                backToStart@mL 003B                  backToStart@mR 003D                  ?_yellowAction 0023  
              calibrateColor@i 00EE            color_read_Green@tmp 000A                    ?_nullAction 001D  
      __end_of_initDCmotorsPWM C6EC              ??_lightBlueAction 0027                       ??___wmul 0005  
                  _blackAction BEE2                     scanColor@i 00ED                      ___fladd@a 0013  
                    ___fladd@b 000F                   pinkAction@mL 0023                   pinkAction@mR 0025  
                  turnACW45@mL 001D                 ?_adjustforward 001D                    turnACW45@mR 001F  
                    ___fldiv@a 002B                      ___fldiv@b 0027                      ___flmul@a 0044  
                    ___flmul@b 0040                      ___flsub@a 0023                      ___flsub@b 001F  
                  _actionArray BACE                  __pcstackBANK0 0060                  __pcstackBANK1 0100  
                __pcstackBANK2 0200                findHSV@maxIndex 0080                findHSV@maxValue 0089  
              findHSV@minValue 0085            __end_of_greenAction C7DC                 ??_yellowAction 0027  
                 actionArray@i 00EC                    _findHSV$784 0076                    _findHSV$785 0078  
                  _findHSV$786 007A               ___lwdiv@dividend 0007             fwdTimeArray@fwdArr 0001  
                     ?___fladd 000F                       ?___fldiv 0027                       ?___flmul 0040  
                     ?___flsub 001F                       ?___fltol 0059                       ?___lwdiv 0007  
                    _findcolor E5E6                      _colorCase CF46                       ?_findHSV 0064  
         I2C_2_Master_Read@ack 0003           I2C_2_Master_Read@tmp 0004                       ?_forward 001D  
            _I2C_2_Master_Idle BA1E              _I2C_2_Master_Init BA46              _I2C_2_Master_Read BB0E  
                    _redAction C7DC              _I2C_2_Master_Stop B972                   _RxBufReadCnt 00F1  
           ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001  
                ??_setMotorPWM 0010                       ?_turn180 001D             ?_I2C_2_Master_Stop 0001  
             ___lwdiv@quotient 000B       initDCmotorsPWM@PWMperiod 0001                      _scanColor D232  
          ??_I2C_2_Master_Idle 0001            ??_I2C_2_Master_Init 0001            ??_I2C_2_Master_Read 0002  
               ___wmul@product 0005                       _LATAbits 000F79            ??_I2C_2_Master_Stop 0002  
                     _LATCbits 000F7B                       _LATDbits 000F7C                       _LATEbits 000F7D  
                     _LATFbits 000F7E                       _LATGbits 000F7F                       _LATHbits 000F80  
          yellowAction@reverse 0029                      findHSV@cr 0064                      findHSV@hr 0066  
                    findHSV@ss 0070                       _PIR4bits 000E37               ?_initDCmotorsPWM 0001  
                 ??_blueAction 0027                       _SSP2CON2 000EDA                       _SSP2STAT 000ED8  
                   ?_findcolor 008D                     ?_colorCase 002A                ??_adjustforward 0021  
    __end_of_I2C_2_Master_Idle BA46      __end_of_I2C_2_Master_Init BA70      __end_of_I2C_2_Master_Read BB50  
            ___wmul@multiplier 0001      __end_of_I2C_2_Master_Stop B97C                      _turnACW45 C0C6  
                 setMotorPWM@m 000E    I2C_2_Master_Write@data_byte 0002                      main@clear 0132  
                   ?_redAction 0023              ??_color_read_Blue 0007                    turnonLED@BL 0005  
                  turnonLED@GL 0003                    turnonLED@RL 0001                   _TxBufReadCnt 00EF  
                  _greenAction C6EC                     ?_scanColor 0023                      _turnonLED BD28  
           __end_of_blueAction BDF0                   ??_convertHSV 0068               findcolor@lenRead 0093  
__end_of_I2C_2_Master_RepStart B968             color_read_Blue@tmp 000A            __end_of_setMotorPWM D750  
                 ??_initUSART4 0001                  ??_whiteAction 0027                       __Hrparam 0000  
                     __Lrparam 0000                   ??_initButton 0001                      forward@mL 001D  
                    forward@mR 001F                   ?_backToStart 0032                 scanColor@C_max 0033  
               scanColor@i_819 0035                     turnCW45@mL 001D                     turnCW45@mR 001F  
               scanColor@clear 0023                   _orangeAction CAC4                       _backward C35C  
                   _ANSELDbits 000EA7                     _ANSELFbits 000EB4                     ?_turnACW45 001D  
           __end_of_convertHSV 0000           __end_of_yellowAction CF46                       ___xxtofl D3C8  
              ___lwdiv@divisor 0009             __end_of_initUSART4 B9F8                   ??_pinkAction 0027  
              ___lwdiv@counter 000D                       __ptext10 D3C8                       __ptext11 CBC8  
                     __ptext20 BD28                       __ptext12 BB50                       __ptext21 BC86  
                     __ptext13 E126                       __ptext30 BA1E                       __ptext22 BC36  
                     __ptext14 DCFC                       __ptext31 C8CC                       __ptext23 BBE6  
                     __ptext15 D962                       __ptext40 B988                       __ptext32 C00A  
                     __ptext24 BB96                       __ptext16 BA9A                       __ptext41 C9C0  
                     __ptext33 CF46                       __ptext25 B97C                       __ptext17 B9B6  
                     __ptext50 D57C                       __ptext42 C6EC                       __ptext34 CDEA  
                     __ptext26 B972                       __ptext18 BA46                       __ptext51 B9F8  
                     __ptext43 C1A2                       __ptext35 BF76                       __ptext27 B968  
                     __ptext19 CCD0                       __ptext52 BDF0                       __ptext44 C0C6  
                     __ptext36 C7DC                       __ptext28 B95E                       __ptext53 BACE  
                     __ptext45 BD7E                       __ptext37 D0BA                       __ptext29 BB0E  
                     __ptext46 BEE2                       __ptext38 C35C                       __ptext47 C27E  
                     __ptext39 CAC4                       __ptext48 BE64                       __ptext49 C518  
                   ?_turnonLED 0001                   _SSP2CON1bits 000ED9                   _SSP2CON2bits 000EDA  
           __end_of_initButton B9B6                   blueAction@mL 0023                   blueAction@mR 0025  
           backToStart@lenRead 0032                _lightBlueAction C9C0             backToStart@fwdTime 0036  
           backToStart@reverse 003A                       findHSV@h 0081                       findHSV@s 0072  
                     findHSV@v 006C                   ??_nullAction 0021                   nullAction@mL 001D  
                 nullAction@mR 001F                       isa$xinst 000000                     _RC4STAbits 000EE7  
           __end_of_pinkAction D232                   ?_blackAction 0023                 _calibrateColor CCD0  
             adjustbackward@mL 001D               adjustbackward@mR 001F                       _turnCW45 C1A2  
          __end_of_whiteAction C00A                       main@mode 00E0                    ??_findcolor 0095  
                  ??_colorCase 002F                      turn180@mL 001D                      turn180@mR 001F  
                  ??_redAction 0027                   ?_actionArray 0001                    _setMotorPWM D57C  
                  ??_scanColor 002D                    _PWM6CONbits 000FA4             __end_of_nullAction B99E  
                  _PWM7CONbits 000FA1         __end_of_calibrateColor CDEA             whiteAction@reverse 0029  
             _color_click_init BA9A           actionArray@colorScan 0003                    ??_turnACW45 0021  
                   _SSP2DATPPS 000E1D                     _SSP2CLKPPS 000E1C        __end_of_lightBlueAction CAC4  
                ___fladd@signs 001B                    ??_turnonLED 0007              pinkAction@reverse 0029  
                   _TX4STAbits 000EE8                   ___fladd@aexp 001C                   ___fladd@bexp 001D  
                  _whiteAction BF76  
